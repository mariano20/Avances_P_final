
FirmwarePF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c47c  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800c65c  0800c65c  0001c65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c774  0800c774  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800c774  0800c774  0001c774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c77c  0800c77c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c77c  0800c77c  0001c77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c780  0800c780  0001c780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800c784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b58  20000184  0800c908  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cdc  0800c908  00021cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021fe9  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048b4  00000000  00000000  0004219d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00046a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  00047ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d98  00000000  00000000  00049190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6e9  00000000  00000000  0006ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db5c2  00000000  00000000  0008c611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167bd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d0  00000000  00000000  00167c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000184 	.word	0x20000184
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c644 	.word	0x0800c644

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000188 	.word	0x20000188
 800021c:	0800c644 	.word	0x0800c644

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <genclk_init>:
#include "Drivers/gen_clock.h"

void genclk_init(genclk_st *clockg, I2C_HandleTypeDef *i2cHandle){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	clockg->i2cHandle = i2cHandle;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	601a      	str	r2, [r3, #0]
	clockg->clocks[0] = 0;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	715a      	strb	r2, [r3, #5]
		clockg->clocks[1] = 0;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	719a      	strb	r2, [r3, #6]
		clockg->clocks[2] = 0;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	71da      	strb	r2, [r3, #7]
		clockg->clocks[3] = 0;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	721a      	strb	r2, [r3, #8]
		clockg->cfg0[0] = clockg->cfg0[4] = clockg->cfg0[5] = 0x00;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	739a      	strb	r2, [r3, #14]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7b9a      	ldrb	r2, [r3, #14]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	735a      	strb	r2, [r3, #13]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	7b5a      	ldrb	r2, [r3, #13]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	725a      	strb	r2, [r3, #9]
		clockg->cfg0[1] = clockg->cfg1[1] = clockg->cfg2[1] = clockg->cfg3[1] = 0x4e;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	224e      	movs	r2, #78	; 0x4e
 800055a:	771a      	strb	r2, [r3, #28]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	7f1a      	ldrb	r2, [r3, #28]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	759a      	strb	r2, [r3, #22]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	7d9a      	ldrb	r2, [r3, #22]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	741a      	strb	r2, [r3, #16]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7c1a      	ldrb	r2, [r3, #16]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	729a      	strb	r2, [r3, #10]
		clockg->cfg0[2] = 0x34;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2234      	movs	r2, #52	; 0x34
 8000578:	72da      	strb	r2, [r3, #11]
		clockg->cfg0[3] = clockg->cfg1[3] = clockg->cfg2[3] = clockg->cfg3[3] = 0xe1;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	22e1      	movs	r2, #225	; 0xe1
 800057e:	779a      	strb	r2, [r3, #30]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7f9a      	ldrb	r2, [r3, #30]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	761a      	strb	r2, [r3, #24]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7e1a      	ldrb	r2, [r3, #24]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	749a      	strb	r2, [r3, #18]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7c9a      	ldrb	r2, [r3, #18]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	731a      	strb	r2, [r3, #12]
		clockg->cfg1[0] = 0x35;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2235      	movs	r2, #53	; 0x35
 800059c:	73da      	strb	r2, [r3, #15]
		clockg->cfg1[2] = 0x61;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2261      	movs	r2, #97	; 0x61
 80005a2:	745a      	strb	r2, [r3, #17]
		clockg->cfg2[0] = 0x62;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2262      	movs	r2, #98	; 0x62
 80005a8:	755a      	strb	r2, [r3, #21]
		clockg->cfg2[2] = 0x8e;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	228e      	movs	r2, #142	; 0x8e
 80005ae:	75da      	strb	r2, [r3, #23]
		clockg->cfg3[0] = 0x8f;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	228f      	movs	r2, #143	; 0x8f
 80005b4:	76da      	strb	r2, [r3, #27]
		clockg->cfg3[2] = 0xbb;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	22bb      	movs	r2, #187	; 0xbb
 80005ba:	775a      	strb	r2, [r3, #29]
		clockg->cfg1[4] = clockg->cfg1[5] = 0x10;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2210      	movs	r2, #16
 80005c0:	751a      	strb	r2, [r3, #20]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	7d1a      	ldrb	r2, [r3, #20]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	74da      	strb	r2, [r3, #19]
		clockg->cfg2[4] = clockg->cfg2[5] = 0x10;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2210      	movs	r2, #16
 80005ce:	769a      	strb	r2, [r3, #26]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7e9a      	ldrb	r2, [r3, #26]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	765a      	strb	r2, [r3, #25]
		clockg->cfg3[4] = clockg->cfg3[5] = 0x10;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2210      	movs	r2, #16
 80005dc:	f883 2020 	strb.w	r2, [r3, #32]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	77da      	strb	r2, [r3, #31]
	
	/* Reverses SD/OE pin polarity */
	genclk_i2c_write(clockg, 0x10, 0x82);
 80005ea:	2282      	movs	r2, #130	; 0x82
 80005ec:	2110      	movs	r1, #16
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f896 	bl	8000720 <genclk_i2c_write>
	CL= (6.92pF+7.5pF+1.5pF)/2 = 7.9pF 
	which is the closest value to 8pF. 
	Here, Cstray = 1.5pF; Package stray = 7.5pF 
	The binary settings corresponding to this value will be: X1 = X2 = “100000”
	*/
	genclk_i2c_write(clockg, 0x12, 0b10000001);
 80005f4:	2281      	movs	r2, #129	; 0x81
 80005f6:	2112      	movs	r1, #18
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f891 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x13, 0b10000000);
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	2113      	movs	r1, #19
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f88c 	bl	8000720 <genclk_i2c_write>
	
	genclk_i2c_write(clockg, 0x15, 0x00);
 8000608:	2200      	movs	r2, #0
 800060a:	2115      	movs	r1, #21
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f887 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x16, 0x84);
 8000612:	2284      	movs	r2, #132	; 0x84
 8000614:	2116      	movs	r1, #22
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f882 	bl	8000720 <genclk_i2c_write>
	/* Configure PLL Feedback Divider */
	/*
	M = FVCO / FREF;
	M = 2600MHz / 25MHz = 104;
	*/
	genclk_i2c_write(clockg, 0x17, 0x06);
 800061c:	2206      	movs	r2, #6
 800061e:	2117      	movs	r1, #23
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f87d 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x18, 0x80);
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	2118      	movs	r1, #24
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 f878 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x19, 0x00);
 8000630:	2200      	movs	r2, #0
 8000632:	2119      	movs	r1, #25
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f873 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x1A, 0x00);
 800063a:	2200      	movs	r2, #0
 800063c:	211a      	movs	r1, #26
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f86e 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x1B, 0x00);
 8000644:	2200      	movs	r2, #0
 8000646:	211b      	movs	r1, #27
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f869 	bl	8000720 <genclk_i2c_write>
	
	/* VCO Calibration config, Timing Commander values */
	genclk_i2c_write(clockg, 0x1C, 0x9f);
 800064e:	229f      	movs	r2, #159	; 0x9f
 8000650:	211c      	movs	r1, #28
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f864 	bl	8000720 <genclk_i2c_write>
	
	/* PLL Loop Filter Settings, Timing Commander values */
	genclk_i2c_write(clockg, 0x1E, 0xe0);
 8000658:	22e0      	movs	r2, #224	; 0xe0
 800065a:	211e      	movs	r1, #30
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f85f 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x1F, 0x80);
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	211f      	movs	r1, #31
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f85a 	bl	8000720 <genclk_i2c_write>
	
	/* Output Divider Control Settings */
	genclk_i2c_write(clockg, 0x21, 0x81);
 800066c:	2281      	movs	r2, #129	; 0x81
 800066e:	2121      	movs	r1, #33	; 0x21
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f855 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x31, 0x81);
 8000676:	2281      	movs	r2, #129	; 0x81
 8000678:	2131      	movs	r1, #49	; 0x31
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f850 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x41, 0x81);
 8000680:	2281      	movs	r2, #129	; 0x81
 8000682:	2141      	movs	r1, #65	; 0x41
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f84b 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x51, 0x81);
 800068a:	2281      	movs	r2, #129	; 0x81
 800068c:	2151      	movs	r1, #81	; 0x51
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f846 	bl	8000720 <genclk_i2c_write>
	/* Clock Output Configurations Registers:
		all outputs are LVCMOS single ended,
		3.3v and normal slew rate. */
		
	/* Output 1 */
	genclk_i2c_write(clockg, 0x60, 0x9b);
 8000694:	229b      	movs	r2, #155	; 0x9b
 8000696:	2160      	movs	r1, #96	; 0x60
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f841 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x61, 0x01);
 800069e:	2201      	movs	r2, #1
 80006a0:	2161      	movs	r1, #97	; 0x61
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 f83c 	bl	8000720 <genclk_i2c_write>
	/* Output 2 */
	genclk_i2c_write(clockg, 0x62, 0x3b);
 80006a8:	223b      	movs	r2, #59	; 0x3b
 80006aa:	2162      	movs	r1, #98	; 0x62
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f837 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x63, 0x01);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2163      	movs	r1, #99	; 0x63
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f832 	bl	8000720 <genclk_i2c_write>
	/* Output 3 */
	genclk_i2c_write(clockg, 0x64, 0x3b);
 80006bc:	223b      	movs	r2, #59	; 0x3b
 80006be:	2164      	movs	r1, #100	; 0x64
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f82d 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x65, 0x01);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2165      	movs	r1, #101	; 0x65
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f828 	bl	8000720 <genclk_i2c_write>
	/* Output 4 */
	genclk_i2c_write(clockg, 0x66, 0x3b);
 80006d0:	223b      	movs	r2, #59	; 0x3b
 80006d2:	2166      	movs	r1, #102	; 0x66
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f823 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x67, 0x01);
 80006da:	2201      	movs	r2, #1
 80006dc:	2167      	movs	r1, #103	; 0x67
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f000 f81e 	bl	8000720 <genclk_i2c_write>
	
	/* Enable OUT1-4 */
	clockg->outputs_en[0] = 1;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	clockg->outputs_en[1] = 1;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2201      	movs	r2, #1
 80006f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	clockg->outputs_en[2] = 1;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	clockg->outputs_en[3] = 1;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	clockg->outputs_en[4] = 1;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2201      	movs	r2, #1
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	genclk_outEn(clockg, clockg->outputs_en);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3321      	adds	r3, #33	; 0x21
 8000710:	4619      	mov	r1, r3
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 f824 	bl	8000760 <genclk_outEn>
	
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <genclk_i2c_write>:

uint8_t genclk_i2c_write(genclk_st *clockg,
						uint16_t mem_addr,
						uint8_t data){
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af02      	add	r7, sp, #8
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	807b      	strh	r3, [r7, #2]
 800072c:	4613      	mov	r3, r2
 800072e:	707b      	strb	r3, [r7, #1]
							
	uint8_t dataBuf[1] = {data};
 8000730:	787b      	ldrb	r3, [r7, #1]
 8000732:	733b      	strb	r3, [r7, #12]
	
	if(HAL_I2C_Mem_Write_IT(clockg->i2cHandle, (uint16_t)DEV_ADDR,
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	887a      	ldrh	r2, [r7, #2]
 800073a:	2301      	movs	r3, #1
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	216a      	movs	r1, #106	; 0x6a
 8000748:	f003 fa8e 	bl	8003c68 <HAL_I2C_Mem_Write_IT>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d101      	bne.n	8000756 <genclk_i2c_write+0x36>
							mem_addr, (uint16_t)I2C_MEMADD_SIZE_8BIT,
							dataBuf, 1) == HAL_OK)
		return 1;
 8000752:	2301      	movs	r3, #1
 8000754:	e000      	b.n	8000758 <genclk_i2c_write+0x38>
	else
		return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <genclk_outEn>:
		return 1;
	else
		return 0;
}

void genclk_outEn(genclk_st *clockg, uint8_t *out_list){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	uint8_t i, OEbits;
	/* Create register byte data to enable/disable outputs */
	for(i=0;i<5;i++){
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e013      	b.n	8000798 <genclk_outEn+0x38>
		if(*out_list == 0){
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d109      	bne.n	800078c <genclk_outEn+0x2c>
			OEbits |= (0x80 >> i);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	fa42 f303 	asr.w	r3, r2, r3
 8000780:	b25a      	sxtb	r2, r3
 8000782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000786:	4313      	orrs	r3, r2
 8000788:	b25b      	sxtb	r3, r3
 800078a:	73bb      	strb	r3, [r7, #14]
		}
		else{
			OEbits |= (0x00 >> i);
		}
		out_list++;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	603b      	str	r3, [r7, #0]
	for(i=0;i<5;i++){
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	3301      	adds	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2b04      	cmp	r3, #4
 800079c:	d9e8      	bls.n	8000770 <genclk_outEn+0x10>
	}
	/* Set clk0 slew rate to normal and output voltage to 3.3v */
	OEbits |= 0b00000111;
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	f043 0307 	orr.w	r3, r3, #7
 80007a4:	73bb      	strb	r3, [r7, #14]
	/* Write register */
	genclk_i2c_write(clockg, 0x68, OEbits);	
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	461a      	mov	r2, r3
 80007aa:	2168      	movs	r1, #104	; 0x68
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ffb7 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, 0x69, 0xfc);
 80007b2:	22fc      	movs	r2, #252	; 0xfc
 80007b4:	2169      	movs	r1, #105	; 0x69
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ffb2 	bl	8000720 <genclk_i2c_write>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	0000      	movs	r0, r0
	...

080007c8 <genclk_fod_settings>:

uint8_t genclk_fod_settings(genclk_st *clockg, uint8_t out_n, uint8_t freq_mhz){
 80007c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80007cc:	b088      	sub	sp, #32
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	460b      	mov	r3, r1
 80007d4:	70fb      	strb	r3, [r7, #3]
 80007d6:	4613      	mov	r3, r2
 80007d8:	70bb      	strb	r3, [r7, #2]
	uint64_t div_h;
	uint8_t reg_int_lsb, reg_int_msb;
	uint8_t reg_frac_1, reg_frac_2, reg_frac_3, reg_frac_4;
	
	/* N = INT(N) + FRAC(N) = FVCO / (Fout * 2) */
	n_int = 2600 / (freq_mhz << 1);
 80007da:	78bb      	ldrb	r3, [r7, #2]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	f640 2228 	movw	r2, #2600	; 0xa28
 80007e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80007e6:	82bb      	strh	r3, [r7, #20]
	/* Rounding up to nearest integer algorithm */
	div_h = ((2600 * 10000000ULL) + (freq_mhz << 1) - 1) / (freq_mhz << 1);
 80007e8:	78bb      	ldrb	r3, [r7, #2]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	461a      	mov	r2, r3
 80007ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80007f2:	a170      	add	r1, pc, #448	; (adr r1, 80009b4 <genclk_fod_settings+0x1ec>)
 80007f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007f8:	eb12 0800 	adds.w	r8, r2, r0
 80007fc:	eb43 0901 	adc.w	r9, r3, r1
 8000800:	78bb      	ldrb	r3, [r7, #2]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	461a      	mov	r2, r3
 8000806:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800080a:	4640      	mov	r0, r8
 800080c:	4649      	mov	r1, r9
 800080e:	f7ff fd07 	bl	8000220 <__aeabi_uldivmod>
 8000812:	4602      	mov	r2, r0
 8000814:	460b      	mov	r3, r1
 8000816:	e9c7 2302 	strd	r2, r3, [r7, #8]
	div_h -= ((uint64_t)n_int * 10000000ULL);
 800081a:	8aba      	ldrh	r2, [r7, #20]
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	4961      	ldr	r1, [pc, #388]	; (80009a8 <genclk_fod_settings+0x1e0>)
 8000822:	fb01 f003 	mul.w	r0, r1, r3
 8000826:	2100      	movs	r1, #0
 8000828:	fb01 f102 	mul.w	r1, r1, r2
 800082c:	4401      	add	r1, r0
 800082e:	485e      	ldr	r0, [pc, #376]	; (80009a8 <genclk_fod_settings+0x1e0>)
 8000830:	fba2 2300 	umull	r2, r3, r2, r0
 8000834:	4419      	add	r1, r3
 8000836:	460b      	mov	r3, r1
 8000838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800083c:	1a84      	subs	r4, r0, r2
 800083e:	eb61 0503 	sbc.w	r5, r1, r3
 8000842:	e9c7 4502 	strd	r4, r5, [r7, #8]
	/* n_frac = 2^24 * FRAC(N) */
	div_h <<= 24;
 8000846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800084a:	f04f 0200 	mov.w	r2, #0
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	060b      	lsls	r3, r1, #24
 8000854:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8000858:	0602      	lsls	r2, r0, #24
 800085a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	div_h /= 10000000ULL;
 800085e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000862:	4a51      	ldr	r2, [pc, #324]	; (80009a8 <genclk_fod_settings+0x1e0>)
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	f7ff fcda 	bl	8000220 <__aeabi_uldivmod>
 800086c:	4602      	mov	r2, r0
 800086e:	460b      	mov	r3, r1
 8000870:	e9c7 2302 	strd	r2, r3, [r7, #8]
	n_frac = (uint32_t)div_h;
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	61fb      	str	r3, [r7, #28]
	
	switch(out_n){
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	3b01      	subs	r3, #1
 800087c:	2b03      	cmp	r3, #3
 800087e:	d847      	bhi.n	8000910 <genclk_fod_settings+0x148>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <genclk_fod_settings+0xc0>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	08000899 	.word	0x08000899
 800088c:	080008b3 	.word	0x080008b3
 8000890:	080008d5 	.word	0x080008d5
 8000894:	080008f7 	.word	0x080008f7
		case 1:
			reg_int_lsb = 0x2E;
 8000898:	232e      	movs	r3, #46	; 0x2e
 800089a:	76fb      	strb	r3, [r7, #27]
			reg_int_msb = 0x2D;
 800089c:	232d      	movs	r3, #45	; 0x2d
 800089e:	76bb      	strb	r3, [r7, #26]
			reg_frac_1 = 0x25;
 80008a0:	2325      	movs	r3, #37	; 0x25
 80008a2:	767b      	strb	r3, [r7, #25]
			reg_frac_2 = 0x24;
 80008a4:	2324      	movs	r3, #36	; 0x24
 80008a6:	763b      	strb	r3, [r7, #24]
			reg_frac_3 = 0x23;
 80008a8:	2323      	movs	r3, #35	; 0x23
 80008aa:	75fb      	strb	r3, [r7, #23]
			reg_frac_4 = 0x22;
 80008ac:	2322      	movs	r3, #34	; 0x22
 80008ae:	75bb      	strb	r3, [r7, #22]
			break;
 80008b0:	e030      	b.n	8000914 <genclk_fod_settings+0x14c>
		case 2:
			reg_int_lsb = 0x3E;
 80008b2:	233e      	movs	r3, #62	; 0x3e
 80008b4:	76fb      	strb	r3, [r7, #27]
			reg_int_msb = 0x3D;
 80008b6:	233d      	movs	r3, #61	; 0x3d
 80008b8:	76bb      	strb	r3, [r7, #26]
			reg_frac_1 = 0x35;
 80008ba:	2335      	movs	r3, #53	; 0x35
 80008bc:	767b      	strb	r3, [r7, #25]
			reg_frac_2 = 0x34;
 80008be:	2334      	movs	r3, #52	; 0x34
 80008c0:	763b      	strb	r3, [r7, #24]
			reg_frac_3 = 0x33;
 80008c2:	2333      	movs	r3, #51	; 0x33
 80008c4:	75fb      	strb	r3, [r7, #23]
			reg_frac_4 = 0x32;
 80008c6:	2332      	movs	r3, #50	; 0x32
 80008c8:	75bb      	strb	r3, [r7, #22]
			n_frac += 8054000;
 80008ca:	69fa      	ldr	r2, [r7, #28]
 80008cc:	4b37      	ldr	r3, [pc, #220]	; (80009ac <genclk_fod_settings+0x1e4>)
 80008ce:	4413      	add	r3, r2
 80008d0:	61fb      	str	r3, [r7, #28]
			break;
 80008d2:	e01f      	b.n	8000914 <genclk_fod_settings+0x14c>
		case 3:
			reg_int_lsb = 0x4E;
 80008d4:	234e      	movs	r3, #78	; 0x4e
 80008d6:	76fb      	strb	r3, [r7, #27]
			reg_int_msb = 0x4D;
 80008d8:	234d      	movs	r3, #77	; 0x4d
 80008da:	76bb      	strb	r3, [r7, #26]
			reg_frac_1 = 0x45;
 80008dc:	2345      	movs	r3, #69	; 0x45
 80008de:	767b      	strb	r3, [r7, #25]
			reg_frac_2 = 0x44;
 80008e0:	2344      	movs	r3, #68	; 0x44
 80008e2:	763b      	strb	r3, [r7, #24]
			reg_frac_3 = 0x43;
 80008e4:	2343      	movs	r3, #67	; 0x43
 80008e6:	75fb      	strb	r3, [r7, #23]
			reg_frac_4 = 0x42;
 80008e8:	2342      	movs	r3, #66	; 0x42
 80008ea:	75bb      	strb	r3, [r7, #22]
			n_frac += 5500000;
 80008ec:	69fa      	ldr	r2, [r7, #28]
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <genclk_fod_settings+0x1e8>)
 80008f0:	4413      	add	r3, r2
 80008f2:	61fb      	str	r3, [r7, #28]
			break;
 80008f4:	e00e      	b.n	8000914 <genclk_fod_settings+0x14c>
		case 4:
			reg_int_lsb = 0x5E;
 80008f6:	235e      	movs	r3, #94	; 0x5e
 80008f8:	76fb      	strb	r3, [r7, #27]
			reg_int_msb = 0x5D;
 80008fa:	235d      	movs	r3, #93	; 0x5d
 80008fc:	76bb      	strb	r3, [r7, #26]
			reg_frac_1 = 0x55;
 80008fe:	2355      	movs	r3, #85	; 0x55
 8000900:	767b      	strb	r3, [r7, #25]
			reg_frac_2 = 0x54;
 8000902:	2354      	movs	r3, #84	; 0x54
 8000904:	763b      	strb	r3, [r7, #24]
			reg_frac_3 = 0x53;
 8000906:	2353      	movs	r3, #83	; 0x53
 8000908:	75fb      	strb	r3, [r7, #23]
			reg_frac_4 = 0x52;
 800090a:	2352      	movs	r3, #82	; 0x52
 800090c:	75bb      	strb	r3, [r7, #22]
			break;
 800090e:	e001      	b.n	8000914 <genclk_fod_settings+0x14c>
		default:
			return 0;		
 8000910:	2300      	movs	r3, #0
 8000912:	e042      	b.n	800099a <genclk_fod_settings+0x1d2>
	}
	
	/* Write output divider integer part for output n */
	genclk_i2c_write(clockg, reg_int_lsb, n_int << 4);	/* Store 4 LSB */
 8000914:	7efb      	ldrb	r3, [r7, #27]
 8000916:	b299      	uxth	r1, r3
 8000918:	8abb      	ldrh	r3, [r7, #20]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff fefc 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, reg_int_msb, n_int >> 4);	/* Store 8 MSB */
 8000928:	7ebb      	ldrb	r3, [r7, #26]
 800092a:	b299      	uxth	r1, r3
 800092c:	8abb      	ldrh	r3, [r7, #20]
 800092e:	091b      	lsrs	r3, r3, #4
 8000930:	b29b      	uxth	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fef2 	bl	8000720 <genclk_i2c_write>
	
	/* Write output divider fractional part for output n */
	genclk_i2c_write(clockg, reg_frac_1, (n_frac << 2) & 0xFC);	/* Store 6 LSB */
 800093c:	7e7b      	ldrb	r3, [r7, #25]
 800093e:	b299      	uxth	r1, r3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	461a      	mov	r2, r3
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fee8 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, reg_frac_2, n_frac >> 6);
 8000950:	7e3b      	ldrb	r3, [r7, #24]
 8000952:	b299      	uxth	r1, r3
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	099b      	lsrs	r3, r3, #6
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fedf 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, reg_frac_3, n_frac >> 14);
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	b299      	uxth	r1, r3
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	0b9b      	lsrs	r3, r3, #14
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fed6 	bl	8000720 <genclk_i2c_write>
	genclk_i2c_write(clockg, reg_frac_4, (n_frac >> 22) & 0x7F);	/* Store 8 MSB */
 8000974:	7dbb      	ldrb	r3, [r7, #22]
 8000976:	b299      	uxth	r1, r3
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	0d9b      	lsrs	r3, r3, #22
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff feca 	bl	8000720 <genclk_i2c_write>
	
	clockg->clocks[out_n - 1] = freq_mhz;
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	3b01      	subs	r3, #1
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	4413      	add	r3, r2
 8000994:	78ba      	ldrb	r2, [r7, #2]
 8000996:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8000998:	2301      	movs	r3, #1
}
 800099a:	4618      	mov	r0, r3
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80009a4:	f3af 8000 	nop.w
 80009a8:	00989680 	.word	0x00989680
 80009ac:	007ae4f0 	.word	0x007ae4f0
 80009b0:	0053ec60 	.word	0x0053ec60
 80009b4:	0db883ff 	.word	0x0db883ff
 80009b8:	00000006 	.word	0x00000006

080009bc <max2837_init>:
					SPI_HandleTypeDef *spiHandle,
					GPIO_TypeDef *CS_bank,
					uint16_t CS_pin,
					GPIO_TypeDef *EN_bank,
					uint16_t EN_pin,
					uint16_t RxEN_pin){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	807b      	strh	r3, [r7, #2]
						
	/* Store SPI params. */
	transceiver->spiHandle = spiHandle;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	601a      	str	r2, [r3, #0]
	transceiver->CS_bank = CS_bank;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	605a      	str	r2, [r3, #4]
	transceiver->CS_pin = CS_pin;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	887a      	ldrh	r2, [r7, #2]
 80009da:	811a      	strh	r2, [r3, #8]
	/* Store GPIO definitions. */
	transceiver->EN_bank = EN_bank;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	6a3a      	ldr	r2, [r7, #32]
 80009e0:	611a      	str	r2, [r3, #16]
	transceiver->EN_pin = EN_pin;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80009e6:	829a      	strh	r2, [r3, #20]
	transceiver->RxEN_pin = RxEN_pin;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80009ec:	82da      	strh	r2, [r3, #22]
	/* Load default registers' values. */
	uint8_t i = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	75fb      	strb	r3, [r7, #23]
	for(i=0;i<MAX2837_NUM_REGS;i++){
 80009f2:	2300      	movs	r3, #0
 80009f4:	75fb      	strb	r3, [r7, #23]
 80009f6:	e00f      	b.n	8000a18 <max2837_init+0x5c>
		max2837_write_reg(transceiver, max2837_regs_address[i], max2837_regs_default[i], 0, 0);
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <max2837_init+0xf4>)
 80009fc:	5cd1      	ldrb	r1, [r2, r3]
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
 8000a00:	4a2c      	ldr	r2, [pc, #176]	; (8000ab4 <max2837_init+0xf8>)
 8000a02:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a06:	2300      	movs	r3, #0
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f000 f853 	bl	8000ab8 <max2837_write_reg>
	for(i=0;i<MAX2837_NUM_REGS;i++){
 8000a12:	7dfb      	ldrb	r3, [r7, #23]
 8000a14:	3301      	adds	r3, #1
 8000a16:	75fb      	strb	r3, [r7, #23]
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	2b1f      	cmp	r3, #31
 8000a1c:	d9ec      	bls.n	80009f8 <max2837_init+0x3c>
	}
	/* Enable RX quadrature generation, mixer and LNA */
	max2837_write_reg(transceiver, RXRF_1, 0b111, 3, 0);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2303      	movs	r3, #3
 8000a24:	2207      	movs	r2, #7
 8000a26:	2100      	movs	r1, #0
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 f845 	bl	8000ab8 <max2837_write_reg>
	/* Enable SPI control of LNA and VGA */
	max2837_write_reg(transceiver, RX_TOP_SPI_2, 0b11, 2, 0);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2302      	movs	r3, #2
 8000a34:	2203      	movs	r2, #3
 8000a36:	2108      	movs	r1, #8
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f000 f83d 	bl	8000ab8 <max2837_write_reg>
	/* Enable lowpass filter */
	max2837_write_reg(transceiver, LPF_1, 1, 1, 0);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2201      	movs	r2, #1
 8000a46:	2102      	movs	r1, #2
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f000 f835 	bl	8000ab8 <max2837_write_reg>
	/* Enable RX VGA and output MUX */
	max2837_write_reg(transceiver, VGA_1, 0b11, 2, 4);
 8000a4e:	2304      	movs	r3, #4
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2302      	movs	r3, #2
 8000a54:	2203      	movs	r2, #3
 8000a56:	2104      	movs	r1, #4
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f000 f82d 	bl	8000ab8 <max2837_write_reg>
	/* Enable RSSI */
	max2837_write_reg(transceiver, RX_TOP_SPI_1, 0b101, 3, 6);
 8000a5e:	2306      	movs	r3, #6
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2303      	movs	r3, #3
 8000a64:	2205      	movs	r2, #5
 8000a66:	2106      	movs	r1, #6
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f000 f825 	bl	8000ab8 <max2837_write_reg>
	/* Set RXVGA HPFSM to operating mode #1 */
	max2837_write_reg(transceiver, HPFSM_3, 0, 1, 8);
 8000a6e:	2308      	movs	r3, #8
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2301      	movs	r3, #1
 8000a74:	2200      	movs	r2, #0
 8000a76:	210e      	movs	r1, #14
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 f81d 	bl	8000ab8 <max2837_write_reg>
	/* Set R divider to 2 */
	/*
	Modificar divisor R y ponerlo en 1
	si hay mucho ruido de fase.
	*/
	max2837_write_reg(transceiver, SYNTH_CFG_1, 0b01, 2, 1);
 8000a7e:	2301      	movs	r3, #1
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2302      	movs	r3, #2
 8000a84:	2201      	movs	r2, #1
 8000a86:	2114      	movs	r1, #20
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f000 f815 	bl	8000ab8 <max2837_write_reg>
	/* Disable CLKOUT pin (not used) */
	max2837_write_reg(transceiver, XTAL_CFG, 0, 1, 7);
 8000a8e:	2307      	movs	r3, #7
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2301      	movs	r3, #1
 8000a94:	2200      	movs	r2, #0
 8000a96:	2118      	movs	r1, #24
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f000 f80d 	bl	8000ab8 <max2837_write_reg>
	max2837_set_mode(transceiver, MAX2837_MODE_SHUTDOWN);
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f000 f8e8 	bl	8000c76 <max2837_set_mode>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	0800c6e4 	.word	0x0800c6e4
 8000ab4:	0800c6a4 	.word	0x0800c6a4

08000ab8 <max2837_write_reg>:

void max2837_write_reg(max2837_st *transceiver,	uint8_t addr, uint16_t data, uint8_t mask, uint8_t offset){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	70fb      	strb	r3, [r7, #3]
 8000aca:	460b      	mov	r3, r1
 8000acc:	803b      	strh	r3, [r7, #0]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	70bb      	strb	r3, [r7, #2]
	the 10 data bits.
	*/
	uint8_t txDataBuf[2];
	uint16_t bit_masko;
	
	if(mask < 16){
 8000ad2:	78bb      	ldrb	r3, [r7, #2]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d812      	bhi.n	8000afe <max2837_write_reg+0x46>
		bit_masko = bit_mask(16, mask, offset);
 8000ad8:	7e3a      	ldrb	r2, [r7, #24]
 8000ada:	78bb      	ldrb	r3, [r7, #2]
 8000adc:	4619      	mov	r1, r3
 8000ade:	2010      	movs	r0, #16
 8000ae0:	f000 fe74 	bl	80017cc <bit_mask>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	81fb      	strh	r3, [r7, #14]
		data = (transceiver->regs_values[addr] & bit_masko) | data;
 8000ae8:	78fa      	ldrb	r2, [r7, #3]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	320c      	adds	r2, #12
 8000aee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000af2:	89fb      	ldrh	r3, [r7, #14]
 8000af4:	4013      	ands	r3, r2
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	883b      	ldrh	r3, [r7, #0]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	803b      	strh	r3, [r7, #0]
	}
	
	txDataBuf[0] = (((addr & 0x1f) << 2) | 0x80) | (data >> 8);
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	883b      	ldrh	r3, [r7, #0]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	733b      	strb	r3, [r7, #12]
	txDataBuf[1] = (uint8_t)data;
 8000b20:	883b      	ldrh	r3, [r7, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	737b      	strb	r3, [r7, #13]
	transceiver->current_addr = addr;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	78fa      	ldrb	r2, [r7, #3]
 8000b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	transceiver->txData_temp = data;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	883a      	ldrh	r2, [r7, #0]
 8000b32:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	spi_enable(transceiver->CS_bank, transceiver->CS_pin);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	891b      	ldrh	r3, [r3, #8]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4610      	mov	r0, r2
 8000b42:	f000 fe23 	bl	800178c <spi_enable>
	if((HAL_SPI_Transmit_IT(transceiver->spiHandle, txDataBuf, sizeof(txDataBuf))) == HAL_OK){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f107 010c 	add.w	r1, r7, #12
 8000b4e:	2202      	movs	r2, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f006 ffa7 	bl	8007aa4 <HAL_SPI_Transmit_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d104      	bne.n	8000b66 <max2837_write_reg+0xae>
		transceiver->transceiver_write_flg = 1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		transceiver->transceiver_write_flg = 0;
		spi_disable(transceiver->CS_bank, transceiver->CS_pin);
		//lcd_clear();
		//lcd_send_string("Trv_w_err SPI Tx");
	}
}
 8000b64:	e00b      	b.n	8000b7e <max2837_write_reg+0xc6>
		transceiver->transceiver_write_flg = 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		spi_disable(transceiver->CS_bank, transceiver->CS_pin);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	891b      	ldrh	r3, [r3, #8]
 8000b76:	4619      	mov	r1, r3
 8000b78:	4610      	mov	r0, r2
 8000b7a:	f000 fe17 	bl	80017ac <spi_disable>
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <max2837_read_reg>:
					
void max2837_read_reg(max2837_st *transceiver, uint8_t addr){
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	70fb      	strb	r3, [r7, #3]
	/*
	Send R/W bit set low and address, then
	receive the 10 data bits stored
	in the specified register.
	*/
	uint8_t txDataBuf[3] = {((addr & 0x1f) << 2), 0x00, 0x00};
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	733b      	strb	r3, [r7, #12]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	737b      	strb	r3, [r7, #13]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73bb      	strb	r3, [r7, #14]
	transceiver->current_addr = addr;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	78fa      	ldrb	r2, [r7, #3]
 8000bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	spi_enable(transceiver->CS_bank, transceiver->CS_pin);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	891b      	ldrh	r3, [r3, #8]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4610      	mov	r0, r2
 8000bbc:	f000 fde6 	bl	800178c <spi_enable>
	if((HAL_SPI_TransmitReceive_IT(transceiver->spiHandle, txDataBuf, transceiver->rxDataBuf, sizeof(txDataBuf))) == HAL_OK){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f103 020a 	add.w	r2, r3, #10
 8000bca:	f107 010c 	add.w	r1, r7, #12
 8000bce:	2303      	movs	r3, #3
 8000bd0:	f007 f8a6 	bl	8007d20 <HAL_SPI_TransmitReceive_IT>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d104      	bne.n	8000be4 <max2837_read_reg+0x5e>
		transceiver->transceiver_read_flg = 1;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		transceiver->transceiver_read_flg = 0;
		spi_disable(transceiver->CS_bank, transceiver->CS_pin);
		//lcd_clear();
		//lcd_send_string("Trv_r_err SPI Tx");
	}
}
 8000be2:	e00b      	b.n	8000bfc <max2837_read_reg+0x76>
		transceiver->transceiver_read_flg = 0;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		spi_disable(transceiver->CS_bank, transceiver->CS_pin);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	891b      	ldrh	r3, [r3, #8]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	f000 fdd8 	bl	80017ac <spi_disable>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <max2837_get_temp>:

uint8_t max2837_get_temp(max2837_st *transceiver){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	6078      	str	r0, [r7, #4]
	uint8_t temperature;
	/* Enable temperature sensor */
	max2837_write_reg(transceiver, RX_TOP_SPI_3, 1, 1, 1);
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2301      	movs	r3, #1
 8000c12:	2201      	movs	r2, #1
 8000c14:	2109      	movs	r1, #9
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ff4e 	bl	8000ab8 <max2837_write_reg>
	/* Trigger temperature sensor ADC */
	max2837_write_reg(transceiver, RX_TOP_SPI_3, 1, 1, 0);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2301      	movs	r3, #1
 8000c22:	2201      	movs	r2, #1
 8000c24:	2109      	movs	r1, #9
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff46 	bl	8000ab8 <max2837_write_reg>
	/* Wait for conversion */
	HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 feff 	bl	8002a30 <HAL_Delay>
	/* Read 5 bit value */
	max2837_read_reg(transceiver, TEMP_SENSOR);//, (uint16_t) *temperature);
 8000c32:	2107      	movs	r1, #7
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffa6 	bl	8000b86 <max2837_read_reg>
	/* Convert to celsius */
	if(temperature > 8){
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d905      	bls.n	8000c4c <max2837_get_temp+0x48>
		temperature -= 9;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	3b09      	subs	r3, #9
 8000c44:	73fb      	strb	r3, [r7, #15]
		temperature *= 4;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	73fb      	strb	r3, [r7, #15]
	}
	/* Turn off ADC and temperature sensor */
	max2837_write_reg(transceiver, RX_TOP_SPI_3, 0, 1, 1);
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2301      	movs	r3, #1
 8000c52:	2200      	movs	r2, #0
 8000c54:	2109      	movs	r1, #9
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ff2e 	bl	8000ab8 <max2837_write_reg>
	max2837_write_reg(transceiver, RX_TOP_SPI_3, 0, 1, 0);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	2200      	movs	r2, #0
 8000c64:	2109      	movs	r1, #9
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff26 	bl	8000ab8 <max2837_write_reg>
	
	return temperature;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <max2837_set_mode>:

void max2837_set_mode(max2837_st *transceiver, max2837_mode mode){
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af02      	add	r7, sp, #8
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	70fb      	strb	r3, [r7, #3]
	transceiver->current_mode = mode;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	78fa      	ldrb	r2, [r7, #3]
 8000c86:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	switch(mode){
 8000c8a:	78fb      	ldrb	r3, [r7, #3]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d030      	beq.n	8000cf2 <max2837_set_mode+0x7c>
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	dc3f      	bgt.n	8000d14 <max2837_set_mode+0x9e>
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <max2837_set_mode+0x28>
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d011      	beq.n	8000cc0 <max2837_set_mode+0x4a>
		case MAX2837_MODE_RX:
			HAL_GPIO_WritePin(transceiver->EN_bank, transceiver->EN_pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(transceiver->EN_bank, transceiver->RxEN_pin, GPIO_PIN_SET);
			break;
	}
}
 8000c9c:	e03a      	b.n	8000d14 <max2837_set_mode+0x9e>
			HAL_GPIO_WritePin(transceiver->EN_bank, transceiver->EN_pin, GPIO_PIN_RESET);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6918      	ldr	r0, [r3, #16]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	8a9b      	ldrh	r3, [r3, #20]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f002 ff33 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(transceiver->EN_bank, transceiver->RxEN_pin, GPIO_PIN_RESET);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6918      	ldr	r0, [r3, #16]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	8adb      	ldrh	r3, [r3, #22]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f002 ff2b 	bl	8003b14 <HAL_GPIO_WritePin>
			break;
 8000cbe:	e029      	b.n	8000d14 <max2837_set_mode+0x9e>
			max2837_write_reg(transceiver, SPI_ENABLE_CTRL, 1, 1, 0);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2110      	movs	r1, #16
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fef4 	bl	8000ab8 <max2837_write_reg>
			HAL_GPIO_WritePin(transceiver->EN_bank, transceiver->EN_pin, GPIO_PIN_SET);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6918      	ldr	r0, [r3, #16]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	8a9b      	ldrh	r3, [r3, #20]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f002 ff1a 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(transceiver->EN_bank, transceiver->RxEN_pin, GPIO_PIN_RESET);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6918      	ldr	r0, [r3, #16]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	8adb      	ldrh	r3, [r3, #22]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4619      	mov	r1, r3
 8000cec:	f002 ff12 	bl	8003b14 <HAL_GPIO_WritePin>
			break;
 8000cf0:	e010      	b.n	8000d14 <max2837_set_mode+0x9e>
			HAL_GPIO_WritePin(transceiver->EN_bank, transceiver->EN_pin, GPIO_PIN_SET);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6918      	ldr	r0, [r3, #16]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	8a9b      	ldrh	r3, [r3, #20]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f002 ff09 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(transceiver->EN_bank, transceiver->RxEN_pin, GPIO_PIN_SET);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6918      	ldr	r0, [r3, #16]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	8adb      	ldrh	r3, [r3, #22]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f002 ff01 	bl	8003b14 <HAL_GPIO_WritePin>
			break;
 8000d12:	bf00      	nop
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <max2837_set_freq>:

void max2837_set_freq(max2837_st *transceiver, uint32_t lo_freq_hz){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	uint16_t div_int;
	uint32_t div_frac;
	uint32_t div_rem;
	uint32_t div_cmp;
	uint8_t i = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	72fb      	strb	r3, [r7, #11]
	
	/*
	Modificar divisor R y ponerlo en 1
	si hay mucho ruido de fase.
	*/
	div_int = (uint16_t) lo_freq_hz / 15000000ULL;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b298      	uxth	r0, r3
 8000d30:	f04f 0100 	mov.w	r1, #0
 8000d34:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <max2837_set_freq+0xc8>)
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	f7ff fa71 	bl	8000220 <__aeabi_uldivmod>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	4613      	mov	r3, r2
 8000d44:	813b      	strh	r3, [r7, #8]
	div_rem = lo_freq_hz % 15000000ULL;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	099a      	lsrs	r2, r3, #6
 8000d4a:	4927      	ldr	r1, [pc, #156]	; (8000de8 <max2837_set_freq+0xcc>)
 8000d4c:	fba1 1202 	umull	r1, r2, r1, r2
 8000d50:	0ad2      	lsrs	r2, r2, #11
 8000d52:	4924      	ldr	r1, [pc, #144]	; (8000de4 <max2837_set_freq+0xc8>)
 8000d54:	fb01 f202 	mul.w	r2, r1, r2
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
	div_frac = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
	div_cmp = 15000000ULL;
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <max2837_set_freq+0xc8>)
 8000d62:	60fb      	str	r3, [r7, #12]
	for( i = 0; i < 20; i++) {
 8000d64:	2300      	movs	r3, #0
 8000d66:	72fb      	strb	r3, [r7, #11]
 8000d68:	e014      	b.n	8000d94 <max2837_set_freq+0x78>
		div_frac <<= 1;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
		div_cmp >>= 1;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	085b      	lsrs	r3, r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
		if (div_rem > div_cmp) {
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d907      	bls.n	8000d8e <max2837_set_freq+0x72>
			div_frac |= 0x1;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
			div_rem -= div_cmp;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	613b      	str	r3, [r7, #16]
	for( i = 0; i < 20; i++) {
 8000d8e:	7afb      	ldrb	r3, [r7, #11]
 8000d90:	3301      	adds	r3, #1
 8000d92:	72fb      	strb	r3, [r7, #11]
 8000d94:	7afb      	ldrb	r3, [r7, #11]
 8000d96:	2b13      	cmp	r3, #19
 8000d98:	d9e7      	bls.n	8000d6a <max2837_set_freq+0x4e>
		}
	}
	
	/* Store N integer divider ratio */
	max2837_write_reg(transceiver, SYNTH_INT_DIV, div_int, 8, 0);
 8000d9a:	893a      	ldrh	r2, [r7, #8]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2308      	movs	r3, #8
 8000da2:	2113      	movs	r1, #19
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fe87 	bl	8000ab8 <max2837_write_reg>
	/* Store MSB of fractional divider ratio */
	max2837_write_reg(transceiver, SYNTH_FRAC_DIV_MSB, (div_frac >> 10) & 0x3ff, 16, 0);
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	0a9b      	lsrs	r3, r3, #10
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	2300      	movs	r3, #0
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2310      	movs	r3, #16
 8000dbc:	2111      	movs	r1, #17
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fe7a 	bl	8000ab8 <max2837_write_reg>
	/* Store LSB of fractional divider ratio */
	max2837_write_reg(transceiver, SYNTH_FRAC_DIV_LSB, div_frac & 0x3ff, 16, 0);
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2310      	movs	r3, #16
 8000dd4:	2112      	movs	r1, #18
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fe6e 	bl	8000ab8 <max2837_write_reg>
	
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	00e4e1c0 	.word	0x00e4e1c0
 8000de8:	023ca98d 	.word	0x023ca98d

08000dec <max2837_set_lna_gain>:

uint8_t max2837_set_lna_gain(max2837_st *transceiver, uint8_t gain_db){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
	switch(gain_db){
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	2b28      	cmp	r3, #40	; 0x28
 8000dfc:	d866      	bhi.n	8000ecc <max2837_set_lna_gain+0xe0>
 8000dfe:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <max2837_set_lna_gain+0x18>)
 8000e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e04:	08000ec7 	.word	0x08000ec7
 8000e08:	08000ecd 	.word	0x08000ecd
 8000e0c:	08000ecd 	.word	0x08000ecd
 8000e10:	08000ecd 	.word	0x08000ecd
 8000e14:	08000ecd 	.word	0x08000ecd
 8000e18:	08000ecd 	.word	0x08000ecd
 8000e1c:	08000ecd 	.word	0x08000ecd
 8000e20:	08000ecd 	.word	0x08000ecd
 8000e24:	08000ec1 	.word	0x08000ec1
 8000e28:	08000ecd 	.word	0x08000ecd
 8000e2c:	08000ecd 	.word	0x08000ecd
 8000e30:	08000ecd 	.word	0x08000ecd
 8000e34:	08000ecd 	.word	0x08000ecd
 8000e38:	08000ecd 	.word	0x08000ecd
 8000e3c:	08000ecd 	.word	0x08000ecd
 8000e40:	08000ecd 	.word	0x08000ecd
 8000e44:	08000ebb 	.word	0x08000ebb
 8000e48:	08000ecd 	.word	0x08000ecd
 8000e4c:	08000ecd 	.word	0x08000ecd
 8000e50:	08000ecd 	.word	0x08000ecd
 8000e54:	08000ecd 	.word	0x08000ecd
 8000e58:	08000ecd 	.word	0x08000ecd
 8000e5c:	08000ecd 	.word	0x08000ecd
 8000e60:	08000ecd 	.word	0x08000ecd
 8000e64:	08000eb5 	.word	0x08000eb5
 8000e68:	08000ecd 	.word	0x08000ecd
 8000e6c:	08000ecd 	.word	0x08000ecd
 8000e70:	08000ecd 	.word	0x08000ecd
 8000e74:	08000ecd 	.word	0x08000ecd
 8000e78:	08000ecd 	.word	0x08000ecd
 8000e7c:	08000ecd 	.word	0x08000ecd
 8000e80:	08000ecd 	.word	0x08000ecd
 8000e84:	08000eaf 	.word	0x08000eaf
 8000e88:	08000ecd 	.word	0x08000ecd
 8000e8c:	08000ecd 	.word	0x08000ecd
 8000e90:	08000ecd 	.word	0x08000ecd
 8000e94:	08000ecd 	.word	0x08000ecd
 8000e98:	08000ecd 	.word	0x08000ecd
 8000e9c:	08000ecd 	.word	0x08000ecd
 8000ea0:	08000ecd 	.word	0x08000ecd
 8000ea4:	08000ea9 	.word	0x08000ea9
		case 40:
			gain_db = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	70fb      	strb	r3, [r7, #3]
			break;
 8000eac:	e012      	b.n	8000ed4 <max2837_set_lna_gain+0xe8>
		case 32:
			gain_db = 0x04;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	70fb      	strb	r3, [r7, #3]
			break;
 8000eb2:	e00f      	b.n	8000ed4 <max2837_set_lna_gain+0xe8>
		case 24:
			gain_db = 0x02;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	70fb      	strb	r3, [r7, #3]
			break;
 8000eb8:	e00c      	b.n	8000ed4 <max2837_set_lna_gain+0xe8>
		case 16:
			gain_db = 0x06;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	70fb      	strb	r3, [r7, #3]
			break;
 8000ebe:	e009      	b.n	8000ed4 <max2837_set_lna_gain+0xe8>
		case 8:
			gain_db = 0x03;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	70fb      	strb	r3, [r7, #3]
			break;
 8000ec4:	e006      	b.n	8000ed4 <max2837_set_lna_gain+0xe8>
		case 0:
			gain_db = 0x07;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	70fb      	strb	r3, [r7, #3]
			break;
 8000eca:	e003      	b.n	8000ed4 <max2837_set_lna_gain+0xe8>
		default:
			gain_db = 0x07;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	70fb      	strb	r3, [r7, #3]
			return 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e00b      	b.n	8000eec <max2837_set_lna_gain+0x100>
	}
	max2837_write_reg(transceiver, RXRF_2, (gain_db << 2), 3, 2);
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	2302      	movs	r3, #2
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fde7 	bl	8000ab8 <max2837_write_reg>
	return 1;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <max2837_set_lpf_bw>:
	BW20_MHZ,	/* 20 MHz */
	BW24_MHZ,	/* 24 MHz */
	BW28_MHZ	/* 28 MHz */
}bw_filtro;

uint8_t max2837_set_lpf_bw(max2837_st *transceiver, bw_filtro bw){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
	uint8_t bw2;
	switch(bw){
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d852      	bhi.n	8000fac <max2837_set_lpf_bw+0xb8>
 8000f06:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <max2837_set_lpf_bw+0x18>)
 8000f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0c:	08000f4d 	.word	0x08000f4d
 8000f10:	08000f53 	.word	0x08000f53
 8000f14:	08000f59 	.word	0x08000f59
 8000f18:	08000f5f 	.word	0x08000f5f
 8000f1c:	08000f65 	.word	0x08000f65
 8000f20:	08000f6b 	.word	0x08000f6b
 8000f24:	08000f71 	.word	0x08000f71
 8000f28:	08000f77 	.word	0x08000f77
 8000f2c:	08000f7d 	.word	0x08000f7d
 8000f30:	08000f83 	.word	0x08000f83
 8000f34:	08000f89 	.word	0x08000f89
 8000f38:	08000f8f 	.word	0x08000f8f
 8000f3c:	08000f95 	.word	0x08000f95
 8000f40:	08000f9b 	.word	0x08000f9b
 8000f44:	08000fa1 	.word	0x08000fa1
 8000f48:	08000fa7 	.word	0x08000fa7
		case BW1_75MHZ:
			bw2 = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
			break;
 8000f50:	e030      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW2_5MHZ:
			bw2 = 0x01;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
			break;
 8000f56:	e02d      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW3_5MHZ:
			bw2 = 0x02;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	73fb      	strb	r3, [r7, #15]
			break;
 8000f5c:	e02a      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW5_MHZ:
			bw2 = 0x03;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	73fb      	strb	r3, [r7, #15]
			break;
 8000f62:	e027      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW5_5MHZ:
			bw2 = 0x04;
 8000f64:	2304      	movs	r3, #4
 8000f66:	73fb      	strb	r3, [r7, #15]
			break;
 8000f68:	e024      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW6_MHZ:
			bw2 = 0x05;
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	73fb      	strb	r3, [r7, #15]
			break;
 8000f6e:	e021      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW7_MHZ:
			bw2 = 0x06;
 8000f70:	2306      	movs	r3, #6
 8000f72:	73fb      	strb	r3, [r7, #15]
			break;
 8000f74:	e01e      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW8_MHZ:
			bw2 = 0x07;
 8000f76:	2307      	movs	r3, #7
 8000f78:	73fb      	strb	r3, [r7, #15]
			break;
 8000f7a:	e01b      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW9_MHZ:
			bw2 = 0x08;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	73fb      	strb	r3, [r7, #15]
			break;
 8000f80:	e018      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW10_MHZ:
			bw2 = 0x09;
 8000f82:	2309      	movs	r3, #9
 8000f84:	73fb      	strb	r3, [r7, #15]
			break;
 8000f86:	e015      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW12_MHZ:
			bw2 = 0x0A;
 8000f88:	230a      	movs	r3, #10
 8000f8a:	73fb      	strb	r3, [r7, #15]
			break;
 8000f8c:	e012      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW14_MHZ:
			bw2 = 0x0B;
 8000f8e:	230b      	movs	r3, #11
 8000f90:	73fb      	strb	r3, [r7, #15]
			break;
 8000f92:	e00f      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW15_MHZ:
			bw2 = 0x0C;
 8000f94:	230c      	movs	r3, #12
 8000f96:	73fb      	strb	r3, [r7, #15]
			break;
 8000f98:	e00c      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW20_MHZ:
			bw2 = 0x0D;
 8000f9a:	230d      	movs	r3, #13
 8000f9c:	73fb      	strb	r3, [r7, #15]
			break;
 8000f9e:	e009      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW24_MHZ:
			bw2 = 0x0E;
 8000fa0:	230e      	movs	r3, #14
 8000fa2:	73fb      	strb	r3, [r7, #15]
			break;
 8000fa4:	e006      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		case BW28_MHZ:
			bw2 = 0x0F;
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	73fb      	strb	r3, [r7, #15]
			break;
 8000faa:	e003      	b.n	8000fb4 <max2837_set_lpf_bw+0xc0>
		default:
			bw2 = 0x0F;
 8000fac:	230f      	movs	r3, #15
 8000fae:	73fb      	strb	r3, [r7, #15]
			return 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e00b      	b.n	8000fcc <max2837_set_lpf_bw+0xd8>
	}
	max2837_write_reg(transceiver, LPF_1, (bw2 << 4), 4, 4);
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	2102      	movs	r1, #2
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff fd77 	bl	8000ab8 <max2837_write_reg>
	return 1;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <max2837_set_vga_gain>:

uint8_t max2837_set_vga_gain(max2837_st *transceiver, uint8_t gain_db){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
	if((gain_db & 0x1) || gain_db > 62)/* 0b11111*2 */
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <max2837_set_vga_gain+0x1c>
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2b3e      	cmp	r3, #62	; 0x3e
 8000fee:	d901      	bls.n	8000ff4 <max2837_set_vga_gain+0x20>
		return 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e00e      	b.n	8001012 <max2837_set_vga_gain+0x3e>
		
	max2837_write_reg(transceiver, VGA_2, (31 - (gain_db >> 1)), 5, 0);
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	085b      	lsrs	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	f1c3 031f 	rsb	r3, r3, #31
 8001000:	b29a      	uxth	r2, r3
 8001002:	2300      	movs	r3, #0
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2305      	movs	r3, #5
 8001008:	2105      	movs	r1, #5
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fd54 	bl	8000ab8 <max2837_write_reg>
	return 1;
 8001010:	2301      	movs	r3, #1
	/* falta manejo de error en software */
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <rffc5072_init>:
	0x1D,
	0x1E};
void rffc5072_init(rffc5072_st *mixer,
					SPI_HandleTypeDef *spiHandle,
					GPIO_TypeDef *CS_bank,
					uint16_t CS_pin){
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	807b      	strh	r3, [r7, #2]
						
	/* Store SPI params. */
	mixer->spiHandle = spiHandle;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
	mixer->CS_bank = CS_bank;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	605a      	str	r2, [r3, #4]
	mixer->CS_pin = CS_pin;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	887a      	ldrh	r2, [r7, #2]
 800103a:	811a      	strh	r2, [r3, #8]
	/* Clear SPI flags. */
	mixer->mixer_read_flg = 0;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	729a      	strb	r2, [r3, #10]
	mixer->mixer_write_flg = 0;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	72da      	strb	r2, [r3, #11]
	/* Load default registers' values. */
	uint8_t i = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	75fb      	strb	r3, [r7, #23]
	for(i=0;i<RFFC5072_NUM_REGS;i++){
 800104c:	2300      	movs	r3, #0
 800104e:	75fb      	strb	r3, [r7, #23]
 8001050:	e00f      	b.n	8001072 <rffc5072_init+0x56>
		rffc5072_write_reg(mixer, rffc5072_regs_address[i], rffc5072_regs_default[i], 0, 0);
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <rffc5072_init+0xa8>)
 8001056:	5cd1      	ldrb	r1, [r2, r3]
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <rffc5072_init+0xac>)
 800105c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001060:	2300      	movs	r3, #0
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f830 	bl	80010cc <rffc5072_write_reg>
	for(i=0;i<RFFC5072_NUM_REGS;i++){
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	3301      	adds	r3, #1
 8001070:	75fb      	strb	r3, [r7, #23]
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	2b1e      	cmp	r3, #30
 8001076:	d9ec      	bls.n	8001052 <rffc5072_init+0x36>
	}
	/* p2n: 1, p2lodiv: 2^0=1, p2presc: divide by 4, p2vcosel: 0 (vco1) */
	rffc5072_write_reg(mixer, P2_FREQ1, 0x0088, 16, 0);	/* 0000000010001000 */
 8001078:	2300      	movs	r3, #0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2310      	movs	r3, #16
 800107e:	2288      	movs	r2, #136	; 0x88
 8001080:	210f      	movs	r1, #15
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f000 f822 	bl	80010cc <rffc5072_write_reg>
	/* half-duplex, minimun mixer current */
	rffc5072_write_reg(mixer, MIX_CONT, 0x0000, 16, 0);
 8001088:	2300      	movs	r3, #0
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2310      	movs	r3, #16
 800108e:	2200      	movs	r2, #0
 8001090:	210b      	movs	r1, #11
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f81a 	bl	80010cc <rffc5072_write_reg>
	/* Auto VCO */
	rffc5072_write_reg(mixer, VCO_AUTO, 0xff00, 16, 0);	/* 1111111100000000 */
 8001098:	2300      	movs	r3, #0
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2310      	movs	r3, #16
 800109e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80010a2:	2108      	movs	r1, #8
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 f811 	bl	80010cc <rffc5072_write_reg>
	/* Set LO to 2506.3 MHz for tuning to a local known FM station */
	/*rffc5072_set_freq(mixer, 2506300000);*/
	/* 4-wire SPI control, enable part */
	rffc5072_write_reg(mixer, SDI_CTRL, 0xf000, 16, 0);	/* 1111000000000000 */
 80010aa:	2300      	movs	r3, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2310      	movs	r3, #16
 80010b0:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80010b4:	2115      	movs	r1, #21
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 f808 	bl	80010cc <rffc5072_write_reg>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	0800c744 	.word	0x0800c744
 80010c8:	0800c704 	.word	0x0800c704

080010cc <rffc5072_write_reg>:
		//lcd_send_string("Mix_r_err SPI Tx");
		/* falta manejo de error */
	}
}

void rffc5072_write_reg(rffc5072_st *mixer, uint8_t addr, uint16_t data, uint8_t mask, uint8_t offset){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4603      	mov	r3, r0
 80010dc:	70fb      	strb	r3, [r7, #3]
 80010de:	460b      	mov	r3, r1
 80010e0:	803b      	strh	r3, [r7, #0]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]
	*/
	uint8_t data_split[3];
	uint8_t txDataBuf[4];
	uint16_t bit_masko;
	
	if(mask < 16){
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d814      	bhi.n	8001116 <rffc5072_write_reg+0x4a>
		bit_masko = bit_mask(16, mask, offset);
 80010ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010f0:	78bb      	ldrb	r3, [r7, #2]
 80010f2:	4619      	mov	r1, r3
 80010f4:	2010      	movs	r0, #16
 80010f6:	f000 fb69 	bl	80017cc <bit_mask>
 80010fa:	4603      	mov	r3, r0
 80010fc:	82fb      	strh	r3, [r7, #22]
		data = (mixer->regs_values[addr] & bit_masko) | data;
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	3308      	adds	r3, #8
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	885a      	ldrh	r2, [r3, #2]
 800110a:	8afb      	ldrh	r3, [r7, #22]
 800110c:	4013      	ands	r3, r2
 800110e:	b29a      	uxth	r2, r3
 8001110:	883b      	ldrh	r3, [r7, #0]
 8001112:	4313      	orrs	r3, r2
 8001114:	803b      	strh	r3, [r7, #0]
	}
	data_split[0] = (uint8_t)(data >> 9);
 8001116:	883b      	ldrh	r3, [r7, #0]
 8001118:	0a5b      	lsrs	r3, r3, #9
 800111a:	b29b      	uxth	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	743b      	strb	r3, [r7, #16]
	data_split[1] = (uint8_t)(data >> 1);
 8001120:	883b      	ldrh	r3, [r7, #0]
 8001122:	085b      	lsrs	r3, r3, #1
 8001124:	b29b      	uxth	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	747b      	strb	r3, [r7, #17]
	data_split[2] = (uint8_t)(data << 7);
 800112a:	883b      	ldrh	r3, [r7, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	01db      	lsls	r3, r3, #7
 8001130:	b2db      	uxtb	r3, r3
 8001132:	74bb      	strb	r3, [r7, #18]
	txDataBuf[0] = ((addr & 0x7f) >> 2);
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	109b      	asrs	r3, r3, #2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	b2db      	uxtb	r3, r3
 8001140:	733b      	strb	r3, [r7, #12]
	txDataBuf[1] = ((addr << 7) | data_split[0]);
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	01db      	lsls	r3, r3, #7
 8001146:	b25a      	sxtb	r2, r3
 8001148:	7c3b      	ldrb	r3, [r7, #16]
 800114a:	b25b      	sxtb	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b25b      	sxtb	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	737b      	strb	r3, [r7, #13]
	txDataBuf[2] = data_split[1];
 8001154:	7c7b      	ldrb	r3, [r7, #17]
 8001156:	73bb      	strb	r3, [r7, #14]
	txDataBuf[3] = data_split[2];
 8001158:	7cbb      	ldrb	r3, [r7, #18]
 800115a:	73fb      	strb	r3, [r7, #15]
	mixer->txData_temp = data;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	883a      	ldrh	r2, [r7, #0]
 8001160:	81da      	strh	r2, [r3, #14]

	mixer->current_addr = addr;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	78fa      	ldrb	r2, [r7, #3]
 8001166:	741a      	strb	r2, [r3, #16]
	spi_enable(mixer->CS_bank, mixer->CS_pin);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	891b      	ldrh	r3, [r3, #8]
 8001170:	4619      	mov	r1, r3
 8001172:	4610      	mov	r0, r2
 8001174:	f000 fb0a 	bl	800178c <spi_enable>
	if((HAL_SPI_Transmit_IT(mixer->spiHandle, txDataBuf, sizeof(txDataBuf))) == HAL_OK){
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f107 010c 	add.w	r1, r7, #12
 8001180:	2204      	movs	r2, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f006 fc8e 	bl	8007aa4 <HAL_SPI_Transmit_IT>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <rffc5072_write_reg+0xca>
		mixer->mixer_write_flg = 1;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	72da      	strb	r2, [r3, #11]
		spi_disable(mixer->CS_bank, mixer->CS_pin);
		//lcd_clear();
		//lcd_send_string("Mix_w_err SPI Tx");
		/* falta manejo de error */
	}
}
 8001194:	e00a      	b.n	80011ac <rffc5072_write_reg+0xe0>
		mixer->mixer_write_flg = 0;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	72da      	strb	r2, [r3, #11]
		spi_disable(mixer->CS_bank, mixer->CS_pin);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	891b      	ldrh	r3, [r3, #8]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4610      	mov	r0, r2
 80011a8:	f000 fb00 	bl	80017ac <spi_disable>
}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <rffc5072_set_freq>:

void rffc5072_set_freq(rffc5072_st *mixer, uint32_t lo_freq_hz){
 80011b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011b8:	b09c      	sub	sp, #112	; 0x70
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80011be:	62b9      	str	r1, [r7, #40]	; 0x28
	uint8_t n_lo;
	uint8_t lo_div;
	uint8_t intlog2 = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t fvco_int;
	uint16_t p2_freq1_reg;
	
	
	/* Define new format for frequency: MMM.HHHHH (12 bits + 20 bits) */
	lo_freq_mhz = lo_freq_hz / ONE_MHZ;						/* Convert from Hz to MHz */
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	4ac3      	ldr	r2, [pc, #780]	; (80014d8 <rffc5072_set_freq+0x324>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0c9b      	lsrs	r3, r3, #18
 80011d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	/*uint32_t freq_aux = lo_freq_mhz << 20; 				/* Store MHz part in the 12 MSBs */
	/*lo_freq_mhz *= ONE_MHZ;								/* Keep MHz and discard decimal part */
	lo_freq_decimal = lo_freq_hz - (lo_freq_mhz * ONE_MHZ);	/* Keep decimal part in Hz */
 80011d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011d8:	4ac0      	ldr	r2, [pc, #768]	; (80014dc <rffc5072_set_freq+0x328>)
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	647b      	str	r3, [r7, #68]	; 0x44
	/*freq_aux |= lo_freq_decimal;							/* Full frequency in custom format */
	
	f_tmp = FVCO_MAX / lo_freq_mhz;
 80011e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011e8:	f241 5218 	movw	r2, #5400	; 0x1518
 80011ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80011f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	/* Compute log2 of f_tmp and round down */
	while(f_tmp > 1){
 80011f4:	e009      	b.n	800120a <rffc5072_set_freq+0x56>
		f_tmp >>= 1;
 80011f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011fa:	085b      	lsrs	r3, r3, #1
 80011fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		intlog2++;
 8001200:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001204:	3301      	adds	r3, #1
 8001206:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	while(f_tmp > 1){
 800120a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800120e:	2b01      	cmp	r3, #1
 8001210:	d8f1      	bhi.n	80011f6 <rffc5072_set_freq+0x42>
	}
	n_lo = intlog2;
 8001212:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	lo_div = (1 << n_lo);	/* 2^n_lo */
 800121a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800121e:	2201      	movs	r2, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	
	fvco_dec = lo_div * lo_freq_decimal;
 8001228:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800122c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	653b      	str	r3, [r7, #80]	; 0x50
	fvco_int = lo_div * lo_freq_mhz;
 8001234:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001238:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(fvco_dec > ONE_MHZ){
 8001242:	e006      	b.n	8001252 <rffc5072_set_freq+0x9e>
		fvco_dec -= ONE_MHZ;
 8001244:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001246:	4ba6      	ldr	r3, [pc, #664]	; (80014e0 <rffc5072_set_freq+0x32c>)
 8001248:	4413      	add	r3, r2
 800124a:	653b      	str	r3, [r7, #80]	; 0x50
		fvco_int++;
 800124c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124e:	3301      	adds	r3, #1
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(fvco_dec > ONE_MHZ){
 8001252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001254:	4aa1      	ldr	r2, [pc, #644]	; (80014dc <rffc5072_set_freq+0x328>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d8f4      	bhi.n	8001244 <rffc5072_set_freq+0x90>
	}
	mixer->fvco_int = fvco_int;
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800125e:	655a      	str	r2, [r3, #84]	; 0x54
	mixer->fvco_dec = fvco_dec;
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001264:	651a      	str	r2, [r3, #80]	; 0x50
	
	if((lo_div * lo_freq_hz) < 3200000000ULL){
 8001266:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800126a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	4a9c      	ldr	r2, [pc, #624]	; (80014e4 <rffc5072_set_freq+0x330>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d803      	bhi.n	800127e <rffc5072_set_freq+0xca>
		fbkdiv = 2;
 8001276:	2302      	movs	r3, #2
 8001278:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800127c:	e002      	b.n	8001284 <rffc5072_set_freq+0xd0>
	}else{
		fbkdiv = 4;
 800127e:	2304      	movs	r3, #4
 8001280:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}
	
	fvco_int *= ONE_MHZ;
 8001284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001286:	4a95      	ldr	r2, [pc, #596]	; (80014dc <rffc5072_set_freq+0x328>)
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	64fb      	str	r3, [r7, #76]	; 0x4c
	fvco_int /= (fbkdiv * F_REF);
 800128e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001292:	2234      	movs	r2, #52	; 0x34
 8001294:	fb02 f303 	mul.w	r3, r2, r3
 8001298:	461a      	mov	r2, r3
 800129a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129c:	fbb3 f3f2 	udiv	r3, r3, r2
 80012a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	n = fvco_int / ONE_MHZ;
 80012a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a4:	4a8c      	ldr	r2, [pc, #560]	; (80014d8 <rffc5072_set_freq+0x324>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	0c9b      	lsrs	r3, r3, #18
 80012ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	fvco_dec /= (fbkdiv * F_REF);
 80012b0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80012b4:	2234      	movs	r2, #52	; 0x34
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012be:	fbb3 f3f2 	udiv	r3, r3, r2
 80012c2:	653b      	str	r3, [r7, #80]	; 0x50
	n_div_decimal = ((fvco_int - (n * ONE_MHZ)) + fvco_dec);
 80012c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c6:	4698      	mov	r8, r3
 80012c8:	f04f 0900 	mov.w	r9, #0
 80012cc:	f8b7 4064 	ldrh.w	r4, [r7, #100]	; 0x64
 80012d0:	f04f 0500 	mov.w	r5, #0
 80012d4:	4622      	mov	r2, r4
 80012d6:	462b      	mov	r3, r5
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	f04f 0100 	mov.w	r1, #0
 80012e0:	0159      	lsls	r1, r3, #5
 80012e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012e6:	0150      	lsls	r0, r2, #5
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	1b12      	subs	r2, r2, r4
 80012ee:	eb63 0305 	sbc.w	r3, r3, r5
 80012f2:	f04f 0000 	mov.w	r0, #0
 80012f6:	f04f 0100 	mov.w	r1, #0
 80012fa:	0259      	lsls	r1, r3, #9
 80012fc:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001300:	0250      	lsls	r0, r2, #9
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	1912      	adds	r2, r2, r4
 8001308:	eb45 0303 	adc.w	r3, r5, r3
 800130c:	f04f 0000 	mov.w	r0, #0
 8001310:	f04f 0100 	mov.w	r1, #0
 8001314:	0199      	lsls	r1, r3, #6
 8001316:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800131a:	0190      	lsls	r0, r2, #6
 800131c:	1a80      	subs	r0, r0, r2
 800131e:	eb61 0103 	sbc.w	r1, r1, r3
 8001322:	1903      	adds	r3, r0, r4
 8001324:	623b      	str	r3, [r7, #32]
 8001326:	eb41 0305 	adc.w	r3, r1, r5
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
 800132c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001330:	460b      	mov	r3, r1
 8001332:	ebb8 0303 	subs.w	r3, r8, r3
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	4613      	mov	r3, r2
 800133a:	eb69 0303 	sbc.w	r3, r9, r3
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001342:	461a      	mov	r2, r3
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800134c:	4621      	mov	r1, r4
 800134e:	1889      	adds	r1, r1, r2
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	4629      	mov	r1, r5
 8001354:	eb43 0101 	adc.w	r1, r3, r1
 8001358:	60f9      	str	r1, [r7, #12]
 800135a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800135e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	while(n_div_decimal > ONE_MHZ){
 8001362:	e011      	b.n	8001388 <rffc5072_set_freq+0x1d4>
		n_div_decimal -= ONE_MHZ;
 8001364:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001368:	485d      	ldr	r0, [pc, #372]	; (80014e0 <rffc5072_set_freq+0x32c>)
 800136a:	f04f 31ff 	mov.w	r1, #4294967295
 800136e:	1814      	adds	r4, r2, r0
 8001370:	603c      	str	r4, [r7, #0]
 8001372:	414b      	adcs	r3, r1
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	e9d7 3400 	ldrd	r3, r4, [r7]
 800137a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		n++;
 800137e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001382:	3301      	adds	r3, #1
 8001384:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	while(n_div_decimal > ONE_MHZ){
 8001388:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800138c:	4853      	ldr	r0, [pc, #332]	; (80014dc <rffc5072_set_freq+0x328>)
 800138e:	f04f 0100 	mov.w	r1, #0
 8001392:	4299      	cmp	r1, r3
 8001394:	bf08      	it	eq
 8001396:	4290      	cmpeq	r0, r2
 8001398:	d3e4      	bcc.n	8001364 <rffc5072_set_freq+0x1b0>
	}
	nummsb = (n_div_decimal << 16) / ONE_MHZ;
 800139a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800139e:	f04f 0000 	mov.w	r0, #0
 80013a2:	f04f 0100 	mov.w	r1, #0
 80013a6:	0419      	lsls	r1, r3, #16
 80013a8:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80013ac:	0410      	lsls	r0, r2, #16
 80013ae:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <rffc5072_set_freq+0x328>)
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	f7fe ff34 	bl	8000220 <__aeabi_uldivmod>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	numlsb = (((n_div_decimal << 16) - (nummsb * ONE_MHZ)) << 8) / ONE_MHZ;
 80013c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80013c4:	f04f 0800 	mov.w	r8, #0
 80013c8:	f04f 0900 	mov.w	r9, #0
 80013cc:	ea4f 4903 	mov.w	r9, r3, lsl #16
 80013d0:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 80013d4:	ea4f 4802 	mov.w	r8, r2, lsl #16
 80013d8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80013dc:	4622      	mov	r2, r4
 80013de:	462b      	mov	r3, r5
 80013e0:	f04f 0000 	mov.w	r0, #0
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	0159      	lsls	r1, r3, #5
 80013ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ee:	0150      	lsls	r0, r2, #5
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	1b12      	subs	r2, r2, r4
 80013f6:	eb63 0305 	sbc.w	r3, r3, r5
 80013fa:	f04f 0000 	mov.w	r0, #0
 80013fe:	f04f 0100 	mov.w	r1, #0
 8001402:	0259      	lsls	r1, r3, #9
 8001404:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001408:	0250      	lsls	r0, r2, #9
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	1912      	adds	r2, r2, r4
 8001410:	eb45 0303 	adc.w	r3, r5, r3
 8001414:	f04f 0000 	mov.w	r0, #0
 8001418:	f04f 0100 	mov.w	r1, #0
 800141c:	0199      	lsls	r1, r3, #6
 800141e:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001422:	0190      	lsls	r0, r2, #6
 8001424:	1a80      	subs	r0, r0, r2
 8001426:	eb61 0103 	sbc.w	r1, r1, r3
 800142a:	1903      	adds	r3, r0, r4
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	eb41 0305 	adc.w	r3, r1, r5
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001438:	460b      	mov	r3, r1
 800143a:	ebb8 0a03 	subs.w	sl, r8, r3
 800143e:	4613      	mov	r3, r2
 8001440:	eb69 0b03 	sbc.w	fp, r9, r3
 8001444:	f04f 0000 	mov.w	r0, #0
 8001448:	f04f 0100 	mov.w	r1, #0
 800144c:	ea4f 210b 	mov.w	r1, fp, lsl #8
 8001450:	ea41 611a 	orr.w	r1, r1, sl, lsr #24
 8001454:	ea4f 200a 	mov.w	r0, sl, lsl #8
 8001458:	4a20      	ldr	r2, [pc, #128]	; (80014dc <rffc5072_set_freq+0x328>)
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	f7fe fedf 	bl	8000220 <__aeabi_uldivmod>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4613      	mov	r3, r2
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
	
	/* Load calculated values to registers */
	p2_freq1_reg = ((n << 7) | (lo_div << 4) | (fbkdiv << 2)) & 0xffff;
 800146a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800146e:	01db      	lsls	r3, r3, #7
 8001470:	b21a      	sxth	r2, r3
 8001472:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21b      	sxth	r3, r3
 800148a:	867b      	strh	r3, [r7, #50]	; 0x32
	rffc5072_disable(mixer);
 800148c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800148e:	f000 f96d 	bl	800176c <rffc5072_disable>
	rffc5072_write_reg(mixer, P2_FREQ1, p2_freq1_reg, 14, 2);
 8001492:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001494:	2302      	movs	r3, #2
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	230e      	movs	r3, #14
 800149a:	210f      	movs	r1, #15
 800149c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800149e:	f7ff fe15 	bl	80010cc <rffc5072_write_reg>
	rffc5072_write_reg(mixer, P2_FREQ2, ((uint16_t)nummsb & 0xffff), 16, 0);
 80014a2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80014a4:	2300      	movs	r3, #0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2310      	movs	r3, #16
 80014aa:	2110      	movs	r1, #16
 80014ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014ae:	f7ff fe0d 	bl	80010cc <rffc5072_write_reg>
	rffc5072_write_reg(mixer, P2_FREQ3, ((uint8_t)numlsb & 0xff), 8, 8);
 80014b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	2308      	movs	r3, #8
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2308      	movs	r3, #8
 80014be:	2111      	movs	r1, #17
 80014c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014c2:	f7ff fe03 	bl	80010cc <rffc5072_write_reg>
	rffc5072_enable(mixer);
 80014c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014c8:	f000 f940 	bl	800174c <rffc5072_enable>
}
 80014cc:	bf00      	nop
 80014ce:	3768      	adds	r7, #104	; 0x68
 80014d0:	46bd      	mov	sp, r7
 80014d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014d6:	bf00      	nop
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	000f4240 	.word	0x000f4240
 80014e0:	fff0bdc0 	.word	0xfff0bdc0
 80014e4:	bebc1fff 	.word	0xbebc1fff

080014e8 <rffc5072_lower_phase_noise>:

void rffc5072_lower_phase_noise(rffc5072_st *mixer){
 80014e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014ec:	b09a      	sub	sp, #104	; 0x68
 80014ee:	af02      	add	r7, sp, #8
 80014f0:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t fvco_dec = mixer->fvco_dec;
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t fvco_int = mixer->fvco_int;
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t n;	/* int(n_div) */
	uint64_t n_div_decimal;	/* n_div - n */
	uint64_t nummsb;
	uint32_t numlsb;
	uint8_t fbkdiv = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	fvco_int *= ONE_MHZ;
 8001504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001506:	4a8e      	ldr	r2, [pc, #568]	; (8001740 <rffc5072_lower_phase_noise+0x258>)
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
	fvco_int /= (fbkdiv * F_REF);
 800150e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001512:	2234      	movs	r2, #52	; 0x34
 8001514:	fb02 f303 	mul.w	r3, r2, r3
 8001518:	461a      	mov	r2, r3
 800151a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800151c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001520:	64bb      	str	r3, [r7, #72]	; 0x48
	n = fvco_int / ONE_MHZ;
 8001522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001524:	4a87      	ldr	r2, [pc, #540]	; (8001744 <rffc5072_lower_phase_noise+0x25c>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	fvco_dec /= (fbkdiv * F_REF);
 8001530:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001534:	2234      	movs	r2, #52	; 0x34
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	461a      	mov	r2, r3
 800153c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800153e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
	n_div_decimal = ((fvco_int - (n * ONE_MHZ)) + fvco_dec);
 8001544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001546:	4618      	mov	r0, r3
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	e9c7 0100 	strd	r0, r1, [r7]
 8001550:	f8b7 405e 	ldrh.w	r4, [r7, #94]	; 0x5e
 8001554:	f04f 0500 	mov.w	r5, #0
 8001558:	4622      	mov	r2, r4
 800155a:	462b      	mov	r3, r5
 800155c:	f04f 0000 	mov.w	r0, #0
 8001560:	f04f 0100 	mov.w	r1, #0
 8001564:	0159      	lsls	r1, r3, #5
 8001566:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800156a:	0150      	lsls	r0, r2, #5
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	1b12      	subs	r2, r2, r4
 8001572:	eb63 0305 	sbc.w	r3, r3, r5
 8001576:	f04f 0000 	mov.w	r0, #0
 800157a:	f04f 0100 	mov.w	r1, #0
 800157e:	0259      	lsls	r1, r3, #9
 8001580:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001584:	0250      	lsls	r0, r2, #9
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	1912      	adds	r2, r2, r4
 800158c:	eb45 0303 	adc.w	r3, r5, r3
 8001590:	f04f 0000 	mov.w	r0, #0
 8001594:	f04f 0100 	mov.w	r1, #0
 8001598:	0199      	lsls	r1, r3, #6
 800159a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800159e:	0190      	lsls	r0, r2, #6
 80015a0:	1a80      	subs	r0, r0, r2
 80015a2:	eb61 0103 	sbc.w	r1, r1, r3
 80015a6:	1903      	adds	r3, r0, r4
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	eb41 0305 	adc.w	r3, r1, r5
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
 80015b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b4:	4603      	mov	r3, r0
 80015b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015ba:	4622      	mov	r2, r4
 80015bc:	ebb3 0802 	subs.w	r8, r3, r2
 80015c0:	460b      	mov	r3, r1
 80015c2:	462a      	mov	r2, r5
 80015c4:	eb63 0902 	sbc.w	r9, r3, r2
 80015c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ca:	461a      	mov	r2, r3
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	eb18 0102 	adds.w	r1, r8, r2
 80015d4:	6139      	str	r1, [r7, #16]
 80015d6:	eb49 0303 	adc.w	r3, r9, r3
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015e0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	while(n_div_decimal > ONE_MHZ){
 80015e4:	e011      	b.n	800160a <rffc5072_lower_phase_noise+0x122>
		n_div_decimal -= ONE_MHZ;
 80015e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015ea:	4857      	ldr	r0, [pc, #348]	; (8001748 <rffc5072_lower_phase_noise+0x260>)
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	1814      	adds	r4, r2, r0
 80015f2:	60bc      	str	r4, [r7, #8]
 80015f4:	414b      	adcs	r3, r1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015fc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		n++;
 8001600:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001604:	3301      	adds	r3, #1
 8001606:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	while(n_div_decimal > ONE_MHZ){
 800160a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800160e:	484c      	ldr	r0, [pc, #304]	; (8001740 <rffc5072_lower_phase_noise+0x258>)
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	4299      	cmp	r1, r3
 8001616:	bf08      	it	eq
 8001618:	4290      	cmpeq	r0, r2
 800161a:	d3e4      	bcc.n	80015e6 <rffc5072_lower_phase_noise+0xfe>
	}
	nummsb = (n_div_decimal << 16) / ONE_MHZ;
 800161c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001620:	f04f 0000 	mov.w	r0, #0
 8001624:	f04f 0100 	mov.w	r1, #0
 8001628:	0419      	lsls	r1, r3, #16
 800162a:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800162e:	0410      	lsls	r0, r2, #16
 8001630:	4a43      	ldr	r2, [pc, #268]	; (8001740 <rffc5072_lower_phase_noise+0x258>)
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	f7fe fdf3 	bl	8000220 <__aeabi_uldivmod>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	numlsb = (((n_div_decimal << 16) - (nummsb * ONE_MHZ)) << 8) / ONE_MHZ;
 8001642:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001646:	f04f 0800 	mov.w	r8, #0
 800164a:	f04f 0900 	mov.w	r9, #0
 800164e:	ea4f 4903 	mov.w	r9, r3, lsl #16
 8001652:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 8001656:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800165a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800165e:	4622      	mov	r2, r4
 8001660:	462b      	mov	r3, r5
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	0159      	lsls	r1, r3, #5
 800166c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001670:	0150      	lsls	r0, r2, #5
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	1b12      	subs	r2, r2, r4
 8001678:	eb63 0305 	sbc.w	r3, r3, r5
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	0259      	lsls	r1, r3, #9
 8001686:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800168a:	0250      	lsls	r0, r2, #9
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	1912      	adds	r2, r2, r4
 8001692:	eb45 0303 	adc.w	r3, r5, r3
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0199      	lsls	r1, r3, #6
 80016a0:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80016a4:	0190      	lsls	r0, r2, #6
 80016a6:	1a80      	subs	r0, r0, r2
 80016a8:	eb61 0103 	sbc.w	r1, r1, r3
 80016ac:	1903      	adds	r3, r0, r4
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	eb41 0305 	adc.w	r3, r1, r5
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80016ba:	460b      	mov	r3, r1
 80016bc:	ebb8 0a03 	subs.w	sl, r8, r3
 80016c0:	4613      	mov	r3, r2
 80016c2:	eb69 0b03 	sbc.w	fp, r9, r3
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	ea4f 210b 	mov.w	r1, fp, lsl #8
 80016d2:	ea41 611a 	orr.w	r1, r1, sl, lsr #24
 80016d6:	ea4f 200a 	mov.w	r0, sl, lsl #8
 80016da:	4a19      	ldr	r2, [pc, #100]	; (8001740 <rffc5072_lower_phase_noise+0x258>)
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f7fe fd9e 	bl	8000220 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4613      	mov	r3, r2
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
	
	/* Load calculated values to registers */
	rffc5072_write_reg(mixer, P2_FREQ1, n, 9, 7);
 80016ec:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80016f0:	2307      	movs	r3, #7
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2309      	movs	r3, #9
 80016f6:	210f      	movs	r1, #15
 80016f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016fa:	f7ff fce7 	bl	80010cc <rffc5072_write_reg>
	rffc5072_write_reg(mixer, P2_FREQ1, fbkdiv, 2, 2);
 80016fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001702:	b29a      	uxth	r2, r3
 8001704:	2302      	movs	r3, #2
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2302      	movs	r3, #2
 800170a:	210f      	movs	r1, #15
 800170c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800170e:	f7ff fcdd 	bl	80010cc <rffc5072_write_reg>
	rffc5072_write_reg(mixer, P2_FREQ2, ((uint16_t)nummsb & 0xffff), 16, 0);
 8001712:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2310      	movs	r3, #16
 800171a:	2110      	movs	r1, #16
 800171c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800171e:	f7ff fcd5 	bl	80010cc <rffc5072_write_reg>
	rffc5072_write_reg(mixer, P2_FREQ3, ((uint8_t)numlsb & 0xff), 8, 8);
 8001722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b29a      	uxth	r2, r3
 8001728:	2308      	movs	r3, #8
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2308      	movs	r3, #8
 800172e:	2111      	movs	r1, #17
 8001730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001732:	f7ff fccb 	bl	80010cc <rffc5072_write_reg>
}
 8001736:	bf00      	nop
 8001738:	3760      	adds	r7, #96	; 0x60
 800173a:	46bd      	mov	sp, r7
 800173c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001740:	000f4240 	.word	0x000f4240
 8001744:	431bde83 	.word	0x431bde83
 8001748:	fff0bdc0 	.word	0xfff0bdc0

0800174c <rffc5072_enable>:

void rffc5072_enable(rffc5072_st *mixer){
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
	rffc5072_write_reg(mixer, SDI_CTRL, 1, 1, 14);
 8001754:	230e      	movs	r3, #14
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	2201      	movs	r2, #1
 800175c:	2115      	movs	r1, #21
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fcb4 	bl	80010cc <rffc5072_write_reg>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <rffc5072_disable>:

void rffc5072_disable(rffc5072_st *mixer){
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af02      	add	r7, sp, #8
 8001772:	6078      	str	r0, [r7, #4]
	rffc5072_write_reg(mixer, SDI_CTRL, 0, 1, 14);
 8001774:	230e      	movs	r3, #14
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	2200      	movs	r2, #0
 800177c:	2115      	movs	r1, #21
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fca4 	bl	80010cc <rffc5072_write_reg>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <spi_enable>:
#include "Drivers/rffc5072.h"

extern max2837_st transceiver;
extern rffc5072_st mixer;

void spi_enable(GPIO_TypeDef *CS_bank, uint16_t CS_pin){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
	/* Use GPIO HAL to drive chip select pin low. */
	HAL_GPIO_WritePin(CS_bank, CS_pin, GPIO_PIN_RESET);
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f002 f9b8 	bl	8003b14 <HAL_GPIO_WritePin>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <spi_disable>:

void spi_disable(GPIO_TypeDef *CS_bank, uint16_t CS_pin){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
	/* Use GPIO HAL to drive chip select pin high. */
	HAL_GPIO_WritePin(CS_bank, CS_pin, GPIO_PIN_SET);
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f002 f9a8 	bl	8003b14 <HAL_GPIO_WritePin>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <bit_mask>:

uint32_t bit_mask(uint8_t size, uint8_t length, uint8_t offset){
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
 80017d6:	460b      	mov	r3, r1
 80017d8:	71bb      	strb	r3, [r7, #6]
 80017da:	4613      	mov	r3, r2
 80017dc:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint32_t bit_mask = 0x00000000;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
	
	for(i=size;i>0;i--){
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	e013      	b.n	8001810 <bit_mask+0x44>
		bit_mask <<= 1;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
		if((i <= offset) || (i > (offset + length)))
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d905      	bls.n	8001802 <bit_mask+0x36>
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	7979      	ldrb	r1, [r7, #5]
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	440b      	add	r3, r1
 80017fe:	429a      	cmp	r2, r3
 8001800:	dd03      	ble.n	800180a <bit_mask+0x3e>
			bit_mask |= 0x1;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
	for(i=size;i>0;i--){
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3b01      	subs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1e8      	bne.n	80017e8 <bit_mask+0x1c>
	}
	
	return bit_mask;
 8001816:	68bb      	ldr	r3, [r7, #8]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <bypass_rf_mixer>:

void bypass_rf_mixer(uint8_t bypass){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
	if (bypass == 0){
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10c      	bne.n	800184e <bypass_rf_mixer+0x2a>
		HAL_GPIO_WritePin(Rx_Mix_Bypass_GPIO_Port, Rx_Mix_Bypass_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <bypass_rf_mixer+0x50>)
 800183c:	f002 f96a 	bl	8003b14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Rx_Mix_GPIO_Port, Rx_Mix_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001846:	480b      	ldr	r0, [pc, #44]	; (8001874 <bypass_rf_mixer+0x50>)
 8001848:	f002 f964 	bl	8003b14 <HAL_GPIO_WritePin>
	}
	else if (bypass == 1){
		HAL_GPIO_WritePin(Rx_Mix_Bypass_GPIO_Port, Rx_Mix_Bypass_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Rx_Mix_GPIO_Port, Rx_Mix_Pin, GPIO_PIN_SET);
	}	
}
 800184c:	e00e      	b.n	800186c <bypass_rf_mixer+0x48>
	else if (bypass == 1){
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d10b      	bne.n	800186c <bypass_rf_mixer+0x48>
		HAL_GPIO_WritePin(Rx_Mix_Bypass_GPIO_Port, Rx_Mix_Bypass_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <bypass_rf_mixer+0x50>)
 800185c:	f002 f95a 	bl	8003b14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Rx_Mix_GPIO_Port, Rx_Mix_Pin, GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <bypass_rf_mixer+0x50>)
 8001868:	f002 f954 	bl	8003b14 <HAL_GPIO_WritePin>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000

08001878 <max1193_set_mode>:

void max1193_set_mode(max1193_mode mode){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d83b      	bhi.n	8001900 <max1193_set_mode+0x88>
 8001888:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <max1193_set_mode+0x18>)
 800188a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188e:	bf00      	nop
 8001890:	080018a1 	.word	0x080018a1
 8001894:	080018b9 	.word	0x080018b9
 8001898:	080018d1 	.word	0x080018d1
 800189c:	080018e9 	.word	0x080018e9
	{
	case MAX1193_MODE_SHUTDOWN:
		HAL_GPIO_WritePin(PD0_adc_GPIO_Port, PD0_adc_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2104      	movs	r1, #4
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <max1193_set_mode+0x94>)
 80018a6:	f002 f935 	bl	8003b14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD1_adc_GPIO_Port, PD1_adc_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b0:	4817      	ldr	r0, [pc, #92]	; (8001910 <max1193_set_mode+0x98>)
 80018b2:	f002 f92f 	bl	8003b14 <HAL_GPIO_WritePin>
		break;
 80018b6:	e024      	b.n	8001902 <max1193_set_mode+0x8a>
	case MAX1193_MODE_STANDBY:
		HAL_GPIO_WritePin(PD0_adc_GPIO_Port, PD0_adc_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2104      	movs	r1, #4
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <max1193_set_mode+0x94>)
 80018be:	f002 f929 	bl	8003b14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD1_adc_GPIO_Port, PD1_adc_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c8:	4811      	ldr	r0, [pc, #68]	; (8001910 <max1193_set_mode+0x98>)
 80018ca:	f002 f923 	bl	8003b14 <HAL_GPIO_WritePin>
		break;
 80018ce:	e018      	b.n	8001902 <max1193_set_mode+0x8a>
	case MAX1193_MODE_IDLE:
		HAL_GPIO_WritePin(PD0_adc_GPIO_Port, PD0_adc_Pin, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2104      	movs	r1, #4
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <max1193_set_mode+0x94>)
 80018d6:	f002 f91d 	bl	8003b14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD1_adc_GPIO_Port, PD1_adc_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <max1193_set_mode+0x98>)
 80018e2:	f002 f917 	bl	8003b14 <HAL_GPIO_WritePin>
		break;
 80018e6:	e00c      	b.n	8001902 <max1193_set_mode+0x8a>
	case MAX1193_MODE_NORMAL:
		HAL_GPIO_WritePin(PD0_adc_GPIO_Port, PD0_adc_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2104      	movs	r1, #4
 80018ec:	4807      	ldr	r0, [pc, #28]	; (800190c <max1193_set_mode+0x94>)
 80018ee:	f002 f911 	bl	8003b14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD1_adc_GPIO_Port, PD1_adc_Pin, GPIO_PIN_SET);
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <max1193_set_mode+0x98>)
 80018fa:	f002 f90b 	bl	8003b14 <HAL_GPIO_WritePin>
		break;
 80018fe:	e000      	b.n	8001902 <max1193_set_mode+0x8a>
	
	default:
		break;
 8001900:	bf00      	nop
	}
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020400 	.word	0x40020400
 8001910:	40021400 	.word	0x40021400

08001914 <gpio_init>:

void gpio_init(){
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	/* Bandpass Filter Active. */
	HAL_GPIO_WritePin(Filt_Bypass_GPIO_Port, Filt_Bypass_Pin, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191e:	4811      	ldr	r0, [pc, #68]	; (8001964 <gpio_init+0x50>)
 8001920:	f002 f8f8 	bl	8003b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Filtro_GPIO_Port, Filtro_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192a:	480e      	ldr	r0, [pc, #56]	; (8001964 <gpio_init+0x50>)
 800192c:	f002 f8f2 	bl	8003b14 <HAL_GPIO_WritePin>
	/* Amplifier Off. */
	HAL_GPIO_WritePin(Rx_Amp_Pwr_GPIO_Port, Rx_Amp_Pwr_Pin, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <gpio_init+0x54>)
 8001938:	f002 f8ec 	bl	8003b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rx_Amp_Bypass_GPIO_Port, Rx_Amp_Bypass_Pin, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001942:	4809      	ldr	r0, [pc, #36]	; (8001968 <gpio_init+0x54>)
 8001944:	f002 f8e6 	bl	8003b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rx_Amp_GPIO_Port, Rx_Amp_Pin, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <gpio_init+0x54>)
 8001950:	f002 f8e0 	bl	8003b14 <HAL_GPIO_WritePin>
	/* Enable Rx Mixer. */
	bypass_rf_mixer(0);
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff ff65 	bl	8001824 <bypass_rf_mixer>
	/* Set external ADC to Standby mode. */
	max1193_set_mode(MAX1193_MODE_STANDBY);
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff ff8c 	bl	8001878 <max1193_set_mode>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	40021000 	.word	0x40021000

0800196c <tune_freq>:

void tune_freq(uint32_t desired_freq){
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	uint32_t pre_IF = 2400000;
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <tune_freq+0x88>)
 8001976:	60fb      	str	r3, [r7, #12]
	uint32_t mixer_lo_freq, transceiver_lo_freq;

	if (desired_freq < 2300000 || desired_freq > 2700000){	
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <tune_freq+0x8c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d303      	bcc.n	8001988 <tune_freq+0x1c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <tune_freq+0x90>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d920      	bls.n	80019ca <tune_freq+0x5e>
		if (desired_freq < pre_IF){
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d206      	bcs.n	800199e <tune_freq+0x32>
			mixer_lo_freq = pre_IF;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	617b      	str	r3, [r7, #20]
			transceiver_lo_freq = desired_freq + pre_IF;
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	e009      	b.n	80019b2 <tune_freq+0x46>
		}
		else if (desired_freq > pre_IF){
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d905      	bls.n	80019b2 <tune_freq+0x46>
			mixer_lo_freq = desired_freq - pre_IF;
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
			transceiver_lo_freq = pre_IF;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	613b      	str	r3, [r7, #16]
		}
		bypass_rf_mixer(0);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff ff36 	bl	8001824 <bypass_rf_mixer>
		rffc5072_set_freq(&mixer, mixer_lo_freq);
 80019b8:	6979      	ldr	r1, [r7, #20]
 80019ba:	4811      	ldr	r0, [pc, #68]	; (8001a00 <tune_freq+0x94>)
 80019bc:	f7ff fbfa 	bl	80011b4 <rffc5072_set_freq>
		max2837_set_freq(&transceiver, transceiver_lo_freq);
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <tune_freq+0x98>)
 80019c4:	f7ff f9aa 	bl	8000d1c <max2837_set_freq>
	else if (desired_freq >= 2300000 && desired_freq <= 2700000){
		transceiver_lo_freq = desired_freq;
		bypass_rf_mixer(1);
		max2837_set_freq(&transceiver, transceiver_lo_freq);
	}
}
 80019c8:	e010      	b.n	80019ec <tune_freq+0x80>
	else if (desired_freq >= 2300000 && desired_freq <= 2700000){
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <tune_freq+0x8c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d30c      	bcc.n	80019ec <tune_freq+0x80>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a09      	ldr	r2, [pc, #36]	; (80019fc <tune_freq+0x90>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d808      	bhi.n	80019ec <tune_freq+0x80>
		transceiver_lo_freq = desired_freq;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	613b      	str	r3, [r7, #16]
		bypass_rf_mixer(1);
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff ff20 	bl	8001824 <bypass_rf_mixer>
		max2837_set_freq(&transceiver, transceiver_lo_freq);
 80019e4:	6939      	ldr	r1, [r7, #16]
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <tune_freq+0x98>)
 80019e8:	f7ff f998 	bl	8000d1c <max2837_set_freq>
}
 80019ec:	bf00      	nop
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	00249f00 	.word	0x00249f00
 80019f8:	00231860 	.word	0x00231860
 80019fc:	002932e0 	.word	0x002932e0
 8001a00:	200001b0 	.word	0x200001b0
 8001a04:	20000308 	.word	0x20000308

08001a08 <pack_iq_samples>:

uint8_t pack_iq_samples(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
	uint8_t current_channel, i;
	static uint8_t first_read = 1;
	uint8_t vec_I[8], vec_Q[8], IQ_buf[2];
	static uint8_t pow2[] = {1, 2, 4, 8, 16, 32, 64, 128};

	current_channel = (uint8_t)HAL_GPIO_ReadPin(A_B_GPIO_Port, A_B_Pin);
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4895      	ldr	r0, [pc, #596]	; (8001c68 <pack_iq_samples+0x260>)
 8001a12:	f002 f867 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001a16:	4603      	mov	r3, r0
 8001a18:	75bb      	strb	r3, [r7, #22]
	if (first_read == 1){
 8001a1a:	4b94      	ldr	r3, [pc, #592]	; (8001c6c <pack_iq_samples+0x264>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d156      	bne.n	8001ad0 <pack_iq_samples+0xc8>
		if (current_channel == 1){		/* Reading Channel A */
 8001a22:	7dbb      	ldrb	r3, [r7, #22]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	f040 80fd 	bne.w	8001c24 <pack_iq_samples+0x21c>
			vec_I[0] = (uint8_t)HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin);
 8001a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2e:	4890      	ldr	r0, [pc, #576]	; (8001c70 <pack_iq_samples+0x268>)
 8001a30:	f002 f858 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	733b      	strb	r3, [r7, #12]
			vec_I[1] = (uint8_t)HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 8001a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3c:	488c      	ldr	r0, [pc, #560]	; (8001c70 <pack_iq_samples+0x268>)
 8001a3e:	f002 f851 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	737b      	strb	r3, [r7, #13]
			vec_I[2] = (uint8_t)HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);
 8001a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4a:	4889      	ldr	r0, [pc, #548]	; (8001c70 <pack_iq_samples+0x268>)
 8001a4c:	f002 f84a 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73bb      	strb	r3, [r7, #14]
			vec_I[3] = (uint8_t)HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);
 8001a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a58:	4885      	ldr	r0, [pc, #532]	; (8001c70 <pack_iq_samples+0x268>)
 8001a5a:	f002 f843 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73fb      	strb	r3, [r7, #15]
			vec_I[4] = (uint8_t)HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);
 8001a62:	2102      	movs	r1, #2
 8001a64:	4880      	ldr	r0, [pc, #512]	; (8001c68 <pack_iq_samples+0x260>)
 8001a66:	f002 f83d 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	743b      	strb	r3, [r7, #16]
			vec_I[5] = (uint8_t)HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	4880      	ldr	r0, [pc, #512]	; (8001c74 <pack_iq_samples+0x26c>)
 8001a72:	f002 f837 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	747b      	strb	r3, [r7, #17]
			vec_I[6] = (uint8_t)HAL_GPIO_ReadPin(D6_GPIO_Port, D6_Pin);
 8001a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7e:	487d      	ldr	r0, [pc, #500]	; (8001c74 <pack_iq_samples+0x26c>)
 8001a80:	f002 f830 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001a84:	4603      	mov	r3, r0
 8001a86:	74bb      	strb	r3, [r7, #18]
			vec_I[7] = (uint8_t)HAL_GPIO_ReadPin(D7_GPIO_Port, D7_Pin);
 8001a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a8c:	4879      	ldr	r0, [pc, #484]	; (8001c74 <pack_iq_samples+0x26c>)
 8001a8e:	f002 f829 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001a92:	4603      	mov	r3, r0
 8001a94:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++){
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
 8001a9a:	e012      	b.n	8001ac2 <pack_iq_samples+0xba>
				IQ_buf[0] = IQ_buf[0] + (vec_I[i] * pow2[i]);
 8001a9c:	783a      	ldrb	r2, [r7, #0]
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	f107 0118 	add.w	r1, r7, #24
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	4872      	ldr	r0, [pc, #456]	; (8001c78 <pack_iq_samples+0x270>)
 8001aae:	5cc3      	ldrb	r3, [r0, r3]
 8001ab0:	fb11 f303 	smulbb	r3, r1, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	703b      	strb	r3, [r7, #0]
			for(i=0;i<8;i++){
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	d9e9      	bls.n	8001a9c <pack_iq_samples+0x94>
			}
			first_read = 0;
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <pack_iq_samples+0x264>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e0a9      	b.n	8001c24 <pack_iq_samples+0x21c>
		}
		else if (current_channel == 0){	/* Reading Channel B */
		/* Discard samples if first reading is of Channel B. */
		}
	}
	else if (first_read == 0){
 8001ad0:	4b66      	ldr	r3, [pc, #408]	; (8001c6c <pack_iq_samples+0x264>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 80a5 	bne.w	8001c24 <pack_iq_samples+0x21c>
		if (current_channel == 1){		/* Reading Channel A */
 8001ada:	7dbb      	ldrb	r3, [r7, #22]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d14f      	bne.n	8001b80 <pack_iq_samples+0x178>
			vec_I[0] = (uint8_t)HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin);
 8001ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae4:	4862      	ldr	r0, [pc, #392]	; (8001c70 <pack_iq_samples+0x268>)
 8001ae6:	f001 fffd 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001aea:	4603      	mov	r3, r0
 8001aec:	733b      	strb	r3, [r7, #12]
			vec_I[1] = (uint8_t)HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 8001aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af2:	485f      	ldr	r0, [pc, #380]	; (8001c70 <pack_iq_samples+0x268>)
 8001af4:	f001 fff6 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001af8:	4603      	mov	r3, r0
 8001afa:	737b      	strb	r3, [r7, #13]
			vec_I[2] = (uint8_t)HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);
 8001afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b00:	485b      	ldr	r0, [pc, #364]	; (8001c70 <pack_iq_samples+0x268>)
 8001b02:	f001 ffef 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	73bb      	strb	r3, [r7, #14]
			vec_I[3] = (uint8_t)HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);
 8001b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b0e:	4858      	ldr	r0, [pc, #352]	; (8001c70 <pack_iq_samples+0x268>)
 8001b10:	f001 ffe8 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001b14:	4603      	mov	r3, r0
 8001b16:	73fb      	strb	r3, [r7, #15]
			vec_I[4] = (uint8_t)HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4853      	ldr	r0, [pc, #332]	; (8001c68 <pack_iq_samples+0x260>)
 8001b1c:	f001 ffe2 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001b20:	4603      	mov	r3, r0
 8001b22:	743b      	strb	r3, [r7, #16]
			vec_I[5] = (uint8_t)HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	4853      	ldr	r0, [pc, #332]	; (8001c74 <pack_iq_samples+0x26c>)
 8001b28:	f001 ffdc 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	747b      	strb	r3, [r7, #17]
			vec_I[6] = (uint8_t)HAL_GPIO_ReadPin(D6_GPIO_Port, D6_Pin);
 8001b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b34:	484f      	ldr	r0, [pc, #316]	; (8001c74 <pack_iq_samples+0x26c>)
 8001b36:	f001 ffd5 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	74bb      	strb	r3, [r7, #18]
			vec_I[7] = (uint8_t)HAL_GPIO_ReadPin(D7_GPIO_Port, D7_Pin);
 8001b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b42:	484c      	ldr	r0, [pc, #304]	; (8001c74 <pack_iq_samples+0x26c>)
 8001b44:	f001 ffce 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++){
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e012      	b.n	8001b78 <pack_iq_samples+0x170>
				IQ_buf[0] = IQ_buf[0] + (vec_I[i] * pow2[i]);
 8001b52:	783a      	ldrb	r2, [r7, #0]
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	f107 0118 	add.w	r1, r7, #24
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	4845      	ldr	r0, [pc, #276]	; (8001c78 <pack_iq_samples+0x270>)
 8001b64:	5cc3      	ldrb	r3, [r0, r3]
 8001b66:	fb11 f303 	smulbb	r3, r1, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	703b      	strb	r3, [r7, #0]
			for(i=0;i<8;i++){
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	75fb      	strb	r3, [r7, #23]
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b07      	cmp	r3, #7
 8001b7c:	d9e9      	bls.n	8001b52 <pack_iq_samples+0x14a>
 8001b7e:	e051      	b.n	8001c24 <pack_iq_samples+0x21c>
			}
		}
		else if (current_channel == 0){	/* Reading Channel B */
 8001b80:	7dbb      	ldrb	r3, [r7, #22]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d14e      	bne.n	8001c24 <pack_iq_samples+0x21c>
			vec_Q[0] = (uint8_t)HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin);
 8001b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8a:	4839      	ldr	r0, [pc, #228]	; (8001c70 <pack_iq_samples+0x268>)
 8001b8c:	f001 ffaa 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001b90:	4603      	mov	r3, r0
 8001b92:	713b      	strb	r3, [r7, #4]
			vec_Q[1] = (uint8_t)HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 8001b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b98:	4835      	ldr	r0, [pc, #212]	; (8001c70 <pack_iq_samples+0x268>)
 8001b9a:	f001 ffa3 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	717b      	strb	r3, [r7, #5]
			vec_Q[2] = (uint8_t)HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);
 8001ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba6:	4832      	ldr	r0, [pc, #200]	; (8001c70 <pack_iq_samples+0x268>)
 8001ba8:	f001 ff9c 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	71bb      	strb	r3, [r7, #6]
			vec_Q[3] = (uint8_t)HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);
 8001bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb4:	482e      	ldr	r0, [pc, #184]	; (8001c70 <pack_iq_samples+0x268>)
 8001bb6:	f001 ff95 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
			vec_Q[4] = (uint8_t)HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4829      	ldr	r0, [pc, #164]	; (8001c68 <pack_iq_samples+0x260>)
 8001bc2:	f001 ff8f 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	723b      	strb	r3, [r7, #8]
			vec_Q[5] = (uint8_t)HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	4829      	ldr	r0, [pc, #164]	; (8001c74 <pack_iq_samples+0x26c>)
 8001bce:	f001 ff89 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	727b      	strb	r3, [r7, #9]
			vec_Q[6] = (uint8_t)HAL_GPIO_ReadPin(D6_GPIO_Port, D6_Pin);
 8001bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bda:	4826      	ldr	r0, [pc, #152]	; (8001c74 <pack_iq_samples+0x26c>)
 8001bdc:	f001 ff82 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	72bb      	strb	r3, [r7, #10]
			vec_Q[7] = (uint8_t)HAL_GPIO_ReadPin(D7_GPIO_Port, D7_Pin);
 8001be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be8:	4822      	ldr	r0, [pc, #136]	; (8001c74 <pack_iq_samples+0x26c>)
 8001bea:	f001 ff7b 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	72fb      	strb	r3, [r7, #11]

			for(i=0;i<8;i++){
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
 8001bf6:	e012      	b.n	8001c1e <pack_iq_samples+0x216>
				IQ_buf[1] = IQ_buf[1] + (vec_Q[i] * pow2[i]);
 8001bf8:	787a      	ldrb	r2, [r7, #1]
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	f107 0118 	add.w	r1, r7, #24
 8001c00:	440b      	add	r3, r1
 8001c02:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	481b      	ldr	r0, [pc, #108]	; (8001c78 <pack_iq_samples+0x270>)
 8001c0a:	5cc3      	ldrb	r3, [r0, r3]
 8001c0c:	fb11 f303 	smulbb	r3, r1, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	707b      	strb	r3, [r7, #1]
			for(i=0;i<8;i++){
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	2b07      	cmp	r3, #7
 8001c22:	d9e9      	bls.n	8001bf8 <pack_iq_samples+0x1f0>
			}
		}
	}

	if (IQ_buf[0] != NULL && IQ_buf[1] != NULL){
 8001c24:	783b      	ldrb	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00d      	beq.n	8001c46 <pack_iq_samples+0x23e>
 8001c2a:	787b      	ldrb	r3, [r7, #1]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00a      	beq.n	8001c46 <pack_iq_samples+0x23e>
		CDC_Transmit_HS(IQ_buf, sizeof(IQ_buf));
 8001c30:	463b      	mov	r3, r7
 8001c32:	2102      	movs	r1, #2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f009 ff8f 	bl	800bb58 <CDC_Transmit_HS>
		IQ_buf[0] = NULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	703b      	strb	r3, [r7, #0]
		IQ_buf[1] = NULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	707b      	strb	r3, [r7, #1]
		return 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e00b      	b.n	8001c5e <pack_iq_samples+0x256>
	}
	while((uint8_t)HAL_GPIO_ReadPin(A_B_GPIO_Port, A_B_Pin) != current_channel){		
 8001c46:	bf00      	nop
 8001c48:	2101      	movs	r1, #1
 8001c4a:	4807      	ldr	r0, [pc, #28]	; (8001c68 <pack_iq_samples+0x260>)
 8001c4c:	f001 ff4a 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	7dbb      	ldrb	r3, [r7, #22]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d1f6      	bne.n	8001c48 <pack_iq_samples+0x240>
	}	/* Until the A/B pin from ADC changes, do nothing. */
	pack_iq_samples();
 8001c5a:	f7ff fed5 	bl	8001a08 <pack_iq_samples>
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021800 	.word	0x40021800
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	40021400 	.word	0x40021400
 8001c74:	40021000 	.word	0x40021000
 8001c78:	20000004 	.word	0x20000004

08001c7c <quick_test>:

void quick_test(){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	max2837_set_mode(&transceiver, MAX2837_MODE_STANDBY);
 8001c80:	2101      	movs	r1, #1
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <quick_test+0x3c>)
 8001c84:	f7fe fff7 	bl	8000c76 <max2837_set_mode>
	rffc5072_disable(&mixer);
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <quick_test+0x40>)
 8001c8a:	f7ff fd6f 	bl	800176c <rffc5072_disable>
	HAL_Delay(10);
 8001c8e:	200a      	movs	r0, #10
 8001c90:	f000 fece 	bl	8002a30 <HAL_Delay>
	tune_freq(106300000);
 8001c94:	480a      	ldr	r0, [pc, #40]	; (8001cc0 <quick_test+0x44>)
 8001c96:	f7ff fe69 	bl	800196c <tune_freq>
	max2837_set_mode(&transceiver, MAX2837_MODE_RX);
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <quick_test+0x3c>)
 8001c9e:	f7fe ffea 	bl	8000c76 <max2837_set_mode>
	rffc5072_enable(&mixer);
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <quick_test+0x40>)
 8001ca4:	f7ff fd52 	bl	800174c <rffc5072_enable>
	max1193_set_mode(MAX1193_MODE_NORMAL);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f7ff fde5 	bl	8001878 <max1193_set_mode>
	HAL_Delay(10);
 8001cae:	200a      	movs	r0, #10
 8001cb0:	f000 febe 	bl	8002a30 <HAL_Delay>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000308 	.word	0x20000308
 8001cbc:	200001b0 	.word	0x200001b0
 8001cc0:	06560260 	.word	0x06560260

08001cc4 <HAL_SPI_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	if(mixer.mixer_read_flg){
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001cce:	7a9b      	ldrb	r3, [r3, #10]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d015      	beq.n	8001d00 <HAL_SPI_TxCpltCallback+0x3c>
		if((HAL_SPI_Receive_IT(mixer.spiHandle, mixer.rxDataBuf, sizeof(mixer.rxDataBuf))) == HAL_OK){
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	4928      	ldr	r1, [pc, #160]	; (8001d7c <HAL_SPI_TxCpltCallback+0xb8>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 ff6f 	bl	8007bc0 <HAL_SPI_Receive_IT>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d026      	beq.n	8001d36 <HAL_SPI_TxCpltCallback+0x72>
		}
		else{
			mixer.mixer_read_flg = 0;
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	729a      	strb	r2, [r3, #10]
			spi_disable(mixer.CS_bank, mixer.CS_pin);
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001cf4:	8912      	ldrh	r2, [r2, #8]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fd57 	bl	80017ac <spi_disable>
 8001cfe:	e01a      	b.n	8001d36 <HAL_SPI_TxCpltCallback+0x72>
			//lcd_send_string("Mix_r_err SPI Rx");
		}
	}
	else if(mixer.mixer_write_flg){
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001d02:	7adb      	ldrb	r3, [r3, #11]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d016      	beq.n	8001d36 <HAL_SPI_TxCpltCallback+0x72>
		mixer.mixer_write_flg = 0;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	72da      	strb	r2, [r3, #11]
		mixer.regs_values[mixer.current_addr] = mixer.txData_temp;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001d10:	7c1b      	ldrb	r3, [r3, #16]
 8001d12:	4618      	mov	r0, r3
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001d16:	89d9      	ldrh	r1, [r3, #14]
 8001d18:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001d1a:	f100 0308 	add.w	r3, r0, #8
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	460a      	mov	r2, r1
 8001d24:	805a      	strh	r2, [r3, #2]
		spi_disable(mixer.CS_bank, mixer.CS_pin);
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <HAL_SPI_TxCpltCallback+0xb4>)
 8001d2c:	8912      	ldrh	r2, [r2, #8]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fd3b 	bl	80017ac <spi_disable>
	}

	if(transceiver.transceiver_write_flg){
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_SPI_TxCpltCallback+0xbc>)
 8001d38:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d017      	beq.n	8001d70 <HAL_SPI_TxCpltCallback+0xac>
		transceiver.transceiver_write_flg = 0;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_SPI_TxCpltCallback+0xbc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		transceiver.regs_values[transceiver.current_addr] = transceiver.txData_temp;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_SPI_TxCpltCallback+0xbc>)
 8001d4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_SPI_TxCpltCallback+0xbc>)
 8001d52:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_SPI_TxCpltCallback+0xbc>)
 8001d58:	f100 030c 	add.w	r3, r0, #12
 8001d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spi_disable(transceiver.CS_bank, transceiver.CS_pin);
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_SPI_TxCpltCallback+0xbc>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <HAL_SPI_TxCpltCallback+0xbc>)
 8001d66:	8912      	ldrh	r2, [r2, #8]
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fd1e 	bl	80017ac <spi_disable>
	}
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200001b0 	.word	0x200001b0
 8001d7c:	200001bc 	.word	0x200001bc
 8001d80:	20000308 	.word	0x20000308

08001d84 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	if(mixer.mixer_read_flg){
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_SPI_RxCpltCallback+0x54>)
 8001d8e:	7a9b      	ldrb	r3, [r3, #10]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01c      	beq.n	8001dce <HAL_SPI_RxCpltCallback+0x4a>
		mixer.regs_values[mixer.current_addr] = (mixer.rxDataBuf[0] << 8) | mixer.rxDataBuf[1];
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_SPI_RxCpltCallback+0x54>)
 8001d96:	7b1b      	ldrb	r3, [r3, #12]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_SPI_RxCpltCallback+0x54>)
 8001d9e:	7b5b      	ldrb	r3, [r3, #13]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_SPI_RxCpltCallback+0x54>)
 8001da8:	7c1b      	ldrb	r3, [r3, #16]
 8001daa:	b291      	uxth	r1, r2
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_SPI_RxCpltCallback+0x54>)
 8001dae:	3308      	adds	r3, #8
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	460a      	mov	r2, r1
 8001db6:	805a      	strh	r2, [r3, #2]
		mixer.mixer_read_flg = 0;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_SPI_RxCpltCallback+0x54>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	729a      	strb	r2, [r3, #10]
		spi_disable(mixer.CS_bank, mixer.CS_pin);
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_SPI_RxCpltCallback+0x54>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <HAL_SPI_RxCpltCallback+0x54>)
 8001dc4:	8912      	ldrh	r2, [r2, #8]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fcef 	bl	80017ac <spi_disable>
	}
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200001b0 	.word	0x200001b0

08001ddc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if(transceiver.transceiver_read_flg){
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001de6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01c      	beq.n	8001e28 <HAL_SPI_TxRxCpltCallback+0x4c>
		transceiver.transceiver_read_flg = 0;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		transceiver.regs_values[transceiver.current_addr] = (transceiver.rxDataBuf[1] << 2) | transceiver.rxDataBuf[2];
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001df8:	7adb      	ldrb	r3, [r3, #11]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	b21a      	sxth	r2, r3
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001e00:	7b1b      	ldrb	r3, [r3, #12]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001e0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e0e:	b291      	uxth	r1, r2
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001e12:	330c      	adds	r3, #12
 8001e14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spi_disable(transceiver.CS_bank, transceiver.CS_pin);
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001e1e:	8912      	ldrh	r2, [r2, #8]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fcc2 	bl	80017ac <spi_disable>
	}
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000308 	.word	0x20000308

08001e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e3a:	f000 fd9c 	bl	8002976 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e3e:	f000 f853 	bl	8001ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e42:	f000 f9f3 	bl	800222c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e46:	f000 f975 	bl	8002134 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001e4a:	f009 fdc7 	bl	800b9dc <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001e4e:	f000 f931 	bl	80020b4 <MX_I2C1_Init>
  MX_SPI4_Init();
 8001e52:	f000 f9ad 	bl	80021b0 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001e56:	f000 f8db 	bl	8002010 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  gpio_init();
 8001e5a:	f7ff fd5b 	bl	8001914 <gpio_init>
  genclk_init(&clockg, &hi2c1);
 8001e5e:	491a      	ldr	r1, [pc, #104]	; (8001ec8 <main+0x94>)
 8001e60:	481a      	ldr	r0, [pc, #104]	; (8001ecc <main+0x98>)
 8001e62:	f7fe fb59 	bl	8000518 <genclk_init>
  max2837_init(&transceiver, &hspi1, SPI1_CS1_GPIO_Port, SPI1_CS1_Pin, Trx_Enable_GPIO_Port, Trx_Enable_Pin, Trx_Rx_Enable_Pin);
 8001e66:	2301      	movs	r3, #1
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <main+0x9c>)
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2320      	movs	r3, #32
 8001e74:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <main+0xa0>)
 8001e76:	4918      	ldr	r1, [pc, #96]	; (8001ed8 <main+0xa4>)
 8001e78:	4818      	ldr	r0, [pc, #96]	; (8001edc <main+0xa8>)
 8001e7a:	f7fe fd9f 	bl	80009bc <max2837_init>
  rffc5072_init(&mixer, &hspi1, SPI1_CS0_GPIO_Port, SPI1_CS0_Pin);
 8001e7e:	2308      	movs	r3, #8
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <main+0xac>)
 8001e82:	4915      	ldr	r1, [pc, #84]	; (8001ed8 <main+0xa4>)
 8001e84:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <main+0xb0>)
 8001e86:	f7ff f8c9 	bl	800101c <rffc5072_init>
  //lcd_init();
  genclk_fod_settings(&clockg, 1, 24);
 8001e8a:	2218      	movs	r2, #24
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	480f      	ldr	r0, [pc, #60]	; (8001ecc <main+0x98>)
 8001e90:	f7fe fc9a 	bl	80007c8 <genclk_fod_settings>
  HAL_Delay(200);
 8001e94:	20c8      	movs	r0, #200	; 0xc8
 8001e96:	f000 fdcb 	bl	8002a30 <HAL_Delay>
  genclk_fod_settings(&clockg, 2, 43);
 8001e9a:	222b      	movs	r2, #43	; 0x2b
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	480b      	ldr	r0, [pc, #44]	; (8001ecc <main+0x98>)
 8001ea0:	f7fe fc92 	bl	80007c8 <genclk_fod_settings>
  HAL_Delay(200);
 8001ea4:	20c8      	movs	r0, #200	; 0xc8
 8001ea6:	f000 fdc3 	bl	8002a30 <HAL_Delay>
  genclk_fod_settings(&clockg, 3, 38);
 8001eaa:	2226      	movs	r2, #38	; 0x26
 8001eac:	2103      	movs	r1, #3
 8001eae:	4807      	ldr	r0, [pc, #28]	; (8001ecc <main+0x98>)
 8001eb0:	f7fe fc8a 	bl	80007c8 <genclk_fod_settings>
  HAL_Delay(200);
 8001eb4:	20c8      	movs	r0, #200	; 0xc8
 8001eb6:	f000 fdbb 	bl	8002a30 <HAL_Delay>
  genclk_fod_settings(&clockg, 4, 49);
 8001eba:	2231      	movs	r2, #49	; 0x31
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4803      	ldr	r0, [pc, #12]	; (8001ecc <main+0x98>)
 8001ec0:	f7fe fc82 	bl	80007c8 <genclk_fod_settings>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <main+0x90>
 8001ec6:	bf00      	nop
 8001ec8:	20000208 	.word	0x20000208
 8001ecc:	20000368 	.word	0x20000368
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	20000390 	.word	0x20000390
 8001edc:	20000308 	.word	0x20000308
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	200001b0 	.word	0x200001b0

08001ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0b4      	sub	sp, #208	; 0xd0
 8001eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ef2:	2230      	movs	r2, #48	; 0x30
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f00a fad4 	bl	800c4a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001efc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f00a fac5 	bl	800c4a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <SystemClock_Config+0x120>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <SystemClock_Config+0x120>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b38      	ldr	r3, [pc, #224]	; (8002008 <SystemClock_Config+0x120>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <SystemClock_Config+0x124>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a35      	ldr	r2, [pc, #212]	; (800200c <SystemClock_Config+0x124>)
 8001f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b33      	ldr	r3, [pc, #204]	; (800200c <SystemClock_Config+0x124>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f66:	2319      	movs	r3, #25
 8001f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001f6c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f74:	2302      	movs	r3, #2
 8001f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f7a:	2309      	movs	r3, #9
 8001f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f80:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 fd45 	bl	8006a14 <HAL_RCC_OscConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001f90:	f000 fabe 	bl	8002510 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f94:	f004 fcee 	bl	8006974 <HAL_PWREx_EnableOverDrive>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001f9e:	f000 fab7 	bl	8002510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa2:	230f      	movs	r3, #15
 8001fa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001fc4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001fc8:	2107      	movs	r1, #7
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 ffc6 	bl	8006f5c <HAL_RCC_ClockConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001fd6:	f000 fa9b 	bl	8002510 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
 8001fda:	f44f 1301 	mov.w	r3, #2113536	; 0x204000
 8001fde:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f005 f962 	bl	80072b8 <HAL_RCCEx_PeriphCLKConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001ffa:	f000 fa89 	bl	8002510 <Error_Handler>
  }
}
 8001ffe:	bf00      	nop
 8002000:	37d0      	adds	r7, #208	; 0xd0
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40007000 	.word	0x40007000

08002010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002016:	463b      	mov	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002022:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <MX_ADC1_Init+0x98>)
 8002024:	4a21      	ldr	r2, [pc, #132]	; (80020ac <MX_ADC1_Init+0x9c>)
 8002026:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <MX_ADC1_Init+0x98>)
 800202a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800202e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <MX_ADC1_Init+0x98>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <MX_ADC1_Init+0x98>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <MX_ADC1_Init+0x98>)
 800203e:	2200      	movs	r2, #0
 8002040:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <MX_ADC1_Init+0x98>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <MX_ADC1_Init+0x98>)
 800204c:	2200      	movs	r2, #0
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <MX_ADC1_Init+0x98>)
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <MX_ADC1_Init+0xa0>)
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <MX_ADC1_Init+0x98>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <MX_ADC1_Init+0x98>)
 800205e:	2201      	movs	r2, #1
 8002060:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_ADC1_Init+0x98>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MX_ADC1_Init+0x98>)
 800206c:	2201      	movs	r2, #1
 800206e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <MX_ADC1_Init+0x98>)
 8002072:	f000 fd01 	bl	8002a78 <HAL_ADC_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800207c:	f000 fa48 	bl	8002510 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002080:	230c      	movs	r3, #12
 8002082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002084:	2301      	movs	r3, #1
 8002086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_ADC1_Init+0x98>)
 8002092:	f000 fffb 	bl	800308c <HAL_ADC_ConfigChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800209c:	f000 fa38 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000258 	.word	0x20000258
 80020ac:	40012000 	.word	0x40012000
 80020b0:	0f000001 	.word	0x0f000001

080020b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <MX_I2C1_Init+0x74>)
 80020ba:	4a1c      	ldr	r2, [pc, #112]	; (800212c <MX_I2C1_Init+0x78>)
 80020bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_I2C1_Init+0x74>)
 80020c0:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <MX_I2C1_Init+0x7c>)
 80020c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <MX_I2C1_Init+0x74>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_I2C1_Init+0x74>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_I2C1_Init+0x74>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_I2C1_Init+0x74>)
 80020d8:	2200      	movs	r2, #0
 80020da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_I2C1_Init+0x74>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_I2C1_Init+0x74>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_I2C1_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ee:	480e      	ldr	r0, [pc, #56]	; (8002128 <MX_I2C1_Init+0x74>)
 80020f0:	f001 fd2a 	bl	8003b48 <HAL_I2C_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020fa:	f000 fa09 	bl	8002510 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020fe:	2100      	movs	r1, #0
 8002100:	4809      	ldr	r0, [pc, #36]	; (8002128 <MX_I2C1_Init+0x74>)
 8002102:	f003 f9d5 	bl	80054b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800210c:	f000 fa00 	bl	8002510 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002110:	2100      	movs	r1, #0
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_I2C1_Init+0x74>)
 8002114:	f003 fa17 	bl	8005546 <HAL_I2CEx_ConfigDigitalFilter>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800211e:	f000 f9f7 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000208 	.word	0x20000208
 800212c:	40005400 	.word	0x40005400
 8002130:	20404768 	.word	0x20404768

08002134 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <MX_SPI1_Init+0x74>)
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <MX_SPI1_Init+0x78>)
 800213c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_SPI1_Init+0x74>)
 8002140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002144:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <MX_SPI1_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <MX_SPI1_Init+0x74>)
 800214e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002152:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_SPI1_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <MX_SPI1_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_SPI1_Init+0x74>)
 8002162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002166:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_SPI1_Init+0x74>)
 800216a:	2228      	movs	r2, #40	; 0x28
 800216c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_SPI1_Init+0x74>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_SPI1_Init+0x74>)
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <MX_SPI1_Init+0x74>)
 800217c:	2200      	movs	r2, #0
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_SPI1_Init+0x74>)
 8002182:	2207      	movs	r2, #7
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MX_SPI1_Init+0x74>)
 8002188:	2200      	movs	r2, #0
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_SPI1_Init+0x74>)
 800218e:	2200      	movs	r2, #0
 8002190:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_SPI1_Init+0x74>)
 8002194:	f005 fbda 	bl	800794c <HAL_SPI_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800219e:	f000 f9b7 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000390 	.word	0x20000390
 80021ac:	40013000 	.word	0x40013000

080021b0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <MX_SPI4_Init+0x74>)
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <MX_SPI4_Init+0x78>)
 80021b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <MX_SPI4_Init+0x74>)
 80021bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021c0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <MX_SPI4_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <MX_SPI4_Init+0x74>)
 80021ca:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80021ce:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <MX_SPI4_Init+0x74>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <MX_SPI4_Init+0x74>)
 80021d8:	2200      	movs	r2, #0
 80021da:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_SPI4_Init+0x74>)
 80021de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_SPI4_Init+0x74>)
 80021e6:	2208      	movs	r2, #8
 80021e8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_SPI4_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_SPI4_Init+0x74>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_SPI4_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_SPI4_Init+0x74>)
 80021fe:	2207      	movs	r2, #7
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_SPI4_Init+0x74>)
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_SPI4_Init+0x74>)
 800220a:	2200      	movs	r2, #0
 800220c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_SPI4_Init+0x74>)
 8002210:	f005 fb9c 	bl	800794c <HAL_SPI_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800221a:	f000 f979 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200002a4 	.word	0x200002a4
 8002228:	40013400 	.word	0x40013400

0800222c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08e      	sub	sp, #56	; 0x38
 8002230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002242:	4bab      	ldr	r3, [pc, #684]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4aaa      	ldr	r2, [pc, #680]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002248:	f043 0310 	orr.w	r3, r3, #16
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4ba8      	ldr	r3, [pc, #672]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225a:	4ba5      	ldr	r3, [pc, #660]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4aa4      	ldr	r2, [pc, #656]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4ba2      	ldr	r3, [pc, #648]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002272:	4b9f      	ldr	r3, [pc, #636]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a9e      	ldr	r2, [pc, #632]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002278:	f043 0320 	orr.w	r3, r3, #32
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b9c      	ldr	r3, [pc, #624]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800228a:	4b99      	ldr	r3, [pc, #612]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a98      	ldr	r2, [pc, #608]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b96      	ldr	r3, [pc, #600]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	4b93      	ldr	r3, [pc, #588]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a92      	ldr	r2, [pc, #584]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b90      	ldr	r3, [pc, #576]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	4b8d      	ldr	r3, [pc, #564]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a8c      	ldr	r2, [pc, #560]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b8a      	ldr	r3, [pc, #552]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022d2:	4b87      	ldr	r3, [pc, #540]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a86      	ldr	r2, [pc, #536]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b84      	ldr	r3, [pc, #528]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ea:	4b81      	ldr	r3, [pc, #516]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a80      	ldr	r2, [pc, #512]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b7e      	ldr	r3, [pc, #504]	; (80024f0 <MX_GPIO_Init+0x2c4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|RESETX_Pin|Rx_Mix_Bypass_Pin|Rx_Mix_Pin
 8002302:	2200      	movs	r2, #0
 8002304:	f64f 410b 	movw	r1, #64523	; 0xfc0b
 8002308:	487a      	ldr	r0, [pc, #488]	; (80024f4 <MX_GPIO_Init+0x2c8>)
 800230a:	f001 fc03 	bl	8003b14 <HAL_GPIO_WritePin>
                          |Rx_Amp_Bypass_Pin|Rx_Amp_Pin|Rx_Amp_Pwr_Pin|GPIO_PIN_0
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	2110      	movs	r1, #16
 8002312:	4878      	ldr	r0, [pc, #480]	; (80024f4 <MX_GPIO_Init+0x2c8>)
 8002314:	f001 fbfe 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8002318:	2200      	movs	r2, #0
 800231a:	f64f 71db 	movw	r1, #65499	; 0xffdb
 800231e:	4876      	ldr	r0, [pc, #472]	; (80024f8 <MX_GPIO_Init+0x2cc>)
 8002320:	f001 fbf8 	bl	8003b14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002324:	2200      	movs	r2, #0
 8002326:	f640 71ff 	movw	r1, #4095	; 0xfff
 800232a:	4874      	ldr	r0, [pc, #464]	; (80024fc <MX_GPIO_Init+0x2d0>)
 800232c:	f001 fbf2 	bl	8003b14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|PD1_adc_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002330:	2200      	movs	r2, #0
 8002332:	f649 7117 	movw	r1, #40727	; 0x9f17
 8002336:	4872      	ldr	r0, [pc, #456]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002338:	f001 fbec 	bl	8003b14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin, GPIO_PIN_SET);
 800233c:	2201      	movs	r2, #1
 800233e:	2108      	movs	r1, #8
 8002340:	486f      	ldr	r0, [pc, #444]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002342:	f001 fbe7 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS1_GPIO_Port, SPI1_CS1_Pin, GPIO_PIN_SET);
 8002346:	2201      	movs	r2, #1
 8002348:	2120      	movs	r1, #32
 800234a:	486b      	ldr	r0, [pc, #428]	; (80024f8 <MX_GPIO_Init+0x2cc>)
 800234c:	f001 fbe2 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Trx_Rx_Enable_Pin|Trx_Enable_Pin|PD0_adc_Pin|Filt_Bypass_Pin
 8002350:	2200      	movs	r2, #0
 8002352:	f643 7137 	movw	r1, #16183	; 0x3f37
 8002356:	486b      	ldr	r0, [pc, #428]	; (8002504 <MX_GPIO_Init+0x2d8>)
 8002358:	f001 fbdc 	bl	8003b14 <HAL_GPIO_WritePin>
                          |Filtro_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800235c:	2200      	movs	r2, #0
 800235e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002362:	4869      	ldr	r0, [pc, #420]	; (8002508 <MX_GPIO_Init+0x2dc>)
 8002364:	f001 fbd6 	bl	8003b14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002368:	2200      	movs	r2, #0
 800236a:	f64f 713c 	movw	r1, #65340	; 0xff3c
 800236e:	4867      	ldr	r0, [pc, #412]	; (800250c <MX_GPIO_Init+0x2e0>)
 8002370:	f001 fbd0 	bl	8003b14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 RESETX_Pin Rx_Mix_Bypass_Pin Rx_Mix_Pin
                           Rx_Amp_Bypass_Pin Rx_Amp_Pin Rx_Amp_Pwr_Pin PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|RESETX_Pin|Rx_Mix_Bypass_Pin|Rx_Mix_Pin
 8002374:	f64f 430b 	movw	r3, #64523	; 0xfc0b
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rx_Amp_Bypass_Pin|Rx_Amp_Pin|Rx_Amp_Pwr_Pin|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	2301      	movs	r3, #1
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238a:	4619      	mov	r1, r3
 800238c:	4859      	ldr	r0, [pc, #356]	; (80024f4 <MX_GPIO_Init+0x2c8>)
 800238e:	f001 fa0d 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8002392:	2310      	movs	r3, #16
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	2301      	movs	r3, #1
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a6:	4619      	mov	r1, r3
 80023a8:	4852      	ldr	r0, [pc, #328]	; (80024f4 <MX_GPIO_Init+0x2c8>)
 80023aa:	f001 f9ff 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC3 PC4 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80023ae:	f64f 73db 	movw	r3, #65499	; 0xffdb
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c4:	4619      	mov	r1, r3
 80023c6:	484c      	ldr	r0, [pc, #304]	; (80024f8 <MX_GPIO_Init+0x2cc>)
 80023c8:	f001 f9f0 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PD1_adc_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80023cc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|PD1_adc_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	4619      	mov	r1, r3
 80023e4:	4845      	ldr	r0, [pc, #276]	; (80024fc <MX_GPIO_Init+0x2d0>)
 80023e6:	f001 f9e1 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80023ea:	f649 7317 	movw	r3, #40727	; 0x9f17
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002400:	4619      	mov	r1, r3
 8002402:	483f      	ldr	r0, [pc, #252]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002404:	f001 f9d2 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS0_Pin */
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
 8002408:	2308      	movs	r3, #8
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	2301      	movs	r3, #1
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS0_GPIO_Port, &GPIO_InitStruct);
 8002418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241c:	4619      	mov	r1, r3
 800241e:	4838      	ldr	r0, [pc, #224]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002420:	f001 f9c4 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS1_Pin */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin;
 8002424:	2320      	movs	r3, #32
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002430:	2303      	movs	r3, #3
 8002432:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS1_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	4619      	mov	r1, r3
 800243a:	482f      	ldr	r0, [pc, #188]	; (80024f8 <MX_GPIO_Init+0x2cc>)
 800243c:	f001 f9b6 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Trx_Rx_Enable_Pin Trx_Enable_Pin PD0_adc_Pin Filt_Bypass_Pin
                           Filtro_Pin PB12 PB13 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = Trx_Rx_Enable_Pin|Trx_Enable_Pin|PD0_adc_Pin|Filt_Bypass_Pin
 8002440:	f643 7337 	movw	r3, #16183	; 0x3f37
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
                          |Filtro_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	4619      	mov	r1, r3
 8002458:	482a      	ldr	r0, [pc, #168]	; (8002504 <MX_GPIO_Init+0x2d8>)
 800245a:	f001 f9a7 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin;
 800245e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	2300      	movs	r3, #0
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800246c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002470:	4619      	mov	r1, r3
 8002472:	4822      	ldr	r0, [pc, #136]	; (80024fc <MX_GPIO_Init+0x2d0>)
 8002474:	f001 f99a 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : A_B_Pin D4_Pin */
  GPIO_InitStruct.Pin = A_B_Pin|D4_Pin;
 8002478:	2303      	movs	r3, #3
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247c:	2300      	movs	r3, #0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002488:	4619      	mov	r1, r3
 800248a:	4820      	ldr	r0, [pc, #128]	; (800250c <MX_GPIO_Init+0x2e0>)
 800248c:	f001 f98e 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin|D7_Pin;
 8002490:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002496:	2300      	movs	r3, #0
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a2:	4619      	mov	r1, r3
 80024a4:	4813      	ldr	r0, [pc, #76]	; (80024f4 <MX_GPIO_Init+0x2c8>)
 80024a6:	f001 f981 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b0:	2301      	movs	r3, #1
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c0:	4619      	mov	r1, r3
 80024c2:	4811      	ldr	r0, [pc, #68]	; (8002508 <MX_GPIO_Init+0x2dc>)
 80024c4:	f001 f972 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG4 PG5
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80024c8:	f64f 733c 	movw	r3, #65340	; 0xff3c
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ce:	2301      	movs	r3, #1
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024de:	4619      	mov	r1, r3
 80024e0:	480a      	ldr	r0, [pc, #40]	; (800250c <MX_GPIO_Init+0x2e0>)
 80024e2:	f001 f963 	bl	80037ac <HAL_GPIO_Init>

}
 80024e6:	bf00      	nop
 80024e8:	3738      	adds	r7, #56	; 0x38
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40020800 	.word	0x40020800
 80024fc:	40021400 	.word	0x40021400
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020c00 	.word	0x40020c00
 800250c:	40021800 	.word	0x40021800

08002510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002514:	b672      	cpsid	i
}
 8002516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002518:	e7fe      	b.n	8002518 <Error_Handler+0x8>
	...

0800251c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_MspInit+0x50>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a11      	ldr	r2, [pc, #68]	; (800256c <HAL_MspInit+0x50>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_MspInit+0x50>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_MspInit+0x50>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a0b      	ldr	r2, [pc, #44]	; (800256c <HAL_MspInit+0x50>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_MspInit+0x50>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2005      	movs	r0, #5
 8002558:	f001 f8c1 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800255c:	2005      	movs	r0, #5
 800255e:	f001 f8da 	bl	8003716 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800

08002570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <HAL_ADC_MspInit+0x84>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d12b      	bne.n	80025ea <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_ADC_MspInit+0x88>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_ADC_MspInit+0x88>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_ADC_MspInit+0x88>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_ADC_MspInit+0x88>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <HAL_ADC_MspInit+0x88>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_ADC_MspInit+0x88>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 80025c2:	2304      	movs	r3, #4
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c6:	2303      	movs	r3, #3
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	4619      	mov	r1, r3
 80025d4:	4809      	ldr	r0, [pc, #36]	; (80025fc <HAL_ADC_MspInit+0x8c>)
 80025d6:	f001 f8e9 	bl	80037ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2012      	movs	r0, #18
 80025e0:	f001 f87d 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80025e4:	2012      	movs	r0, #18
 80025e6:	f001 f896 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	; 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40012000 	.word	0x40012000
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020800 	.word	0x40020800

08002600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <HAL_I2C_MspInit+0x9c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d137      	bne.n	8002692 <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <HAL_I2C_MspInit+0xa0>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <HAL_I2C_MspInit+0xa0>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <HAL_I2C_MspInit+0xa0>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800263a:	23c0      	movs	r3, #192	; 0xc0
 800263c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800263e:	2312      	movs	r3, #18
 8002640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002642:	2301      	movs	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002646:	2303      	movs	r3, #3
 8002648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800264a:	2304      	movs	r3, #4
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	4813      	ldr	r0, [pc, #76]	; (80026a4 <HAL_I2C_MspInit+0xa4>)
 8002656:	f001 f8a9 	bl	80037ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_I2C_MspInit+0xa0>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <HAL_I2C_MspInit+0xa0>)
 8002660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_I2C_MspInit+0xa0>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	201f      	movs	r0, #31
 8002678:	f001 f831 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800267c:	201f      	movs	r0, #31
 800267e:	f001 f84a 	bl	8003716 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	2020      	movs	r0, #32
 8002688:	f001 f829 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800268c:	2020      	movs	r0, #32
 800268e:	f001 f842 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	; 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40005400 	.word	0x40005400
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020400 	.word	0x40020400

080026a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a32      	ldr	r2, [pc, #200]	; (8002790 <HAL_SPI_MspInit+0xe8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d130      	bne.n	800272c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ca:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_SPI_MspInit+0xec>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a31      	ldr	r2, [pc, #196]	; (8002794 <HAL_SPI_MspInit+0xec>)
 80026d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_SPI_MspInit+0xec>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <HAL_SPI_MspInit+0xec>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a2b      	ldr	r2, [pc, #172]	; (8002794 <HAL_SPI_MspInit+0xec>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b29      	ldr	r3, [pc, #164]	; (8002794 <HAL_SPI_MspInit+0xec>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026fa:	23e0      	movs	r3, #224	; 0xe0
 80026fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800270a:	2305      	movs	r3, #5
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	4820      	ldr	r0, [pc, #128]	; (8002798 <HAL_SPI_MspInit+0xf0>)
 8002716:	f001 f849 	bl	80037ac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	2023      	movs	r0, #35	; 0x23
 8002720:	f000 ffdd 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002724:	2023      	movs	r0, #35	; 0x23
 8002726:	f000 fff6 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800272a:	e02c      	b.n	8002786 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI4)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1a      	ldr	r2, [pc, #104]	; (800279c <HAL_SPI_MspInit+0xf4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d127      	bne.n	8002786 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_SPI_MspInit+0xec>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a16      	ldr	r2, [pc, #88]	; (8002794 <HAL_SPI_MspInit+0xec>)
 800273c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_SPI_MspInit+0xec>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_SPI_MspInit+0xec>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <HAL_SPI_MspInit+0xec>)
 8002754:	f043 0310 	orr.w	r3, r3, #16
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_SPI_MspInit+0xec>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002766:	2364      	movs	r3, #100	; 0x64
 8002768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002776:	2305      	movs	r3, #5
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	4807      	ldr	r0, [pc, #28]	; (80027a0 <HAL_SPI_MspInit+0xf8>)
 8002782:	f001 f813 	bl	80037ac <HAL_GPIO_Init>
}
 8002786:	bf00      	nop
 8002788:	3730      	adds	r7, #48	; 0x30
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40013000 	.word	0x40013000
 8002794:	40023800 	.word	0x40023800
 8002798:	40020000 	.word	0x40020000
 800279c:	40013400 	.word	0x40013400
 80027a0:	40021000 	.word	0x40021000

080027a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <NMI_Handler+0x4>

080027aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ae:	e7fe      	b.n	80027ae <HardFault_Handler+0x4>

080027b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <MemManage_Handler+0x4>

080027b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <BusFault_Handler+0x4>

080027bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <UsageFault_Handler+0x4>

080027c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f0:	f000 f8fe 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <ADC_IRQHandler+0x10>)
 800280e:	f000 fad0 	bl	8002db2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000258 	.word	0x20000258

0800281c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <I2C1_EV_IRQHandler+0x10>)
 8002822:	f001 fab5 	bl	8003d90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000208 	.word	0x20000208

08002830 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <I2C1_ER_IRQHandler+0x10>)
 8002836:	f001 fac5 	bl	8003dc4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000208 	.word	0x20000208

08002844 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <SPI1_IRQHandler+0x10>)
 800284a:	f005 fb19 	bl	8007e80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000390 	.word	0x20000390

08002858 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 800285e:	f003 f804 	bl	800586a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200018c8 	.word	0x200018c8

0800286c <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8002872:	f002 fffa 	bl	800586a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200018c8 	.word	0x200018c8

08002880 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <OTG_HS_IRQHandler+0x10>)
 8002886:	f002 fff0 	bl	800586a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200018c8 	.word	0x200018c8

08002894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <_sbrk+0x5c>)
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <_sbrk+0x60>)
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <_sbrk+0x64>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <_sbrk+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d207      	bcs.n	80028d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c4:	f009 fdb4 	bl	800c430 <__errno>
 80028c8:	4603      	mov	r3, r0
 80028ca:	220c      	movs	r2, #12
 80028cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e009      	b.n	80028e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <_sbrk+0x64>)
 80028e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20040000 	.word	0x20040000
 80028f4:	00000400 	.word	0x00000400
 80028f8:	200001a0 	.word	0x200001a0
 80028fc:	20001ce0 	.word	0x20001ce0

08002900 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <SystemInit+0x20>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <SystemInit+0x20>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800295c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002928:	480d      	ldr	r0, [pc, #52]	; (8002960 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800292a:	490e      	ldr	r1, [pc, #56]	; (8002964 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800292c:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0b      	ldr	r2, [pc, #44]	; (800296c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002940:	4c0b      	ldr	r4, [pc, #44]	; (8002970 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800294e:	f7ff ffd7 	bl	8002900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002952:	f009 fd73 	bl	800c43c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002956:	f7ff fa6d 	bl	8001e34 <main>
  bx  lr    
 800295a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800295c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8002968:	0800c784 	.word	0x0800c784
  ldr r2, =_sbss
 800296c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8002970:	20001cdc 	.word	0x20001cdc

08002974 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <CAN1_RX0_IRQHandler>

08002976 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297a:	2003      	movs	r0, #3
 800297c:	f000 fea4 	bl	80036c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002980:	2000      	movs	r0, #0
 8002982:	f000 f805 	bl	8002990 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002986:	f7ff fdc9 	bl	800251c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_InitTick+0x54>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x58>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 febf 	bl	8003732 <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00e      	b.n	80029dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d80a      	bhi.n	80029da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f000 fe87 	bl	80036de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <HAL_InitTick+0x5c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000000c 	.word	0x2000000c
 80029e8:	20000014 	.word	0x20000014
 80029ec:	20000010 	.word	0x20000010

080029f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_IncTick+0x20>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_IncTick+0x24>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_IncTick+0x24>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000014 	.word	0x20000014
 8002a14:	200003f4 	.word	0x200003f4

08002a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_GetTick+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	200003f4 	.word	0x200003f4

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff ffee 	bl	8002a18 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffde 	bl	8002a18 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000014 	.word	0x20000014

08002a78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e031      	b.n	8002af2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fd6a 	bl	8002570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_ADC_Init+0x84>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	f043 0202 	orr.w	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fc2a 	bl	8003320 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae2:	e001      	b.n	8002ae8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	ffffeefd 	.word	0xffffeefd

08002b00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Start+0x1a>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0ad      	b.n	8002c76 <HAL_ADC_Start+0x176>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d018      	beq.n	8002b62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_ADC_Start+0x184>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a50      	ldr	r2, [pc, #320]	; (8002c88 <HAL_ADC_Start+0x188>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0c9a      	lsrs	r2, r3, #18
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b54:	e002      	b.n	8002b5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f9      	bne.n	8002b56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d175      	bne.n	8002c5c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b74:	4b45      	ldr	r3, [pc, #276]	; (8002c8c <HAL_ADC_Start+0x18c>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002baa:	d106      	bne.n	8002bba <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	f023 0206 	bic.w	r2, r3, #6
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bd0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_ADC_Start+0x190>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d143      	bne.n	8002c74 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e03a      	b.n	8002c74 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <HAL_ADC_Start+0x194>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d10e      	bne.n	8002c26 <HAL_ADC_Start+0x126>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c24:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_ADC_Start+0x190>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d120      	bne.n	8002c74 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_ADC_Start+0x198>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d11b      	bne.n	8002c74 <HAL_ADC_Start+0x174>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d114      	bne.n	8002c74 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	e00b      	b.n	8002c74 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	2000000c 	.word	0x2000000c
 8002c88:	431bde83 	.word	0x431bde83
 8002c8c:	fffff8fe 	.word	0xfffff8fe
 8002c90:	40012300 	.word	0x40012300
 8002c94:	40012000 	.word	0x40012000
 8002c98:	40012200 	.word	0x40012200

08002c9c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb8:	d113      	bne.n	8002ce2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f043 0220 	orr.w	r2, r3, #32
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e063      	b.n	8002daa <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002ce2:	f7ff fe99 	bl	8002a18 <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ce8:	e021      	b.n	8002d2e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d01d      	beq.n	8002d2e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_ADC_PollForConversion+0x6c>
 8002cf8:	f7ff fe8e 	bl	8002a18 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d212      	bcs.n	8002d2e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d00b      	beq.n	8002d2e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f043 0204 	orr.w	r2, r3, #4
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e03d      	b.n	8002daa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d1d6      	bne.n	8002cea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0212 	mvn.w	r2, #18
 8002d44:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d123      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11f      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d111      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d049      	beq.n	8002e88 <HAL_ADC_IRQHandler+0xd6>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d046      	beq.n	8002e88 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d12b      	bne.n	8002e78 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d127      	bne.n	8002e78 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d119      	bne.n	8002e78 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0220 	bic.w	r2, r2, #32
 8002e52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8e8 	bl	800304e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f06f 0212 	mvn.w	r2, #18
 8002e86:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b80      	cmp	r3, #128	; 0x80
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d057      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x1b8>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d054      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d139      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d12b      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d124      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11d      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d119      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f34:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d105      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fada 	bl	8003514 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 020c 	mvn.w	r2, #12
 8002f68:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d017      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x21a>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d014      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10d      	bne.n	8002fcc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f850 	bl	8003062 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f06f 0201 	mvn.w	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	bf0c      	ite	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	2300      	movne	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ff0:	bf0c      	ite	eq
 8002ff2:	2301      	moveq	r3, #1
 8002ff4:	2300      	movne	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_ADC_IRQHandler+0x27a>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d012      	beq.n	800302c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f043 0202 	orr.w	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f06f 0220 	mvn.w	r2, #32
 800301a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f82a 	bl	8003076 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0220 	mvn.w	r2, #32
 800302a:	601a      	str	r2, [r3, #0]
  }
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x1c>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e12a      	b.n	80032fe <HAL_ADC_ConfigChannel+0x272>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	d93a      	bls.n	800312e <HAL_ADC_ConfigChannel+0xa2>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030c0:	d035      	beq.n	800312e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68d9      	ldr	r1, [r3, #12]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	3b1e      	subs	r3, #30
 80030d8:	2207      	movs	r2, #7
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	400a      	ands	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a87      	ldr	r2, [pc, #540]	; (800330c <HAL_ADC_ConfigChannel+0x280>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10a      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68d9      	ldr	r1, [r3, #12]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	061a      	lsls	r2, r3, #24
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003106:	e035      	b.n	8003174 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68d9      	ldr	r1, [r3, #12]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	4603      	mov	r3, r0
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4403      	add	r3, r0
 8003120:	3b1e      	subs	r3, #30
 8003122:	409a      	lsls	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800312c:	e022      	b.n	8003174 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6919      	ldr	r1, [r3, #16]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	2207      	movs	r2, #7
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43da      	mvns	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	400a      	ands	r2, r1
 8003150:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6919      	ldr	r1, [r3, #16]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	4618      	mov	r0, r3
 8003164:	4603      	mov	r3, r0
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4403      	add	r3, r0
 800316a:	409a      	lsls	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b06      	cmp	r3, #6
 800317a:	d824      	bhi.n	80031c6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	3b05      	subs	r3, #5
 800318e:	221f      	movs	r2, #31
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43da      	mvns	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	400a      	ands	r2, r1
 800319c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4618      	mov	r0, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	3b05      	subs	r3, #5
 80031b8:	fa00 f203 	lsl.w	r2, r0, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	635a      	str	r2, [r3, #52]	; 0x34
 80031c4:	e04c      	b.n	8003260 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d824      	bhi.n	8003218 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	3b23      	subs	r3, #35	; 0x23
 80031e0:	221f      	movs	r2, #31
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	400a      	ands	r2, r1
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	4618      	mov	r0, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b23      	subs	r3, #35	; 0x23
 800320a:	fa00 f203 	lsl.w	r2, r0, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
 8003216:	e023      	b.n	8003260 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	3b41      	subs	r3, #65	; 0x41
 800322a:	221f      	movs	r2, #31
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43da      	mvns	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	400a      	ands	r2, r1
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	4618      	mov	r0, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	3b41      	subs	r3, #65	; 0x41
 8003254:	fa00 f203 	lsl.w	r2, r0, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <HAL_ADC_ConfigChannel+0x284>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10a      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1f4>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003272:	d105      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 800327a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800327e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a22      	ldr	r2, [pc, #136]	; (8003310 <HAL_ADC_ConfigChannel+0x284>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d109      	bne.n	800329e <HAL_ADC_ConfigChannel+0x212>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b12      	cmp	r3, #18
 8003290:	d105      	bne.n	800329e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 8003298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800329c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_ADC_ConfigChannel+0x284>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d125      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x268>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a17      	ldr	r2, [pc, #92]	; (800330c <HAL_ADC_ConfigChannel+0x280>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x22e>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b11      	cmp	r3, #17
 80032b8:	d11c      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 80032c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a10      	ldr	r2, [pc, #64]	; (800330c <HAL_ADC_ConfigChannel+0x280>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d111      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_ADC_ConfigChannel+0x28c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a11      	ldr	r2, [pc, #68]	; (800331c <HAL_ADC_ConfigChannel+0x290>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0c9a      	lsrs	r2, r3, #18
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80032e6:	e002      	b.n	80032ee <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	10000012 	.word	0x10000012
 8003310:	40012000 	.word	0x40012000
 8003314:	40012300 	.word	0x40012300
 8003318:	2000000c 	.word	0x2000000c
 800331c:	431bde83 	.word	0x431bde83

08003320 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003328:	4b78      	ldr	r3, [pc, #480]	; (800350c <ADC_Init+0x1ec>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a77      	ldr	r2, [pc, #476]	; (800350c <ADC_Init+0x1ec>)
 800332e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003332:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003334:	4b75      	ldr	r3, [pc, #468]	; (800350c <ADC_Init+0x1ec>)
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4973      	ldr	r1, [pc, #460]	; (800350c <ADC_Init+0x1ec>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	021a      	lsls	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6899      	ldr	r1, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	4a58      	ldr	r2, [pc, #352]	; (8003510 <ADC_Init+0x1f0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6899      	ldr	r1, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	e00f      	b.n	800341a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003418:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0202 	bic.w	r2, r2, #2
 8003428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	005a      	lsls	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003456:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	3b01      	subs	r3, #1
 8003474:	035a      	lsls	r2, r3, #13
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	e007      	b.n	8003490 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	051a      	lsls	r2, r3, #20
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6899      	ldr	r1, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034d2:	025a      	lsls	r2, r3, #9
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	029a      	lsls	r2, r3, #10
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40012300 	.word	0x40012300
 8003510:	0f000001 	.word	0x0f000001

08003514 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <__NVIC_SetPriorityGrouping+0x40>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	4313      	orrs	r3, r2
 8003554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003556:	4a04      	ldr	r2, [pc, #16]	; (8003568 <__NVIC_SetPriorityGrouping+0x40>)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	60d3      	str	r3, [r2, #12]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00
 800356c:	05fa0000 	.word	0x05fa0000

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db0b      	blt.n	80035b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	4907      	ldr	r1, [pc, #28]	; (80035c4 <__NVIC_EnableIRQ+0x38>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2001      	movs	r0, #1
 80035ae:	fa00 f202 	lsl.w	r2, r0, r2
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	; (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	; (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003694:	d301      	bcc.n	800369a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <SysTick_Config+0x40>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a2:	210f      	movs	r1, #15
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f7ff ff8e 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <SysTick_Config+0x40>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <SysTick_Config+0x40>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010

080036c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff29 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff3e 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff8e 	bl	800361c <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5d 	bl	80035c8 <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff31 	bl	800358c <__NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ffa2 	bl	8003684 <SysTick_Config>
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d004      	beq.n	8003768 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e00c      	b.n	8003782 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2205      	movs	r2, #5
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379c:	b2db      	uxtb	r3, r3
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e169      	b.n	8003aa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037cc:	2201      	movs	r2, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f040 8158 	bne.w	8003a9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d00b      	beq.n	800380a <HAL_GPIO_Init+0x5e>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d007      	beq.n	800380a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037fe:	2b11      	cmp	r3, #17
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b12      	cmp	r3, #18
 8003808:	d130      	bne.n	800386c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003840:	2201      	movs	r2, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 0201 	and.w	r2, r3, #1
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	2203      	movs	r2, #3
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x100>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b12      	cmp	r3, #18
 80038aa:	d123      	bne.n	80038f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	08da      	lsrs	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3208      	adds	r2, #8
 80038b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	08da      	lsrs	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3208      	adds	r2, #8
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80b2 	beq.w	8003a9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	4b60      	ldr	r3, [pc, #384]	; (8003ab8 <HAL_GPIO_Init+0x30c>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	4a5f      	ldr	r2, [pc, #380]	; (8003ab8 <HAL_GPIO_Init+0x30c>)
 800393c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003940:	6453      	str	r3, [r2, #68]	; 0x44
 8003942:	4b5d      	ldr	r3, [pc, #372]	; (8003ab8 <HAL_GPIO_Init+0x30c>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800394e:	4a5b      	ldr	r2, [pc, #364]	; (8003abc <HAL_GPIO_Init+0x310>)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	3302      	adds	r3, #2
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	220f      	movs	r2, #15
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a52      	ldr	r2, [pc, #328]	; (8003ac0 <HAL_GPIO_Init+0x314>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d02b      	beq.n	80039d2 <HAL_GPIO_Init+0x226>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a51      	ldr	r2, [pc, #324]	; (8003ac4 <HAL_GPIO_Init+0x318>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d025      	beq.n	80039ce <HAL_GPIO_Init+0x222>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a50      	ldr	r2, [pc, #320]	; (8003ac8 <HAL_GPIO_Init+0x31c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01f      	beq.n	80039ca <HAL_GPIO_Init+0x21e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4f      	ldr	r2, [pc, #316]	; (8003acc <HAL_GPIO_Init+0x320>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d019      	beq.n	80039c6 <HAL_GPIO_Init+0x21a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4e      	ldr	r2, [pc, #312]	; (8003ad0 <HAL_GPIO_Init+0x324>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_GPIO_Init+0x216>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4d      	ldr	r2, [pc, #308]	; (8003ad4 <HAL_GPIO_Init+0x328>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00d      	beq.n	80039be <HAL_GPIO_Init+0x212>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4c      	ldr	r2, [pc, #304]	; (8003ad8 <HAL_GPIO_Init+0x32c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d007      	beq.n	80039ba <HAL_GPIO_Init+0x20e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4b      	ldr	r2, [pc, #300]	; (8003adc <HAL_GPIO_Init+0x330>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_GPIO_Init+0x20a>
 80039b2:	2307      	movs	r3, #7
 80039b4:	e00e      	b.n	80039d4 <HAL_GPIO_Init+0x228>
 80039b6:	2308      	movs	r3, #8
 80039b8:	e00c      	b.n	80039d4 <HAL_GPIO_Init+0x228>
 80039ba:	2306      	movs	r3, #6
 80039bc:	e00a      	b.n	80039d4 <HAL_GPIO_Init+0x228>
 80039be:	2305      	movs	r3, #5
 80039c0:	e008      	b.n	80039d4 <HAL_GPIO_Init+0x228>
 80039c2:	2304      	movs	r3, #4
 80039c4:	e006      	b.n	80039d4 <HAL_GPIO_Init+0x228>
 80039c6:	2303      	movs	r3, #3
 80039c8:	e004      	b.n	80039d4 <HAL_GPIO_Init+0x228>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e002      	b.n	80039d4 <HAL_GPIO_Init+0x228>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <HAL_GPIO_Init+0x228>
 80039d2:	2300      	movs	r3, #0
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	f002 0203 	and.w	r2, r2, #3
 80039da:	0092      	lsls	r2, r2, #2
 80039dc:	4093      	lsls	r3, r2
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80039e4:	4935      	ldr	r1, [pc, #212]	; (8003abc <HAL_GPIO_Init+0x310>)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	089b      	lsrs	r3, r3, #2
 80039ea:	3302      	adds	r3, #2
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039f2:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a16:	4a32      	ldr	r2, [pc, #200]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a1c:	4b30      	ldr	r3, [pc, #192]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a40:	4a27      	ldr	r2, [pc, #156]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a46:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a94:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b0f      	cmp	r3, #15
 8003aa4:	f67f ae92 	bls.w	80037cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	3724      	adds	r7, #36	; 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	40020400 	.word	0x40020400
 8003ac8:	40020800 	.word	0x40020800
 8003acc:	40020c00 	.word	0x40020c00
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40021400 	.word	0x40021400
 8003ad8:	40021800 	.word	0x40021800
 8003adc:	40021c00 	.word	0x40021c00
 8003ae0:	40013c00 	.word	0x40013c00

08003ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
 8003b00:	e001      	b.n	8003b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
 8003b20:	4613      	mov	r3, r2
 8003b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b24:	787b      	ldrb	r3, [r7, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b30:	e003      	b.n	8003b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b32:	887b      	ldrh	r3, [r7, #2]
 8003b34:	041a      	lsls	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	619a      	str	r2, [r3, #24]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e07f      	b.n	8003c5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe fd46 	bl	8002600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d107      	bne.n	8003bc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	e006      	b.n	8003bd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d104      	bne.n	8003be2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003be0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_I2C_Init+0x11c>)
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	ea42 0103 	orr.w	r1, r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69d9      	ldr	r1, [r3, #28]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	02008000 	.word	0x02008000

08003c68 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	817b      	strh	r3, [r7, #10]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	813b      	strh	r3, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d176      	bne.n	8003d7c <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_I2C_Mem_Write_IT+0x32>
 8003c94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06b      	b.n	8003d7e <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb4:	d101      	bne.n	8003cba <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e061      	b.n	8003d7e <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_I2C_Mem_Write_IT+0x60>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e05a      	b.n	8003d7e <HAL_I2C_Mem_Write_IT+0x116>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fe fea2 	bl	8002a18 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2221      	movs	r2, #33	; 0x21
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2240      	movs	r2, #64	; 0x40
 8003ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a23      	ldr	r2, [pc, #140]	; (8003d88 <HAL_I2C_Mem_Write_IT+0x120>)
 8003cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <HAL_I2C_Mem_Write_IT+0x124>)
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2bff      	cmp	r3, #255	; 0xff
 8003d0c:	d906      	bls.n	8003d1c <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e007      	b.n	8003d2c <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d2a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003d2c:	88f8      	ldrh	r0, [r7, #6]
 8003d2e:	893a      	ldrh	r2, [r7, #8]
 8003d30:	8979      	ldrh	r1, [r7, #10]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	2319      	movs	r3, #25
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fd09 	bl	8004754 <I2C_RequestMemoryWrite>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_I2C_Mem_Write_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e014      	b.n	8003d7e <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	8979      	ldrh	r1, [r7, #10]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f001 fab4 	bl	80052d0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d70:	2101      	movs	r1, #1
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f001 fada 	bl	800532c <I2C_Enable_IRQ>

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e000      	b.n	8003d7e <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	ffff0000 	.word	0xffff0000
 8003d8c:	08003f57 	.word	0x08003f57

08003d90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d010      	beq.n	8003e0a <HAL_I2C_ER_IRQHandler+0x46>
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	09db      	lsrs	r3, r3, #7
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e08:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	0a9b      	lsrs	r3, r3, #10
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d010      	beq.n	8003e38 <HAL_I2C_ER_IRQHandler+0x74>
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	09db      	lsrs	r3, r3, #7
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f043 0208 	orr.w	r2, r3, #8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	0a5b      	lsrs	r3, r3, #9
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d010      	beq.n	8003e66 <HAL_I2C_ER_IRQHandler+0xa2>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	09db      	lsrs	r3, r3, #7
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	f043 0202 	orr.w	r2, r3, #2
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e64:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 030b 	and.w	r3, r3, #11
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f001 f809 	bl	8004e90 <I2C_ITError>
  }
}
 8003e7e:	bf00      	nop
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	70fb      	strb	r3, [r7, #3]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b088      	sub	sp, #32
 8003f5a:	af02      	add	r7, sp, #8
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <I2C_Master_ISR_IT+0x1e>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e114      	b.n	800419e <I2C_Master_ISR_IT+0x248>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <I2C_Master_ISR_IT+0x5a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f043 0204 	orr.w	r2, r3, #4
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f001 f868 	bl	800507e <I2C_Flush_TXDR>
 8003fae:	e0e1      	b.n	8004174 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d023      	beq.n	8004004 <I2C_Master_ISR_IT+0xae>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01d      	beq.n	8004004 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f023 0304 	bic.w	r3, r3, #4
 8003fce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004002:	e0b7      	b.n	8004174 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01e      	beq.n	800404e <I2C_Master_ISR_IT+0xf8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d018      	beq.n	800404e <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800404c:	e092      	b.n	8004174 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	09db      	lsrs	r3, r3, #7
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d05d      	beq.n	8004116 <I2C_Master_ISR_IT+0x1c0>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d057      	beq.n	8004116 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d040      	beq.n	80040f2 <I2C_Master_ISR_IT+0x19c>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d13c      	bne.n	80040f2 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004084:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	2bff      	cmp	r3, #255	; 0xff
 800408e:	d90e      	bls.n	80040ae <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	22ff      	movs	r2, #255	; 0xff
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	b2da      	uxtb	r2, r3
 800409c:	8a79      	ldrh	r1, [r7, #18]
 800409e:	2300      	movs	r3, #0
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f001 f912 	bl	80052d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ac:	e032      	b.n	8004114 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040c0:	d00b      	beq.n	80040da <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	8a79      	ldrh	r1, [r7, #18]
 80040ce:	2000      	movs	r0, #0
 80040d0:	9000      	str	r0, [sp, #0]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f001 f8fc 	bl	80052d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040d8:	e01c      	b.n	8004114 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	8a79      	ldrh	r1, [r7, #18]
 80040e2:	2300      	movs	r3, #0
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f001 f8f0 	bl	80052d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f0:	e010      	b.n	8004114 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004100:	d003      	beq.n	800410a <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fbfe 	bl	8004904 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004108:	e034      	b.n	8004174 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800410a:	2140      	movs	r1, #64	; 0x40
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 febf 	bl	8004e90 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004112:	e02f      	b.n	8004174 <I2C_Master_ISR_IT+0x21e>
 8004114:	e02e      	b.n	8004174 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d028      	beq.n	8004174 <I2C_Master_ISR_IT+0x21e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	099b      	lsrs	r3, r3, #6
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d022      	beq.n	8004174 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d119      	bne.n	800416c <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004146:	d015      	beq.n	8004174 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004150:	d108      	bne.n	8004164 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	e007      	b.n	8004174 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fbcd 	bl	8004904 <I2C_ITMasterSeqCplt>
 800416a:	e003      	b.n	8004174 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fe8e 	bl	8004e90 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <I2C_Master_ISR_IT+0x23e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800418c:	6979      	ldr	r1, [r7, #20]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fc54 	bl	8004a3c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b086      	sub	sp, #24
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <I2C_Slave_ISR_IT+0x24>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e0ec      	b.n	80043a4 <I2C_Slave_ISR_IT+0x1fe>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <I2C_Slave_ISR_IT+0x4c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80041ea:	6939      	ldr	r1, [r7, #16]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fcef 	bl	8004bd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04d      	beq.n	800429a <I2C_Slave_ISR_IT+0xf4>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d047      	beq.n	800429a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d128      	bne.n	8004266 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b28      	cmp	r3, #40	; 0x28
 800421e:	d108      	bne.n	8004232 <I2C_Slave_ISR_IT+0x8c>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004226:	d104      	bne.n	8004232 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004228:	6939      	ldr	r1, [r7, #16]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fdda 	bl	8004de4 <I2C_ITListenCplt>
 8004230:	e032      	b.n	8004298 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b29      	cmp	r3, #41	; 0x29
 800423c:	d10e      	bne.n	800425c <I2C_Slave_ISR_IT+0xb6>
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004244:	d00a      	beq.n	800425c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2210      	movs	r2, #16
 800424c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 ff15 	bl	800507e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fb92 	bl	800497e <I2C_ITSlaveSeqCplt>
 800425a:	e01d      	b.n	8004298 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2210      	movs	r2, #16
 8004262:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004264:	e096      	b.n	8004394 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2210      	movs	r2, #16
 800426c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f043 0204 	orr.w	r2, r3, #4
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <I2C_Slave_ISR_IT+0xe4>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004286:	f040 8085 	bne.w	8004394 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	4619      	mov	r1, r3
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fdfd 	bl	8004e90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004296:	e07d      	b.n	8004394 <I2C_Slave_ISR_IT+0x1ee>
 8004298:	e07c      	b.n	8004394 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	089b      	lsrs	r3, r3, #2
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d030      	beq.n	8004308 <I2C_Slave_ISR_IT+0x162>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02a      	beq.n	8004308 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d018      	beq.n	80042ee <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d14f      	bne.n	8004398 <I2C_Slave_ISR_IT+0x1f2>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042fe:	d04b      	beq.n	8004398 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fb3c 	bl	800497e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004306:	e047      	b.n	8004398 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	08db      	lsrs	r3, r3, #3
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	08db      	lsrs	r3, r3, #3
 8004318:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004320:	6939      	ldr	r1, [r7, #16]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fa6a 	bl	80047fc <I2C_ITAddrCplt>
 8004328:	e037      	b.n	800439a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d031      	beq.n	800439a <I2C_Slave_ISR_IT+0x1f4>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02b      	beq.n	800439a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d018      	beq.n	800437e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
 800437c:	e00d      	b.n	800439a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004384:	d002      	beq.n	800438c <I2C_Slave_ISR_IT+0x1e6>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 faf6 	bl	800497e <I2C_ITSlaveSeqCplt>
 8004392:	e002      	b.n	800439a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004398:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <I2C_Master_ISR_DMA+0x1a>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0e1      	b.n	800458a <I2C_Master_ISR_DMA+0x1de>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d017      	beq.n	800440a <I2C_Master_ISR_DMA+0x5e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2210      	movs	r2, #16
 80043ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f043 0204 	orr.w	r2, r3, #4
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80043fa:	2120      	movs	r1, #32
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 ff95 	bl	800532c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fe3b 	bl	800507e <I2C_Flush_TXDR>
 8004408:	e0ba      	b.n	8004580 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	09db      	lsrs	r3, r3, #7
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d072      	beq.n	80044fc <I2C_Master_ISR_DMA+0x150>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	099b      	lsrs	r3, r3, #6
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d06c      	beq.n	80044fc <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004430:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d04e      	beq.n	80044da <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004448:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2bff      	cmp	r3, #255	; 0xff
 8004452:	d906      	bls.n	8004462 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	22ff      	movs	r2, #255	; 0xff
 8004458:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800445a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e010      	b.n	8004484 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004474:	d003      	beq.n	800447e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e002      	b.n	8004484 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800447e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004482:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004488:	b2da      	uxtb	r2, r3
 800448a:	8a79      	ldrh	r1, [r7, #18]
 800448c:	2300      	movs	r3, #0
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 ff1c 	bl	80052d0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b22      	cmp	r3, #34	; 0x22
 80044b4:	d108      	bne.n	80044c8 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80044c6:	e05b      	b.n	8004580 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80044d8:	e052      	b.n	8004580 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044e8:	d003      	beq.n	80044f2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fa0a 	bl	8004904 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80044f0:	e046      	b.n	8004580 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fccb 	bl	8004e90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80044fa:	e041      	b.n	8004580 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d029      	beq.n	800455c <I2C_Master_ISR_DMA+0x1b0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	099b      	lsrs	r3, r3, #6
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d023      	beq.n	800455c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d119      	bne.n	8004552 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800452c:	d027      	beq.n	800457e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004536:	d108      	bne.n	800454a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004546:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004548:	e019      	b.n	800457e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f9da 	bl	8004904 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004550:	e015      	b.n	800457e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004552:	2140      	movs	r1, #64	; 0x40
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fc9b 	bl	8004e90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800455a:	e010      	b.n	800457e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00b      	beq.n	8004580 <I2C_Master_ISR_DMA+0x1d4>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fa60 	bl	8004a3c <I2C_ITMasterCplt>
 800457c:	e000      	b.n	8004580 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800457e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b088      	sub	sp, #32
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <I2C_Slave_ISR_DMA+0x24>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e0c9      	b.n	800474a <I2C_Slave_ISR_DMA+0x1b8>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <I2C_Slave_ISR_DMA+0x4c>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 faf9 	bl	8004bd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 809a 	beq.w	8004720 <I2C_Slave_ISR_DMA+0x18e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8093 	beq.w	8004720 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0b9b      	lsrs	r3, r3, #14
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0bdb      	lsrs	r3, r3, #15
 800460a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d07f      	beq.n	8004712 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	0bdb      	lsrs	r3, r3, #15
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004632:	2301      	movs	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0b9b      	lsrs	r3, r3, #14
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004656:	2301      	movs	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d128      	bne.n	80046b2 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b28      	cmp	r3, #40	; 0x28
 800466a:	d108      	bne.n	800467e <I2C_Slave_ISR_DMA+0xec>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004672:	d104      	bne.n	800467e <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 fbb4 	bl	8004de4 <I2C_ITListenCplt>
 800467c:	e048      	b.n	8004710 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b29      	cmp	r3, #41	; 0x29
 8004688:	d10e      	bne.n	80046a8 <I2C_Slave_ISR_DMA+0x116>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004690:	d00a      	beq.n	80046a8 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2210      	movs	r2, #16
 8004698:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fcef 	bl	800507e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f96c 	bl	800497e <I2C_ITSlaveSeqCplt>
 80046a6:	e033      	b.n	8004710 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2210      	movs	r2, #16
 80046ae:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80046b0:	e034      	b.n	800471c <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2210      	movs	r2, #16
 80046b8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	f043 0204 	orr.w	r2, r3, #4
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046cc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <I2C_Slave_ISR_DMA+0x14a>
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046da:	d11f      	bne.n	800471c <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2b21      	cmp	r3, #33	; 0x21
 80046e0:	d002      	beq.n	80046e8 <I2C_Slave_ISR_DMA+0x156>
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b29      	cmp	r3, #41	; 0x29
 80046e6:	d103      	bne.n	80046f0 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2221      	movs	r2, #33	; 0x21
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30
 80046ee:	e008      	b.n	8004702 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
 80046f2:	2b22      	cmp	r3, #34	; 0x22
 80046f4:	d002      	beq.n	80046fc <I2C_Slave_ISR_DMA+0x16a>
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b2a      	cmp	r3, #42	; 0x2a
 80046fa:	d102      	bne.n	8004702 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2222      	movs	r2, #34	; 0x22
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	4619      	mov	r1, r3
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fbc1 	bl	8004e90 <I2C_ITError>
      if (treatdmanack == 1U)
 800470e:	e005      	b.n	800471c <I2C_Slave_ISR_DMA+0x18a>
 8004710:	e004      	b.n	800471c <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2210      	movs	r2, #16
 8004718:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800471a:	e011      	b.n	8004740 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800471c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800471e:	e00f      	b.n	8004740 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	08db      	lsrs	r3, r3, #3
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <I2C_Slave_ISR_DMA+0x1ae>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	08db      	lsrs	r3, r3, #3
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f85e 	bl	80047fc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	461a      	mov	r2, r3
 8004762:	4603      	mov	r3, r0
 8004764:	817b      	strh	r3, [r7, #10]
 8004766:	460b      	mov	r3, r1
 8004768:	813b      	strh	r3, [r7, #8]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	8979      	ldrh	r1, [r7, #10]
 8004774:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <I2C_RequestMemoryWrite+0xa4>)
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fda7 	bl	80052d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	69b9      	ldr	r1, [r7, #24]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fcfb 	bl	8005182 <I2C_WaitOnTXISFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e02c      	b.n	80047f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28
 80047a6:	e015      	b.n	80047d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fce1 	bl	8005182 <I2C_WaitOnTXISFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e012      	b.n	80047f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047ca:	893b      	ldrh	r3, [r7, #8]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2200      	movs	r2, #0
 80047dc:	2180      	movs	r1, #128	; 0x80
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fc8f 	bl	8005102 <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	80002000 	.word	0x80002000

080047fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004812:	2b28      	cmp	r3, #40	; 0x28
 8004814:	d16a      	bne.n	80048ec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	b29b      	uxth	r3, r3
 8004830:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004834:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004842:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004850:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d138      	bne.n	80048cc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	09db      	lsrs	r3, r3, #7
 800485e:	b29a      	uxth	r2, r3
 8004860:	89bb      	ldrh	r3, [r7, #12]
 8004862:	4053      	eors	r3, r2
 8004864:	b29b      	uxth	r3, r3
 8004866:	f003 0306 	and.w	r3, r3, #6
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11c      	bne.n	80048a8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800486e:	897b      	ldrh	r3, [r7, #10]
 8004870:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004880:	2b02      	cmp	r3, #2
 8004882:	d13b      	bne.n	80048fc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2208      	movs	r2, #8
 8004890:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800489a:	89ba      	ldrh	r2, [r7, #12]
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	4619      	mov	r1, r3
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff fb18 	bl	8003ed6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80048a6:	e029      	b.n	80048fc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80048a8:	893b      	ldrh	r3, [r7, #8]
 80048aa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fd9f 	bl	80053f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048be:	89ba      	ldrh	r2, [r7, #12]
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fb06 	bl	8003ed6 <HAL_I2C_AddrCallback>
}
 80048ca:	e017      	b.n	80048fc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fd8f 	bl	80053f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048de:	89ba      	ldrh	r2, [r7, #12]
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff faf6 	bl	8003ed6 <HAL_I2C_AddrCallback>
}
 80048ea:	e007      	b.n	80048fc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2208      	movs	r2, #8
 80048f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b21      	cmp	r3, #33	; 0x21
 800491e:	d115      	bne.n	800494c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2211      	movs	r2, #17
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004934:	2101      	movs	r1, #1
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fd5c 	bl	80053f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fa9e 	bl	8003e86 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800494a:	e014      	b.n	8004976 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2212      	movs	r2, #18
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004960:	2102      	movs	r1, #2
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fd46 	bl	80053f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff fa92 	bl	8003e9a <HAL_I2C_MasterRxCpltCallback>
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	0b9b      	lsrs	r3, r3, #14
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e00d      	b.n	80049d0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	0bdb      	lsrs	r3, r3, #15
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ce:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b29      	cmp	r3, #41	; 0x29
 80049da:	d112      	bne.n	8004a02 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2228      	movs	r2, #40	; 0x28
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2221      	movs	r2, #33	; 0x21
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049ea:	2101      	movs	r1, #1
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fd01 	bl	80053f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fa57 	bl	8003eae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a00:	e017      	b.n	8004a32 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0c:	d111      	bne.n	8004a32 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2228      	movs	r2, #40	; 0x28
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2222      	movs	r2, #34	; 0x22
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fce8 	bl	80053f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fa48 	bl	8003ec2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b21      	cmp	r3, #33	; 0x21
 8004a5c:	d107      	bne.n	8004a6e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a5e:	2101      	movs	r1, #1
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fcc7 	bl	80053f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2211      	movs	r2, #17
 8004a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a6c:	e00c      	b.n	8004a88 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b22      	cmp	r3, #34	; 0x22
 8004a78:	d106      	bne.n	8004a88 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fcb9 	bl	80053f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2212      	movs	r2, #18
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b4d      	ldr	r3, [pc, #308]	; (8004bc8 <I2C_ITMasterCplt+0x18c>)
 8004a94:	400b      	ands	r3, r1
 8004a96:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a4a      	ldr	r2, [pc, #296]	; (8004bcc <I2C_ITMasterCplt+0x190>)
 8004aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2210      	movs	r2, #16
 8004ab6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f043 0204 	orr.w	r2, r3, #4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b60      	cmp	r3, #96	; 0x60
 8004ace:	d10b      	bne.n	8004ae8 <I2C_ITMasterCplt+0xac>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fac8 	bl	800507e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b60      	cmp	r3, #96	; 0x60
 8004afe:	d002      	beq.n	8004b06 <I2C_ITMasterCplt+0xca>
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f9bf 	bl	8004e90 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b12:	e054      	b.n	8004bbe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b21      	cmp	r3, #33	; 0x21
 8004b1e:	d124      	bne.n	8004b6a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d10b      	bne.n	8004b52 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff f9db 	bl	8003f06 <HAL_I2C_MemTxCpltCallback>
}
 8004b50:	e035      	b.n	8004bbe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff f98f 	bl	8003e86 <HAL_I2C_MasterTxCpltCallback>
}
 8004b68:	e029      	b.n	8004bbe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b22      	cmp	r3, #34	; 0x22
 8004b74:	d123      	bne.n	8004bbe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d10b      	bne.n	8004ba8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff f9ba 	bl	8003f1a <HAL_I2C_MemRxCpltCallback>
}
 8004ba6:	e00a      	b.n	8004bbe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff f96e 	bl	8003e9a <HAL_I2C_MasterRxCpltCallback>
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	fe00e800 	.word	0xfe00e800
 8004bcc:	ffff0000 	.word	0xffff0000

08004bd0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	2b21      	cmp	r3, #33	; 0x21
 8004bfa:	d002      	beq.n	8004c02 <I2C_ITSlaveCplt+0x32>
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b29      	cmp	r3, #41	; 0x29
 8004c00:	d108      	bne.n	8004c14 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004c02:	f248 0101 	movw	r1, #32769	; 0x8001
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fbf4 	bl	80053f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2221      	movs	r2, #33	; 0x21
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
 8004c12:	e00d      	b.n	8004c30 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b22      	cmp	r3, #34	; 0x22
 8004c18:	d002      	beq.n	8004c20 <I2C_ITSlaveCplt+0x50>
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1e:	d107      	bne.n	8004c30 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c20:	f248 0102 	movw	r1, #32770	; 0x8002
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fbe5 	bl	80053f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2222      	movs	r2, #34	; 0x22
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4b64      	ldr	r3, [pc, #400]	; (8004ddc <I2C_ITSlaveCplt+0x20c>)
 8004c4c:	400b      	ands	r3, r1
 8004c4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa14 	bl	800507e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	0b9b      	lsrs	r3, r3, #14
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d013      	beq.n	8004c8a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c88:	e018      	b.n	8004cbc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	0bdb      	lsrs	r3, r3, #15
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d012      	beq.n	8004cbc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d006      	beq.n	8004cbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	089b      	lsrs	r3, r3, #2
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0304 	bic.w	r3, r3, #4
 8004cce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00c      	beq.n	8004d0a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	f043 0204 	orr.w	r2, r3, #4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d010      	beq.n	8004d58 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f8a7 	bl	8004e90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b28      	cmp	r3, #40	; 0x28
 8004d4c:	d141      	bne.n	8004dd2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d4e:	6979      	ldr	r1, [r7, #20]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f847 	bl	8004de4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d56:	e03c      	b.n	8004dd2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d60:	d014      	beq.n	8004d8c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff fe0b 	bl	800497e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <I2C_ITSlaveCplt+0x210>)
 8004d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff f8b4 	bl	8003ef2 <HAL_I2C_ListenCpltCallback>
}
 8004d8a:	e022      	b.n	8004dd2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b22      	cmp	r3, #34	; 0x22
 8004d96:	d10e      	bne.n	8004db6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff f887 	bl	8003ec2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004db4:	e00d      	b.n	8004dd2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff f86e 	bl	8003eae <HAL_I2C_SlaveTxCpltCallback>
}
 8004dd2:	bf00      	nop
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	fe00e800 	.word	0xfe00e800
 8004de0:	ffff0000 	.word	0xffff0000

08004de4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <I2C_ITListenCplt+0xa8>)
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d022      	beq.n	8004e62 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d012      	beq.n	8004e62 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	f043 0204 	orr.w	r2, r3, #4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e62:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fac4 	bl	80053f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2210      	movs	r2, #16
 8004e72:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff f838 	bl	8003ef2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	ffff0000 	.word	0xffff0000

08004e90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a5d      	ldr	r2, [pc, #372]	; (8005024 <I2C_ITError+0x194>)
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b28      	cmp	r3, #40	; 0x28
 8004ec6:	d005      	beq.n	8004ed4 <I2C_ITError+0x44>
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b29      	cmp	r3, #41	; 0x29
 8004ecc:	d002      	beq.n	8004ed4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed2:	d10b      	bne.n	8004eec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa8c 	bl	80053f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2228      	movs	r2, #40	; 0x28
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a50      	ldr	r2, [pc, #320]	; (8005028 <I2C_ITError+0x198>)
 8004ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8004eea:	e011      	b.n	8004f10 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004eec:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fa7f 	bl	80053f4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b60      	cmp	r3, #96	; 0x60
 8004f00:	d003      	beq.n	8004f0a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d039      	beq.n	8004f92 <I2C_ITError+0x102>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b11      	cmp	r3, #17
 8004f22:	d002      	beq.n	8004f2a <I2C_ITError+0x9a>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b21      	cmp	r3, #33	; 0x21
 8004f28:	d133      	bne.n	8004f92 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f38:	d107      	bne.n	8004f4a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe fc1d 	bl	800378e <HAL_DMA_GetState>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d017      	beq.n	8004f8a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	4a33      	ldr	r2, [pc, #204]	; (800502c <I2C_ITError+0x19c>)
 8004f60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fbeb 	bl	800374a <HAL_DMA_Abort_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d04d      	beq.n	8005016 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f84:	4610      	mov	r0, r2
 8004f86:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f88:	e045      	b.n	8005016 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f850 	bl	8005030 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f90:	e041      	b.n	8005016 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d039      	beq.n	800500e <I2C_ITError+0x17e>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b12      	cmp	r3, #18
 8004f9e:	d002      	beq.n	8004fa6 <I2C_ITError+0x116>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b22      	cmp	r3, #34	; 0x22
 8004fa4:	d133      	bne.n	800500e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb4:	d107      	bne.n	8004fc6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe fbdf 	bl	800378e <HAL_DMA_GetState>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d017      	beq.n	8005006 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	4a14      	ldr	r2, [pc, #80]	; (800502c <I2C_ITError+0x19c>)
 8004fdc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe fbad 	bl	800374a <HAL_DMA_Abort_IT>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d011      	beq.n	800501a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005000:	4610      	mov	r0, r2
 8005002:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005004:	e009      	b.n	800501a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f812 	bl	8005030 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800500c:	e005      	b.n	800501a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f80e 	bl	8005030 <I2C_TreatErrorCallback>
  }
}
 8005014:	e002      	b.n	800501c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005016:	bf00      	nop
 8005018:	e000      	b.n	800501c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800501a:	bf00      	nop
}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	ffff0000 	.word	0xffff0000
 8005028:	080041a7 	.word	0x080041a7
 800502c:	080050c7 	.word	0x080050c7

08005030 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b60      	cmp	r3, #96	; 0x60
 8005042:	d10e      	bne.n	8005062 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fe ff71 	bl	8003f42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005060:	e009      	b.n	8005076 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7fe ff5c 	bl	8003f2e <HAL_I2C_ErrorCallback>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b02      	cmp	r3, #2
 8005092:	d103      	bne.n	800509c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2200      	movs	r2, #0
 800509a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d007      	beq.n	80050ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	619a      	str	r2, [r3, #24]
  }
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	2200      	movs	r2, #0
 80050e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	2200      	movs	r2, #0
 80050f2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff ff9b 	bl	8005030 <I2C_TreatErrorCallback>
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	4613      	mov	r3, r2
 8005110:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005112:	e022      	b.n	800515a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d01e      	beq.n	800515a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511c:	f7fd fc7c 	bl	8002a18 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d302      	bcc.n	8005132 <I2C_WaitOnFlagUntilTimeout+0x30>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d113      	bne.n	800515a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	f043 0220 	orr.w	r2, r3, #32
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e00f      	b.n	800517a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	429a      	cmp	r2, r3
 8005176:	d0cd      	beq.n	8005114 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800518e:	e02c      	b.n	80051ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f835 	bl	8005204 <I2C_IsAcknowledgeFailed>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e02a      	b.n	80051fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d01e      	beq.n	80051ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ac:	f7fd fc34 	bl	8002a18 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d302      	bcc.n	80051c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d113      	bne.n	80051ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e007      	b.n	80051fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d1cb      	bne.n	8005190 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b10      	cmp	r3, #16
 800521c:	d151      	bne.n	80052c2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800521e:	e022      	b.n	8005266 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d01e      	beq.n	8005266 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005228:	f7fd fbf6 	bl	8002a18 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	429a      	cmp	r2, r3
 8005236:	d302      	bcc.n	800523e <I2C_IsAcknowledgeFailed+0x3a>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d113      	bne.n	8005266 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	f043 0220 	orr.w	r2, r3, #32
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e02e      	b.n	80052c4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b20      	cmp	r3, #32
 8005272:	d1d5      	bne.n	8005220 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2210      	movs	r2, #16
 800527a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2220      	movs	r2, #32
 8005282:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff fefa 	bl	800507e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6859      	ldr	r1, [r3, #4]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <I2C_IsAcknowledgeFailed+0xc8>)
 8005296:	400b      	ands	r3, r1
 8005298:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529e:	f043 0204 	orr.w	r2, r3, #4
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	fe00e800 	.word	0xfe00e800

080052d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	460b      	mov	r3, r1
 80052dc:	817b      	strh	r3, [r7, #10]
 80052de:	4613      	mov	r3, r2
 80052e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	0d5b      	lsrs	r3, r3, #21
 80052ec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052f0:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <I2C_TransferConfig+0x58>)
 80052f2:	430b      	orrs	r3, r1
 80052f4:	43db      	mvns	r3, r3
 80052f6:	ea02 0103 	and.w	r1, r2, r3
 80052fa:	897b      	ldrh	r3, [r7, #10]
 80052fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005300:	7a7b      	ldrb	r3, [r7, #9]
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	431a      	orrs	r2, r3
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	431a      	orrs	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	03ff63ff 	.word	0x03ff63ff

0800532c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <I2C_Enable_IRQ+0xc0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800534a:	4a29      	ldr	r2, [pc, #164]	; (80053f0 <I2C_Enable_IRQ+0xc4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d11d      	bne.n	800538c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005350:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005354:	2b00      	cmp	r3, #0
 8005356:	da03      	bge.n	8005360 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800535e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005360:	887b      	ldrh	r3, [r7, #2]
 8005362:	2b10      	cmp	r3, #16
 8005364:	d103      	bne.n	800536e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800536c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	2b20      	cmp	r3, #32
 8005372:	d103      	bne.n	800537c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800537a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800537c:	887b      	ldrh	r3, [r7, #2]
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d125      	bne.n	80053ce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005388:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800538a:	e020      	b.n	80053ce <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800538c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005390:	2b00      	cmp	r3, #0
 8005392:	da03      	bge.n	800539c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800539a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800539c:	887b      	ldrh	r3, [r7, #2]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80053ac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80053ae:	887b      	ldrh	r3, [r7, #2]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80053be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053c0:	887b      	ldrh	r3, [r7, #2]
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d103      	bne.n	80053ce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f043 0320 	orr.w	r3, r3, #32
 80053cc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	430a      	orrs	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	080043ad 	.word	0x080043ad
 80053f0:	08004593 	.word	0x08004593

080053f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005404:	887b      	ldrh	r3, [r7, #2]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00f      	beq.n	800542e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005414:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005422:	2b28      	cmp	r3, #40	; 0x28
 8005424:	d003      	beq.n	800542e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800542c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800542e:	887b      	ldrh	r3, [r7, #2]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00f      	beq.n	8005458 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800543e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800544c:	2b28      	cmp	r3, #40	; 0x28
 800544e:	d003      	beq.n	8005458 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005456:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800545c:	2b00      	cmp	r3, #0
 800545e:	da03      	bge.n	8005468 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005466:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005468:	887b      	ldrh	r3, [r7, #2]
 800546a:	2b10      	cmp	r3, #16
 800546c:	d103      	bne.n	8005476 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005474:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005476:	887b      	ldrh	r3, [r7, #2]
 8005478:	2b20      	cmp	r3, #32
 800547a:	d103      	bne.n	8005484 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f043 0320 	orr.w	r3, r3, #32
 8005482:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d103      	bne.n	8005492 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005490:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6819      	ldr	r1, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	43da      	mvns	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	400a      	ands	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d138      	bne.n	8005538 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e032      	b.n	800553a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2224      	movs	r2, #36	; 0x24
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005502:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	e000      	b.n	800553a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b20      	cmp	r3, #32
 800555a:	d139      	bne.n	80055d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005566:	2302      	movs	r3, #2
 8005568:	e033      	b.n	80055d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2224      	movs	r2, #36	; 0x24
 8005576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0201 	bic.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005598:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e0:	b08f      	sub	sp, #60	; 0x3c
 80055e2:	af0a      	add	r7, sp, #40	; 0x28
 80055e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e116      	b.n	800581e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f006 fbec 	bl	800bde8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2203      	movs	r2, #3
 8005614:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d102      	bne.n	800562a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f003 fa97 	bl	8008b62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	687e      	ldr	r6, [r7, #4]
 800563c:	466d      	mov	r5, sp
 800563e:	f106 0410 	add.w	r4, r6, #16
 8005642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800564a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800564e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005652:	1d33      	adds	r3, r6, #4
 8005654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005656:	6838      	ldr	r0, [r7, #0]
 8005658:	f003 f93a 	bl	80088d0 <USB_CoreInit>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2202      	movs	r2, #2
 8005666:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e0d7      	b.n	800581e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f003 fa85 	bl	8008b84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
 800567e:	e04a      	b.n	8005716 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005680:	7bfa      	ldrb	r2, [r7, #15]
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	333d      	adds	r3, #61	; 0x3d
 8005690:	2201      	movs	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005694:	7bfa      	ldrb	r2, [r7, #15]
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	333c      	adds	r3, #60	; 0x3c
 80056a4:	7bfa      	ldrb	r2, [r7, #15]
 80056a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056a8:	7bfa      	ldrb	r2, [r7, #15]
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	b298      	uxth	r0, r3
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	3342      	adds	r3, #66	; 0x42
 80056bc:	4602      	mov	r2, r0
 80056be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	333f      	adds	r3, #63	; 0x3f
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056d4:	7bfa      	ldrb	r2, [r7, #15]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	3344      	adds	r3, #68	; 0x44
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	3348      	adds	r3, #72	; 0x48
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056fc:	7bfa      	ldrb	r2, [r7, #15]
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	3350      	adds	r3, #80	; 0x50
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	3301      	adds	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	429a      	cmp	r2, r3
 800571e:	d3af      	bcc.n	8005680 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005720:	2300      	movs	r3, #0
 8005722:	73fb      	strb	r3, [r7, #15]
 8005724:	e044      	b.n	80057b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005726:	7bfa      	ldrb	r2, [r7, #15]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005738:	2200      	movs	r2, #0
 800573a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800573c:	7bfa      	ldrb	r2, [r7, #15]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800577e:	7bfa      	ldrb	r2, [r7, #15]
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	3301      	adds	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
 80057b0:	7bfa      	ldrb	r2, [r7, #15]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3b5      	bcc.n	8005726 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	687e      	ldr	r6, [r7, #4]
 80057c2:	466d      	mov	r5, sp
 80057c4:	f106 0410 	add.w	r4, r6, #16
 80057c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80057d8:	1d33      	adds	r3, r6, #4
 80057da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057dc:	6838      	ldr	r0, [r7, #0]
 80057de:	f003 f9fb 	bl	8008bd8 <USB_DevInit>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e014      	b.n	800581e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	2b01      	cmp	r3, #1
 800580a:	d102      	bne.n	8005812 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 f881 	bl	8006914 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f004 fa53 	bl	8009cc2 <USB_DevDisconnect>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005826 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_PCD_Start+0x16>
 8005838:	2302      	movs	r3, #2
 800583a:	e012      	b.n	8005862 <HAL_PCD_Start+0x3c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f003 f979 	bl	8008b40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f004 fa14 	bl	8009c80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800586a:	b590      	push	{r4, r7, lr}
 800586c:	b08d      	sub	sp, #52	; 0x34
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f004 fad2 	bl	8009e2a <USB_GetMode>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	f040 83ca 	bne.w	8006022 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f004 fa36 	bl	8009d04 <USB_ReadInterrupts>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 83c0 	beq.w	8006020 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f004 fa2d 	bl	8009d04 <USB_ReadInterrupts>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d107      	bne.n	80058c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695a      	ldr	r2, [r3, #20]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f002 0202 	and.w	r2, r2, #2
 80058c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f004 fa1b 	bl	8009d04 <USB_ReadInterrupts>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d161      	bne.n	800599c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0210 	bic.w	r2, r2, #16
 80058e6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f003 020f 	and.w	r2, r3, #15
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	3304      	adds	r3, #4
 8005906:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	0c5b      	lsrs	r3, r3, #17
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	2b02      	cmp	r3, #2
 8005912:	d124      	bne.n	800595e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d035      	beq.n	800598c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800592a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800592e:	b29b      	uxth	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	6a38      	ldr	r0, [r7, #32]
 8005934:	f004 f881 	bl	8009a3a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005944:	441a      	add	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005956:	441a      	add	r2, r3
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	619a      	str	r2, [r3, #24]
 800595c:	e016      	b.n	800598c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	0c5b      	lsrs	r3, r3, #17
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	2b06      	cmp	r3, #6
 8005968:	d110      	bne.n	800598c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005970:	2208      	movs	r2, #8
 8005972:	4619      	mov	r1, r3
 8005974:	6a38      	ldr	r0, [r7, #32]
 8005976:	f004 f860 	bl	8009a3a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005986:	441a      	add	r2, r3
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0210 	orr.w	r2, r2, #16
 800599a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f004 f9af 	bl	8009d04 <USB_ReadInterrupts>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059b0:	d16e      	bne.n	8005a90 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f004 f9b5 	bl	8009d2a <USB_ReadDevAllOutEpInterrupt>
 80059c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80059c2:	e062      	b.n	8005a8a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d057      	beq.n	8005a7e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	4611      	mov	r1, r2
 80059d8:	4618      	mov	r0, r3
 80059da:	f004 f9da 	bl	8009d92 <USB_ReadDevOutEPInterrupt>
 80059de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00c      	beq.n	8005a04 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	461a      	mov	r2, r3
 80059f8:	2301      	movs	r3, #1
 80059fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fdde 	bl	80065c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00c      	beq.n	8005a28 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fed8 	bl	80067d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d008      	beq.n	8005a44 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2310      	movs	r3, #16
 8005a42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2320      	movs	r3, #32
 8005a5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	461a      	mov	r2, r3
 8005a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	3301      	adds	r3, #1
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d199      	bne.n	80059c4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f004 f935 	bl	8009d04 <USB_ReadInterrupts>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aa4:	f040 80c0 	bne.w	8005c28 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f004 f956 	bl	8009d5e <USB_ReadDevAllInEpInterrupt>
 8005ab2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ab8:	e0b2      	b.n	8005c20 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a7 	beq.w	8005c14 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f004 f97c 	bl	8009dce <USB_ReadDevInEPInterrupt>
 8005ad6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d057      	beq.n	8005b92 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	2201      	movs	r2, #1
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	43db      	mvns	r3, r3
 8005afc:	69f9      	ldr	r1, [r7, #28]
 8005afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b02:	4013      	ands	r3, r2
 8005b04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	461a      	mov	r2, r3
 8005b14:	2301      	movs	r3, #1
 8005b16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d132      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b24:	4613      	mov	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	1a9b      	subs	r3, r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	3348      	adds	r3, #72	; 0x48
 8005b30:	6819      	ldr	r1, [r3, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	4613      	mov	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4403      	add	r3, r0
 8005b40:	3344      	adds	r3, #68	; 0x44
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4419      	add	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4403      	add	r3, r0
 8005b54:	3348      	adds	r3, #72	; 0x48
 8005b56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d113      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x31c>
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b62:	4613      	mov	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3350      	adds	r3, #80	; 0x50
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d108      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2101      	movs	r1, #1
 8005b82:	f004 f985 	bl	8009e90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f006 f9cc 	bl	800bf2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba8:	461a      	mov	r2, r3
 8005baa:	2308      	movs	r3, #8
 8005bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2310      	movs	r3, #16
 8005bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	461a      	mov	r2, r3
 8005be2:	2340      	movs	r3, #64	; 0x40
 8005be4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d008      	beq.n	8005c02 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2302      	movs	r3, #2
 8005c00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fc48 	bl	80064a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	3301      	adds	r3, #1
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f47f af49 	bne.w	8005aba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f004 f869 	bl	8009d04 <USB_ReadInterrupts>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c3c:	d122      	bne.n	8005c84 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4c:	f023 0301 	bic.w	r3, r3, #1
 8005c50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d108      	bne.n	8005c6e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c64:	2100      	movs	r1, #0
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fe78 	bl	800695c <HAL_PCDEx_LPM_Callback>
 8005c6c:	e002      	b.n	8005c74 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f006 f9d6 	bl	800c020 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f004 f83b 	bl	8009d04 <USB_ReadInterrupts>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c98:	d112      	bne.n	8005cc0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d102      	bne.n	8005cb0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f006 f992 	bl	800bfd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f004 f81d 	bl	8009d04 <USB_ReadInterrupts>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cd4:	d121      	bne.n	8005d1a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695a      	ldr	r2, [r3, #20]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005ce4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d111      	bne.n	8005d14 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	089b      	lsrs	r3, r3, #2
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fe25 	bl	800695c <HAL_PCDEx_LPM_Callback>
 8005d12:	e002      	b.n	8005d1a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f006 f95d 	bl	800bfd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f003 fff0 	bl	8009d04 <USB_ReadInterrupts>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2e:	f040 80c7 	bne.w	8005ec0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f003 f8b1 	bl	8008eb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d56:	e056      	b.n	8005e06 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d64:	461a      	mov	r2, r3
 8005d66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d6a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d8a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005daa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	461a      	mov	r2, r3
 8005dba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dbe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dde:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dfe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	3301      	adds	r3, #1
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d3a3      	bcc.n	8005d58 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e1e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005e22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d016      	beq.n	8005e5a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e3c:	f043 030b 	orr.w	r3, r3, #11
 8005e40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e52:	f043 030b 	orr.w	r3, r3, #11
 8005e56:	6453      	str	r3, [r2, #68]	; 0x44
 8005e58:	e015      	b.n	8005e86 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f242 032b 	movw	r3, #8235	; 0x202b
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e80:	f043 030b 	orr.w	r3, r3, #11
 8005e84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f003 fff0 	bl	8009e90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f003 ff1d 	bl	8009d04 <USB_ReadInterrupts>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed4:	d124      	bne.n	8005f20 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f003 ffb4 	bl	8009e48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f003 f846 	bl	8008f76 <USB_GetDevSpeed>
 8005eea:	4603      	mov	r3, r0
 8005eec:	461a      	mov	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681c      	ldr	r4, [r3, #0]
 8005ef6:	f001 f9d3 	bl	80072a0 <HAL_RCC_GetHCLKFreq>
 8005efa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	4620      	mov	r0, r4
 8005f06:	f002 fd79 	bl	80089fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f006 f839 	bl	800bf82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f003 feed 	bl	8009d04 <USB_ReadInterrupts>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d10a      	bne.n	8005f4a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f006 f816 	bl	800bf66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695a      	ldr	r2, [r3, #20]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f002 0208 	and.w	r2, r2, #8
 8005f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f003 fed8 	bl	8009d04 <USB_ReadInterrupts>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5e:	d10f      	bne.n	8005f80 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f006 f878 	bl	800c060 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695a      	ldr	r2, [r3, #20]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f003 febd 	bl	8009d04 <USB_ReadInterrupts>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f94:	d10f      	bne.n	8005fb6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f006 f84b 	bl	800c03c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f003 fea2 	bl	8009d04 <USB_ReadInterrupts>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fca:	d10a      	bne.n	8005fe2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f006 f859 	bl	800c084 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f003 fe8c 	bl	8009d04 <USB_ReadInterrupts>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d115      	bne.n	8006022 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f006 f849 	bl	800c0a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6859      	ldr	r1, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
 800601e:	e000      	b.n	8006022 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006020:	bf00      	nop
    }
  }
}
 8006022:	3734      	adds	r7, #52	; 0x34
 8006024:	46bd      	mov	sp, r7
 8006026:	bd90      	pop	{r4, r7, pc}

08006028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_PCD_SetAddress+0x1a>
 800603e:	2302      	movs	r3, #2
 8006040:	e013      	b.n	800606a <HAL_PCD_SetAddress+0x42>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	4611      	mov	r1, r2
 800605a:	4618      	mov	r0, r3
 800605c:	f003 fdea 	bl	8009c34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	4608      	mov	r0, r1
 800607c:	4611      	mov	r1, r2
 800607e:	461a      	mov	r2, r3
 8006080:	4603      	mov	r3, r0
 8006082:	70fb      	strb	r3, [r7, #3]
 8006084:	460b      	mov	r3, r1
 8006086:	803b      	strh	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006094:	2b00      	cmp	r3, #0
 8006096:	da0f      	bge.n	80060b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	f003 020f 	and.w	r2, r3, #15
 800609e:	4613      	mov	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	3338      	adds	r3, #56	; 0x38
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	3304      	adds	r3, #4
 80060ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	705a      	strb	r2, [r3, #1]
 80060b6:	e00f      	b.n	80060d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	f003 020f 	and.w	r2, r3, #15
 80060be:	4613      	mov	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	3304      	adds	r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060e4:	883a      	ldrh	r2, [r7, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	78ba      	ldrb	r2, [r7, #2]
 80060ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006102:	78bb      	ldrb	r3, [r7, #2]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d102      	bne.n	800610e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_PCD_EP_Open+0xaa>
 8006118:	2302      	movs	r3, #2
 800611a:	e00e      	b.n	800613a <HAL_PCD_EP_Open+0xc8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68f9      	ldr	r1, [r7, #12]
 800612a:	4618      	mov	r0, r3
 800612c:	f002 ff48 	bl	8008fc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006138:	7afb      	ldrb	r3, [r7, #11]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800614e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006152:	2b00      	cmp	r3, #0
 8006154:	da0f      	bge.n	8006176 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	f003 020f 	and.w	r2, r3, #15
 800615c:	4613      	mov	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	3338      	adds	r3, #56	; 0x38
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	3304      	adds	r3, #4
 800616c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	705a      	strb	r2, [r3, #1]
 8006174:	e00f      	b.n	8006196 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	f003 020f 	and.w	r2, r3, #15
 800617c:	4613      	mov	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	4413      	add	r3, r2
 800618c:	3304      	adds	r3, #4
 800618e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_PCD_EP_Close+0x6e>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e00e      	b.n	80061ce <HAL_PCD_EP_Close+0x8c>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68f9      	ldr	r1, [r7, #12]
 80061be:	4618      	mov	r0, r3
 80061c0:	f002 ff86 	bl	80090d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b086      	sub	sp, #24
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	460b      	mov	r3, r1
 80061e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061e6:	7afb      	ldrb	r3, [r7, #11]
 80061e8:	f003 020f 	and.w	r2, r3, #15
 80061ec:	4613      	mov	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	3304      	adds	r3, #4
 80061fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2200      	movs	r2, #0
 8006210:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2200      	movs	r2, #0
 8006216:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006218:	7afb      	ldrb	r3, [r7, #11]
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	b2da      	uxtb	r2, r3
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d102      	bne.n	8006232 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006232:	7afb      	ldrb	r3, [r7, #11]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	6979      	ldr	r1, [r7, #20]
 800624a:	f003 fa69 	bl	8009720 <USB_EP0StartXfer>
 800624e:	e008      	b.n	8006262 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	6979      	ldr	r1, [r7, #20]
 800625e:	f003 f813 	bl	8009288 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	f003 020f 	and.w	r2, r3, #15
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4613      	mov	r3, r2
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800628e:	681b      	ldr	r3, [r3, #0]
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	460b      	mov	r3, r1
 80062aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ac:	7afb      	ldrb	r3, [r7, #11]
 80062ae:	f003 020f 	and.w	r2, r3, #15
 80062b2:	4613      	mov	r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	1a9b      	subs	r3, r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	3338      	adds	r3, #56	; 0x38
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	3304      	adds	r3, #4
 80062c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2200      	movs	r2, #0
 80062d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2201      	movs	r2, #1
 80062da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062dc:	7afb      	ldrb	r3, [r7, #11]
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d102      	bne.n	80062f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062f6:	7afb      	ldrb	r3, [r7, #11]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d109      	bne.n	8006314 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	f003 fa07 	bl	8009720 <USB_EP0StartXfer>
 8006312:	e008      	b.n	8006326 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	6979      	ldr	r1, [r7, #20]
 8006322:	f002 ffb1 	bl	8009288 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	f003 020f 	and.w	r2, r3, #15
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d901      	bls.n	800634e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e050      	b.n	80063f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800634e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006352:	2b00      	cmp	r3, #0
 8006354:	da0f      	bge.n	8006376 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	f003 020f 	and.w	r2, r3, #15
 800635c:	4613      	mov	r3, r2
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	3338      	adds	r3, #56	; 0x38
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	4413      	add	r3, r2
 800636a:	3304      	adds	r3, #4
 800636c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	705a      	strb	r2, [r3, #1]
 8006374:	e00d      	b.n	8006392 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	4613      	mov	r3, r2
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	3304      	adds	r3, #4
 800638a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_PCD_EP_SetStall+0x82>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e01e      	b.n	80063f0 <HAL_PCD_EP_SetStall+0xc0>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68f9      	ldr	r1, [r7, #12]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f003 fb63 	bl	8009a8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	b2d9      	uxtb	r1, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063e0:	461a      	mov	r2, r3
 80063e2:	f003 fd55 	bl	8009e90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	f003 020f 	and.w	r2, r3, #15
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	429a      	cmp	r2, r3
 8006410:	d901      	bls.n	8006416 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e042      	b.n	800649c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800641a:	2b00      	cmp	r3, #0
 800641c:	da0f      	bge.n	800643e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	f003 020f 	and.w	r2, r3, #15
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	3338      	adds	r3, #56	; 0x38
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	3304      	adds	r3, #4
 8006434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2201      	movs	r2, #1
 800643a:	705a      	strb	r2, [r3, #1]
 800643c:	e00f      	b.n	800645e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	f003 020f 	and.w	r2, r3, #15
 8006444:	4613      	mov	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	4413      	add	r3, r2
 8006454:	3304      	adds	r3, #4
 8006456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	b2da      	uxtb	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_PCD_EP_ClrStall+0x86>
 800647a:	2302      	movs	r3, #2
 800647c:	e00e      	b.n	800649c <HAL_PCD_EP_ClrStall+0xa4>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68f9      	ldr	r1, [r7, #12]
 800648c:	4618      	mov	r0, r3
 800648e:	f003 fb6b 	bl	8009b68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08a      	sub	sp, #40	; 0x28
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	1a9b      	subs	r3, r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	3338      	adds	r3, #56	; 0x38
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	4413      	add	r3, r2
 80064c8:	3304      	adds	r3, #4
 80064ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d901      	bls.n	80064dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e06c      	b.n	80065b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d902      	bls.n	80064f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	3303      	adds	r3, #3
 80064fc:	089b      	lsrs	r3, r3, #2
 80064fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006500:	e02b      	b.n	800655a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	695a      	ldr	r2, [r3, #20]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	429a      	cmp	r2, r3
 8006516:	d902      	bls.n	800651e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	3303      	adds	r3, #3
 8006522:	089b      	lsrs	r3, r3, #2
 8006524:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68d9      	ldr	r1, [r3, #12]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	b2da      	uxtb	r2, r3
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006536:	b2db      	uxtb	r3, r3
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	4603      	mov	r3, r0
 800653c:	6978      	ldr	r0, [r7, #20]
 800653e:	f003 fa47 	bl	80099d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	441a      	add	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	441a      	add	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	b29b      	uxth	r3, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	429a      	cmp	r2, r3
 800656e:	d809      	bhi.n	8006584 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	699a      	ldr	r2, [r3, #24]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006578:	429a      	cmp	r2, r3
 800657a:	d203      	bcs.n	8006584 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1be      	bne.n	8006502 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	695a      	ldr	r2, [r3, #20]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	429a      	cmp	r2, r3
 800658e:	d811      	bhi.n	80065b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	2201      	movs	r2, #1
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	6939      	ldr	r1, [r7, #16]
 80065ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b0:	4013      	ands	r3, r2
 80065b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	333c      	adds	r3, #60	; 0x3c
 80065d8:	3304      	adds	r3, #4
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	f040 80a0 	bne.w	8006738 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d015      	beq.n	800662e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4a72      	ldr	r2, [pc, #456]	; (80067d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8006606:	4293      	cmp	r3, r2
 8006608:	f240 80dd 	bls.w	80067c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80d7 	beq.w	80067c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	461a      	mov	r2, r3
 8006626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662a:	6093      	str	r3, [r2, #8]
 800662c:	e0cb      	b.n	80067c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	461a      	mov	r2, r3
 8006646:	2320      	movs	r3, #32
 8006648:	6093      	str	r3, [r2, #8]
 800664a:	e0bc      	b.n	80067c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006652:	2b00      	cmp	r3, #0
 8006654:	f040 80b7 	bne.w	80067c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4a5d      	ldr	r2, [pc, #372]	; (80067d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d90f      	bls.n	8006680 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006676:	461a      	mov	r2, r3
 8006678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667c:	6093      	str	r3, [r2, #8]
 800667e:	e0a2      	b.n	80067c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006692:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	0159      	lsls	r1, r3, #5
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	440b      	add	r3, r1
 800669c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80066a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4403      	add	r3, r0
 80066b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80066ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066ce:	6819      	ldr	r1, [r3, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4403      	add	r3, r0
 80066de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4419      	add	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	4613      	mov	r3, r2
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	1a9b      	subs	r3, r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4403      	add	r3, r0
 80066f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d114      	bne.n	800672a <PCD_EP_OutXfrComplete_int+0x16a>
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	4613      	mov	r3, r2
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d108      	bne.n	800672a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006722:	461a      	mov	r2, r3
 8006724:	2101      	movs	r1, #1
 8006726:	f003 fbb3 	bl	8009e90 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f005 fbdf 	bl	800bef4 <HAL_PCD_DataOutStageCallback>
 8006736:	e046      	b.n	80067c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a26      	ldr	r2, [pc, #152]	; (80067d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d124      	bne.n	800678a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	461a      	mov	r2, r3
 8006758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675c:	6093      	str	r3, [r2, #8]
 800675e:	e032      	b.n	80067c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d008      	beq.n	800677c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006776:	461a      	mov	r2, r3
 8006778:	2320      	movs	r3, #32
 800677a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f005 fbb6 	bl	800bef4 <HAL_PCD_DataOutStageCallback>
 8006788:	e01d      	b.n	80067c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d114      	bne.n	80067ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	1a9b      	subs	r3, r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d108      	bne.n	80067ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067b2:	461a      	mov	r2, r3
 80067b4:	2100      	movs	r1, #0
 80067b6:	f003 fb6b 	bl	8009e90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f005 fb97 	bl	800bef4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	4f54300a 	.word	0x4f54300a
 80067d4:	4f54310a 	.word	0x4f54310a

080067d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	333c      	adds	r3, #60	; 0x3c
 80067f0:	3304      	adds	r3, #4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a15      	ldr	r2, [pc, #84]	; (8006860 <PCD_EP_OutSetupPacket_int+0x88>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d90e      	bls.n	800682c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006814:	2b00      	cmp	r3, #0
 8006816:	d009      	beq.n	800682c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006824:	461a      	mov	r2, r3
 8006826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f005 fb4f 	bl	800bed0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <PCD_EP_OutSetupPacket_int+0x88>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d90c      	bls.n	8006854 <PCD_EP_OutSetupPacket_int+0x7c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d108      	bne.n	8006854 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800684c:	461a      	mov	r2, r3
 800684e:	2101      	movs	r1, #1
 8006850:	f003 fb1e 	bl	8009e90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	4f54300a 	.word	0x4f54300a

08006864 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
 8006870:	4613      	mov	r3, r2
 8006872:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d107      	bne.n	8006892 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006882:	883b      	ldrh	r3, [r7, #0]
 8006884:	0419      	lsls	r1, r3, #16
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	430a      	orrs	r2, r1
 800688e:	629a      	str	r2, [r3, #40]	; 0x28
 8006890:	e028      	b.n	80068e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	0c1b      	lsrs	r3, r3, #16
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	4413      	add	r3, r2
 800689e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
 80068a4:	e00d      	b.n	80068c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	3340      	adds	r3, #64	; 0x40
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	0c1b      	lsrs	r3, r3, #16
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	4413      	add	r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	3301      	adds	r3, #1
 80068c0:	73fb      	strb	r3, [r7, #15]
 80068c2:	7bfa      	ldrb	r2, [r7, #15]
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d3ec      	bcc.n	80068a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80068cc:	883b      	ldrh	r3, [r7, #0]
 80068ce:	0418      	lsls	r0, r3, #16
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6819      	ldr	r1, [r3, #0]
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	4302      	orrs	r2, r0
 80068dc:	3340      	adds	r3, #64	; 0x40
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	887a      	ldrh	r2, [r7, #2]
 8006904:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <HAL_PCDEx_ActivateLPM+0x44>)
 8006944:	4313      	orrs	r3, r2
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	10000003 	.word	0x10000003

0800695c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800697e:	4b23      	ldr	r3, [pc, #140]	; (8006a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	4a22      	ldr	r2, [pc, #136]	; (8006a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8006984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006988:	6413      	str	r3, [r2, #64]	; 0x40
 800698a:	4b20      	ldr	r3, [pc, #128]	; (8006a0c <HAL_PWREx_EnableOverDrive+0x98>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006996:	4b1e      	ldr	r3, [pc, #120]	; (8006a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1d      	ldr	r2, [pc, #116]	; (8006a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800699c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069a2:	f7fc f839 	bl	8002a18 <HAL_GetTick>
 80069a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80069a8:	e009      	b.n	80069be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80069aa:	f7fc f835 	bl	8002a18 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b8:	d901      	bls.n	80069be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e022      	b.n	8006a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80069be:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ca:	d1ee      	bne.n	80069aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80069cc:	4b10      	ldr	r3, [pc, #64]	; (8006a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a0f      	ldr	r2, [pc, #60]	; (8006a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80069d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069d8:	f7fc f81e 	bl	8002a18 <HAL_GetTick>
 80069dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069de:	e009      	b.n	80069f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80069e0:	f7fc f81a 	bl	8002a18 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ee:	d901      	bls.n	80069f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e007      	b.n	8006a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a00:	d1ee      	bne.n	80069e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	40007000 	.word	0x40007000

08006a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e291      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 8087 	beq.w	8006b46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a38:	4b96      	ldr	r3, [pc, #600]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 030c 	and.w	r3, r3, #12
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d00c      	beq.n	8006a5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a44:	4b93      	ldr	r3, [pc, #588]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 030c 	and.w	r3, r3, #12
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d112      	bne.n	8006a76 <HAL_RCC_OscConfig+0x62>
 8006a50:	4b90      	ldr	r3, [pc, #576]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a5c:	d10b      	bne.n	8006a76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a5e:	4b8d      	ldr	r3, [pc, #564]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d06c      	beq.n	8006b44 <HAL_RCC_OscConfig+0x130>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d168      	bne.n	8006b44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e26b      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCC_OscConfig+0x7a>
 8006a80:	4b84      	ldr	r3, [pc, #528]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a83      	ldr	r2, [pc, #524]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	e02e      	b.n	8006aec <HAL_RCC_OscConfig+0xd8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10c      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x9c>
 8006a96:	4b7f      	ldr	r3, [pc, #508]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a7e      	ldr	r2, [pc, #504]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	4b7c      	ldr	r3, [pc, #496]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a7b      	ldr	r2, [pc, #492]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	e01d      	b.n	8006aec <HAL_RCC_OscConfig+0xd8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0xc0>
 8006aba:	4b76      	ldr	r3, [pc, #472]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a75      	ldr	r2, [pc, #468]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b73      	ldr	r3, [pc, #460]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a72      	ldr	r2, [pc, #456]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	e00b      	b.n	8006aec <HAL_RCC_OscConfig+0xd8>
 8006ad4:	4b6f      	ldr	r3, [pc, #444]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a6e      	ldr	r2, [pc, #440]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	4b6c      	ldr	r3, [pc, #432]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a6b      	ldr	r2, [pc, #428]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d013      	beq.n	8006b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fb ff90 	bl	8002a18 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006afc:	f7fb ff8c 	bl	8002a18 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b64      	cmp	r3, #100	; 0x64
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e21f      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0e:	4b61      	ldr	r3, [pc, #388]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f0      	beq.n	8006afc <HAL_RCC_OscConfig+0xe8>
 8006b1a:	e014      	b.n	8006b46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1c:	f7fb ff7c 	bl	8002a18 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b24:	f7fb ff78 	bl	8002a18 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b64      	cmp	r3, #100	; 0x64
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e20b      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b36:	4b57      	ldr	r3, [pc, #348]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0x110>
 8006b42:	e000      	b.n	8006b46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d069      	beq.n	8006c26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b52:	4b50      	ldr	r3, [pc, #320]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 030c 	and.w	r3, r3, #12
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b5e:	4b4d      	ldr	r3, [pc, #308]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 030c 	and.w	r3, r3, #12
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d11c      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x190>
 8006b6a:	4b4a      	ldr	r3, [pc, #296]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d116      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b76:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d005      	beq.n	8006b8e <HAL_RCC_OscConfig+0x17a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d001      	beq.n	8006b8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e1df      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8e:	4b41      	ldr	r3, [pc, #260]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	493d      	ldr	r1, [pc, #244]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ba2:	e040      	b.n	8006c26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d023      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bac:	4b39      	ldr	r3, [pc, #228]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a38      	ldr	r2, [pc, #224]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bb2:	f043 0301 	orr.w	r3, r3, #1
 8006bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fb ff2e 	bl	8002a18 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bc0:	f7fb ff2a 	bl	8002a18 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e1bd      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd2:	4b30      	ldr	r3, [pc, #192]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bde:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4929      	ldr	r1, [pc, #164]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	600b      	str	r3, [r1, #0]
 8006bf2:	e018      	b.n	8006c26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bf4:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
 8006bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c00:	f7fb ff0a 	bl	8002a18 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c08:	f7fb ff06 	bl	8002a18 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e199      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c1a:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f0      	bne.n	8006c08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d038      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d019      	beq.n	8006c6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c3a:	4b16      	ldr	r3, [pc, #88]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c3e:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c46:	f7fb fee7 	bl	8002a18 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c4e:	f7fb fee3 	bl	8002a18 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e176      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x23a>
 8006c6c:	e01a      	b.n	8006ca4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c72:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <HAL_RCC_OscConfig+0x280>)
 8006c74:	f023 0301 	bic.w	r3, r3, #1
 8006c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7a:	f7fb fecd 	bl	8002a18 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c80:	e00a      	b.n	8006c98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c82:	f7fb fec9 	bl	8002a18 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d903      	bls.n	8006c98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e15c      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
 8006c94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c98:	4b91      	ldr	r3, [pc, #580]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1ee      	bne.n	8006c82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80a4 	beq.w	8006dfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cb2:	4b8b      	ldr	r3, [pc, #556]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10d      	bne.n	8006cda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cbe:	4b88      	ldr	r3, [pc, #544]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	4a87      	ldr	r2, [pc, #540]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cca:	4b85      	ldr	r3, [pc, #532]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cda:	4b82      	ldr	r3, [pc, #520]	; (8006ee4 <HAL_RCC_OscConfig+0x4d0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d118      	bne.n	8006d18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006ce6:	4b7f      	ldr	r3, [pc, #508]	; (8006ee4 <HAL_RCC_OscConfig+0x4d0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a7e      	ldr	r2, [pc, #504]	; (8006ee4 <HAL_RCC_OscConfig+0x4d0>)
 8006cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cf2:	f7fb fe91 	bl	8002a18 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cfa:	f7fb fe8d 	bl	8002a18 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b64      	cmp	r3, #100	; 0x64
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e120      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d0c:	4b75      	ldr	r3, [pc, #468]	; (8006ee4 <HAL_RCC_OscConfig+0x4d0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f0      	beq.n	8006cfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d106      	bne.n	8006d2e <HAL_RCC_OscConfig+0x31a>
 8006d20:	4b6f      	ldr	r3, [pc, #444]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	4a6e      	ldr	r2, [pc, #440]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d2c:	e02d      	b.n	8006d8a <HAL_RCC_OscConfig+0x376>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10c      	bne.n	8006d50 <HAL_RCC_OscConfig+0x33c>
 8006d36:	4b6a      	ldr	r3, [pc, #424]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	4a69      	ldr	r2, [pc, #420]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d3c:	f023 0301 	bic.w	r3, r3, #1
 8006d40:	6713      	str	r3, [r2, #112]	; 0x70
 8006d42:	4b67      	ldr	r3, [pc, #412]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	4a66      	ldr	r2, [pc, #408]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d48:	f023 0304 	bic.w	r3, r3, #4
 8006d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d4e:	e01c      	b.n	8006d8a <HAL_RCC_OscConfig+0x376>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b05      	cmp	r3, #5
 8006d56:	d10c      	bne.n	8006d72 <HAL_RCC_OscConfig+0x35e>
 8006d58:	4b61      	ldr	r3, [pc, #388]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5c:	4a60      	ldr	r2, [pc, #384]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d5e:	f043 0304 	orr.w	r3, r3, #4
 8006d62:	6713      	str	r3, [r2, #112]	; 0x70
 8006d64:	4b5e      	ldr	r3, [pc, #376]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d68:	4a5d      	ldr	r2, [pc, #372]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d70:	e00b      	b.n	8006d8a <HAL_RCC_OscConfig+0x376>
 8006d72:	4b5b      	ldr	r3, [pc, #364]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d76:	4a5a      	ldr	r2, [pc, #360]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7e:	4b58      	ldr	r3, [pc, #352]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	4a57      	ldr	r2, [pc, #348]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006d84:	f023 0304 	bic.w	r3, r3, #4
 8006d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d015      	beq.n	8006dbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d92:	f7fb fe41 	bl	8002a18 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d98:	e00a      	b.n	8006db0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d9a:	f7fb fe3d 	bl	8002a18 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e0ce      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0ee      	beq.n	8006d9a <HAL_RCC_OscConfig+0x386>
 8006dbc:	e014      	b.n	8006de8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dbe:	f7fb fe2b 	bl	8002a18 <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc4:	e00a      	b.n	8006ddc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc6:	f7fb fe27 	bl	8002a18 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e0b8      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ddc:	4b40      	ldr	r3, [pc, #256]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1ee      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d105      	bne.n	8006dfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dee:	4b3c      	ldr	r3, [pc, #240]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	4a3b      	ldr	r2, [pc, #236]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80a4 	beq.w	8006f4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e04:	4b36      	ldr	r3, [pc, #216]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 030c 	and.w	r3, r3, #12
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d06b      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d149      	bne.n	8006eac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e18:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a30      	ldr	r2, [pc, #192]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e24:	f7fb fdf8 	bl	8002a18 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e2c:	f7fb fdf4 	bl	8002a18 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e087      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3e:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f0      	bne.n	8006e2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69da      	ldr	r2, [r3, #28]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	019b      	lsls	r3, r3, #6
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	085b      	lsrs	r3, r3, #1
 8006e62:	3b01      	subs	r3, #1
 8006e64:	041b      	lsls	r3, r3, #16
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	061b      	lsls	r3, r3, #24
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	4a1b      	ldr	r2, [pc, #108]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e84:	f7fb fdc8 	bl	8002a18 <HAL_GetTick>
 8006e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e8c:	f7fb fdc4 	bl	8002a18 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e057      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0x478>
 8006eaa:	e04f      	b.n	8006f4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eac:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a0b      	ldr	r2, [pc, #44]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fb fdae 	bl	8002a18 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec0:	f7fb fdaa 	bl	8002a18 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e03d      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <HAL_RCC_OscConfig+0x4cc>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x4ac>
 8006ede:	e035      	b.n	8006f4c <HAL_RCC_OscConfig+0x538>
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ee8:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <HAL_RCC_OscConfig+0x544>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d028      	beq.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d121      	bne.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d11a      	bne.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f18:	4013      	ands	r3, r2
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d111      	bne.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	3b01      	subs	r3, #1
 8006f32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d107      	bne.n	8006f48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40023800 	.word	0x40023800

08006f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0d0      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f74:	4b6a      	ldr	r3, [pc, #424]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d910      	bls.n	8006fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f82:	4b67      	ldr	r3, [pc, #412]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f023 020f 	bic.w	r2, r3, #15
 8006f8a:	4965      	ldr	r1, [pc, #404]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f92:	4b63      	ldr	r3, [pc, #396]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d001      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0b8      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d020      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fbc:	4b59      	ldr	r3, [pc, #356]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	4a58      	ldr	r2, [pc, #352]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fd4:	4b53      	ldr	r3, [pc, #332]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4a52      	ldr	r2, [pc, #328]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fe0:	4b50      	ldr	r3, [pc, #320]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	494d      	ldr	r1, [pc, #308]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d040      	beq.n	8007080 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d107      	bne.n	8007016 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007006:	4b47      	ldr	r3, [pc, #284]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d115      	bne.n	800703e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e07f      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d107      	bne.n	800702e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800701e:	4b41      	ldr	r3, [pc, #260]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e073      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702e:	4b3d      	ldr	r3, [pc, #244]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e06b      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800703e:	4b39      	ldr	r3, [pc, #228]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f023 0203 	bic.w	r2, r3, #3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	4936      	ldr	r1, [pc, #216]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 800704c:	4313      	orrs	r3, r2
 800704e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007050:	f7fb fce2 	bl	8002a18 <HAL_GetTick>
 8007054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007056:	e00a      	b.n	800706e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007058:	f7fb fcde 	bl	8002a18 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	f241 3288 	movw	r2, #5000	; 0x1388
 8007066:	4293      	cmp	r3, r2
 8007068:	d901      	bls.n	800706e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e053      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800706e:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 020c 	and.w	r2, r3, #12
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	429a      	cmp	r2, r3
 800707e:	d1eb      	bne.n	8007058 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007080:	4b27      	ldr	r3, [pc, #156]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d210      	bcs.n	80070b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800708e:	4b24      	ldr	r3, [pc, #144]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 020f 	bic.w	r2, r3, #15
 8007096:	4922      	ldr	r1, [pc, #136]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4313      	orrs	r3, r2
 800709c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800709e:	4b20      	ldr	r3, [pc, #128]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d001      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e032      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070bc:	4b19      	ldr	r3, [pc, #100]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	4916      	ldr	r1, [pc, #88]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070da:	4b12      	ldr	r3, [pc, #72]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	490e      	ldr	r1, [pc, #56]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070ee:	f000 f821 	bl	8007134 <HAL_RCC_GetSysClockFreq>
 80070f2:	4602      	mov	r2, r0
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	490a      	ldr	r1, [pc, #40]	; (8007128 <HAL_RCC_ClockConfig+0x1cc>)
 8007100:	5ccb      	ldrb	r3, [r1, r3]
 8007102:	fa22 f303 	lsr.w	r3, r2, r3
 8007106:	4a09      	ldr	r2, [pc, #36]	; (800712c <HAL_RCC_ClockConfig+0x1d0>)
 8007108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800710a:	4b09      	ldr	r3, [pc, #36]	; (8007130 <HAL_RCC_ClockConfig+0x1d4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f7fb fc3e 	bl	8002990 <HAL_InitTick>

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40023c00 	.word	0x40023c00
 8007124:	40023800 	.word	0x40023800
 8007128:	0800c764 	.word	0x0800c764
 800712c:	2000000c 	.word	0x2000000c
 8007130:	20000010 	.word	0x20000010

08007134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007134:	b5b0      	push	{r4, r5, r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800713a:	2100      	movs	r1, #0
 800713c:	6079      	str	r1, [r7, #4]
 800713e:	2100      	movs	r1, #0
 8007140:	60f9      	str	r1, [r7, #12]
 8007142:	2100      	movs	r1, #0
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007146:	2100      	movs	r1, #0
 8007148:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800714a:	4952      	ldr	r1, [pc, #328]	; (8007294 <HAL_RCC_GetSysClockFreq+0x160>)
 800714c:	6889      	ldr	r1, [r1, #8]
 800714e:	f001 010c 	and.w	r1, r1, #12
 8007152:	2908      	cmp	r1, #8
 8007154:	d00d      	beq.n	8007172 <HAL_RCC_GetSysClockFreq+0x3e>
 8007156:	2908      	cmp	r1, #8
 8007158:	f200 8094 	bhi.w	8007284 <HAL_RCC_GetSysClockFreq+0x150>
 800715c:	2900      	cmp	r1, #0
 800715e:	d002      	beq.n	8007166 <HAL_RCC_GetSysClockFreq+0x32>
 8007160:	2904      	cmp	r1, #4
 8007162:	d003      	beq.n	800716c <HAL_RCC_GetSysClockFreq+0x38>
 8007164:	e08e      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007166:	4b4c      	ldr	r3, [pc, #304]	; (8007298 <HAL_RCC_GetSysClockFreq+0x164>)
 8007168:	60bb      	str	r3, [r7, #8]
      break;
 800716a:	e08e      	b.n	800728a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800716c:	4b4b      	ldr	r3, [pc, #300]	; (800729c <HAL_RCC_GetSysClockFreq+0x168>)
 800716e:	60bb      	str	r3, [r7, #8]
      break;
 8007170:	e08b      	b.n	800728a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007172:	4948      	ldr	r1, [pc, #288]	; (8007294 <HAL_RCC_GetSysClockFreq+0x160>)
 8007174:	6849      	ldr	r1, [r1, #4]
 8007176:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800717a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800717c:	4945      	ldr	r1, [pc, #276]	; (8007294 <HAL_RCC_GetSysClockFreq+0x160>)
 800717e:	6849      	ldr	r1, [r1, #4]
 8007180:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007184:	2900      	cmp	r1, #0
 8007186:	d024      	beq.n	80071d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007188:	4942      	ldr	r1, [pc, #264]	; (8007294 <HAL_RCC_GetSysClockFreq+0x160>)
 800718a:	6849      	ldr	r1, [r1, #4]
 800718c:	0989      	lsrs	r1, r1, #6
 800718e:	4608      	mov	r0, r1
 8007190:	f04f 0100 	mov.w	r1, #0
 8007194:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007198:	f04f 0500 	mov.w	r5, #0
 800719c:	ea00 0204 	and.w	r2, r0, r4
 80071a0:	ea01 0305 	and.w	r3, r1, r5
 80071a4:	493d      	ldr	r1, [pc, #244]	; (800729c <HAL_RCC_GetSysClockFreq+0x168>)
 80071a6:	fb01 f003 	mul.w	r0, r1, r3
 80071aa:	2100      	movs	r1, #0
 80071ac:	fb01 f102 	mul.w	r1, r1, r2
 80071b0:	1844      	adds	r4, r0, r1
 80071b2:	493a      	ldr	r1, [pc, #232]	; (800729c <HAL_RCC_GetSysClockFreq+0x168>)
 80071b4:	fba2 0101 	umull	r0, r1, r2, r1
 80071b8:	1863      	adds	r3, r4, r1
 80071ba:	4619      	mov	r1, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	461a      	mov	r2, r3
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	f7f9 f82c 	bl	8000220 <__aeabi_uldivmod>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4613      	mov	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	e04a      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071d2:	4b30      	ldr	r3, [pc, #192]	; (8007294 <HAL_RCC_GetSysClockFreq+0x160>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	099b      	lsrs	r3, r3, #6
 80071d8:	461a      	mov	r2, r3
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071e2:	f04f 0100 	mov.w	r1, #0
 80071e6:	ea02 0400 	and.w	r4, r2, r0
 80071ea:	ea03 0501 	and.w	r5, r3, r1
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	014b      	lsls	r3, r1, #5
 80071fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007200:	0142      	lsls	r2, r0, #5
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	1b00      	subs	r0, r0, r4
 8007208:	eb61 0105 	sbc.w	r1, r1, r5
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	018b      	lsls	r3, r1, #6
 8007216:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800721a:	0182      	lsls	r2, r0, #6
 800721c:	1a12      	subs	r2, r2, r0
 800721e:	eb63 0301 	sbc.w	r3, r3, r1
 8007222:	f04f 0000 	mov.w	r0, #0
 8007226:	f04f 0100 	mov.w	r1, #0
 800722a:	00d9      	lsls	r1, r3, #3
 800722c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007230:	00d0      	lsls	r0, r2, #3
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	1912      	adds	r2, r2, r4
 8007238:	eb45 0303 	adc.w	r3, r5, r3
 800723c:	f04f 0000 	mov.w	r0, #0
 8007240:	f04f 0100 	mov.w	r1, #0
 8007244:	0299      	lsls	r1, r3, #10
 8007246:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800724a:	0290      	lsls	r0, r2, #10
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4610      	mov	r0, r2
 8007252:	4619      	mov	r1, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	461a      	mov	r2, r3
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	f7f8 ffe0 	bl	8000220 <__aeabi_uldivmod>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4613      	mov	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <HAL_RCC_GetSysClockFreq+0x160>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	0c1b      	lsrs	r3, r3, #16
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	3301      	adds	r3, #1
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007280:	60bb      	str	r3, [r7, #8]
      break;
 8007282:	e002      	b.n	800728a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007284:	4b04      	ldr	r3, [pc, #16]	; (8007298 <HAL_RCC_GetSysClockFreq+0x164>)
 8007286:	60bb      	str	r3, [r7, #8]
      break;
 8007288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800728a:	68bb      	ldr	r3, [r7, #8]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bdb0      	pop	{r4, r5, r7, pc}
 8007294:	40023800 	.word	0x40023800
 8007298:	00f42400 	.word	0x00f42400
 800729c:	017d7840 	.word	0x017d7840

080072a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072a4:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072a6:	681b      	ldr	r3, [r3, #0]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	2000000c 	.word	0x2000000c

080072b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d012      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072dc:	4b65      	ldr	r3, [pc, #404]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	4a64      	ldr	r2, [pc, #400]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80072e6:	6093      	str	r3, [r2, #8]
 80072e8:	4b62      	ldr	r3, [pc, #392]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	4960      	ldr	r1, [pc, #384]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80072fe:	2301      	movs	r3, #1
 8007300:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d017      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800730e:	4b59      	ldr	r3, [pc, #356]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731c:	4955      	ldr	r1, [pc, #340]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800732c:	d101      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800732e:	2301      	movs	r3, #1
 8007330:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800733a:	2301      	movs	r3, #1
 800733c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d017      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800734a:	4b4a      	ldr	r3, [pc, #296]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800734c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007350:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	4946      	ldr	r1, [pc, #280]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800735a:	4313      	orrs	r3, r2
 800735c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007368:	d101      	bne.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800736a:	2301      	movs	r3, #1
 800736c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007376:	2301      	movs	r3, #1
 8007378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 808b 	beq.w	800749e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007388:	4b3a      	ldr	r3, [pc, #232]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	4a39      	ldr	r2, [pc, #228]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800738e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007392:	6413      	str	r3, [r2, #64]	; 0x40
 8007394:	4b37      	ldr	r3, [pc, #220]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073a0:	4b35      	ldr	r3, [pc, #212]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a34      	ldr	r2, [pc, #208]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ac:	f7fb fb34 	bl	8002a18 <HAL_GetTick>
 80073b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b4:	f7fb fb30 	bl	8002a18 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b64      	cmp	r3, #100	; 0x64
 80073c0:	d901      	bls.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e2bc      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073c6:	4b2c      	ldr	r3, [pc, #176]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f0      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073d2:	4b28      	ldr	r3, [pc, #160]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d035      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d02e      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073f0:	4b20      	ldr	r3, [pc, #128]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073fa:	4b1e      	ldr	r3, [pc, #120]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fe:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007404:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007406:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740a:	4a1a      	ldr	r2, [pc, #104]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800740c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007410:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007412:	4a18      	ldr	r2, [pc, #96]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007418:	4b16      	ldr	r3, [pc, #88]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800741a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b01      	cmp	r3, #1
 8007422:	d114      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007424:	f7fb faf8 	bl	8002a18 <HAL_GetTick>
 8007428:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800742a:	e00a      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800742c:	f7fb faf4 	bl	8002a18 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	f241 3288 	movw	r2, #5000	; 0x1388
 800743a:	4293      	cmp	r3, r2
 800743c:	d901      	bls.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e27e      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007442:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0ee      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745a:	d111      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007468:	4b04      	ldr	r3, [pc, #16]	; (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800746a:	400b      	ands	r3, r1
 800746c:	4901      	ldr	r1, [pc, #4]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800746e:	4313      	orrs	r3, r2
 8007470:	608b      	str	r3, [r1, #8]
 8007472:	e00b      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007474:	40023800 	.word	0x40023800
 8007478:	40007000 	.word	0x40007000
 800747c:	0ffffcff 	.word	0x0ffffcff
 8007480:	4ba4      	ldr	r3, [pc, #656]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	4aa3      	ldr	r2, [pc, #652]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007486:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800748a:	6093      	str	r3, [r2, #8]
 800748c:	4ba1      	ldr	r3, [pc, #644]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800748e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007498:	499e      	ldr	r1, [pc, #632]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800749a:	4313      	orrs	r3, r2
 800749c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0310 	and.w	r3, r3, #16
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d010      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074aa:	4b9a      	ldr	r3, [pc, #616]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b0:	4a98      	ldr	r2, [pc, #608]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80074ba:	4b96      	ldr	r3, [pc, #600]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c4:	4993      	ldr	r1, [pc, #588]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074d8:	4b8e      	ldr	r3, [pc, #568]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e6:	498b      	ldr	r1, [pc, #556]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074fa:	4b86      	ldr	r3, [pc, #536]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007500:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007508:	4982      	ldr	r1, [pc, #520]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800751c:	4b7d      	ldr	r3, [pc, #500]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800751e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007522:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800752a:	497a      	ldr	r1, [pc, #488]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800753e:	4b75      	ldr	r3, [pc, #468]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007544:	f023 0203 	bic.w	r2, r3, #3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754c:	4971      	ldr	r1, [pc, #452]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007560:	4b6c      	ldr	r3, [pc, #432]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007566:	f023 020c 	bic.w	r2, r3, #12
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	4969      	ldr	r1, [pc, #420]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007582:	4b64      	ldr	r3, [pc, #400]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007590:	4960      	ldr	r1, [pc, #384]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075a4:	4b5b      	ldr	r3, [pc, #364]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b2:	4958      	ldr	r1, [pc, #352]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80075c6:	4b53      	ldr	r3, [pc, #332]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d4:	494f      	ldr	r1, [pc, #316]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80075e8:	4b4a      	ldr	r3, [pc, #296]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	4947      	ldr	r1, [pc, #284]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800760a:	4b42      	ldr	r3, [pc, #264]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800760c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007610:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007618:	493e      	ldr	r1, [pc, #248]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800761a:	4313      	orrs	r3, r2
 800761c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800762c:	4b39      	ldr	r3, [pc, #228]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763a:	4936      	ldr	r1, [pc, #216]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800763c:	4313      	orrs	r3, r2
 800763e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d011      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800764e:	4b31      	ldr	r3, [pc, #196]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007654:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800765c:	492d      	ldr	r1, [pc, #180]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800766c:	d101      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800766e:	2301      	movs	r3, #1
 8007670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800767e:	4b25      	ldr	r3, [pc, #148]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007684:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768c:	4921      	ldr	r1, [pc, #132]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800768e:	4313      	orrs	r3, r2
 8007690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00a      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076a0:	4b1c      	ldr	r3, [pc, #112]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ae:	4919      	ldr	r1, [pc, #100]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80076c2:	4b14      	ldr	r3, [pc, #80]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d0:	4910      	ldr	r1, [pc, #64]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d006      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x434>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 809d 	beq.w	8007826 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076ec:	4b09      	ldr	r3, [pc, #36]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a08      	ldr	r2, [pc, #32]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f8:	f7fb f98e 	bl	8002a18 <HAL_GetTick>
 80076fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076fe:	e00b      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007700:	f7fb f98a 	bl	8002a18 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b64      	cmp	r3, #100	; 0x64
 800770c:	d904      	bls.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e116      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007712:	bf00      	nop
 8007714:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007718:	4b8b      	ldr	r3, [pc, #556]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1ed      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d017      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d113      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007738:	4b83      	ldr	r3, [pc, #524]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800773a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773e:	0e1b      	lsrs	r3, r3, #24
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	019a      	lsls	r2, r3, #6
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	061b      	lsls	r3, r3, #24
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	071b      	lsls	r3, r3, #28
 8007758:	497b      	ldr	r1, [pc, #492]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d004      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007774:	d00a      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800777e:	2b00      	cmp	r3, #0
 8007780:	d024      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800778a:	d11f      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800778c:	4b6e      	ldr	r3, [pc, #440]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800778e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007792:	0f1b      	lsrs	r3, r3, #28
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	019a      	lsls	r2, r3, #6
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	061b      	lsls	r3, r3, #24
 80077a6:	431a      	orrs	r2, r3
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	071b      	lsls	r3, r3, #28
 80077ac:	4966      	ldr	r1, [pc, #408]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80077b4:	4b64      	ldr	r3, [pc, #400]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ba:	f023 021f 	bic.w	r2, r3, #31
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	4960      	ldr	r1, [pc, #384]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00d      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	019a      	lsls	r2, r3, #6
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	061b      	lsls	r3, r3, #24
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	071b      	lsls	r3, r3, #28
 80077ec:	4956      	ldr	r1, [pc, #344]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077f4:	4b54      	ldr	r3, [pc, #336]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a53      	ldr	r2, [pc, #332]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007800:	f7fb f90a 	bl	8002a18 <HAL_GetTick>
 8007804:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007806:	e008      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007808:	f7fb f906 	bl	8002a18 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b64      	cmp	r3, #100	; 0x64
 8007814:	d901      	bls.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e092      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800781a:	4b4b      	ldr	r3, [pc, #300]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f0      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b01      	cmp	r3, #1
 800782a:	f040 8088 	bne.w	800793e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800782e:	4b46      	ldr	r3, [pc, #280]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a45      	ldr	r2, [pc, #276]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800783a:	f7fb f8ed 	bl	8002a18 <HAL_GetTick>
 800783e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007840:	e008      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007842:	f7fb f8e9 	bl	8002a18 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b64      	cmp	r3, #100	; 0x64
 800784e:	d901      	bls.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e075      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007854:	4b3c      	ldr	r3, [pc, #240]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800785c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007860:	d0ef      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007872:	2b00      	cmp	r3, #0
 8007874:	d009      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800787e:	2b00      	cmp	r3, #0
 8007880:	d024      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	2b00      	cmp	r3, #0
 8007888:	d120      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800788a:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800788c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007890:	0c1b      	lsrs	r3, r3, #16
 8007892:	f003 0303 	and.w	r3, r3, #3
 8007896:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	019a      	lsls	r2, r3, #6
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	041b      	lsls	r3, r3, #16
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	061b      	lsls	r3, r3, #24
 80078aa:	4927      	ldr	r1, [pc, #156]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078b2:	4b25      	ldr	r3, [pc, #148]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	4920      	ldr	r1, [pc, #128]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d018      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x652>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078e0:	d113      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078e2:	4b19      	ldr	r3, [pc, #100]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e8:	0e1b      	lsrs	r3, r3, #24
 80078ea:	f003 030f 	and.w	r3, r3, #15
 80078ee:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	019a      	lsls	r2, r3, #6
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	041b      	lsls	r3, r3, #16
 80078fc:	431a      	orrs	r2, r3
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	061b      	lsls	r3, r3, #24
 8007902:	4911      	ldr	r1, [pc, #68]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800790a:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a0e      	ldr	r2, [pc, #56]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007916:	f7fb f87f 	bl	8002a18 <HAL_GetTick>
 800791a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800791c:	e008      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800791e:	f7fb f87b 	bl	8002a18 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b64      	cmp	r3, #100	; 0x64
 800792a:	d901      	bls.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e007      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007930:	4b05      	ldr	r3, [pc, #20]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800793c:	d1ef      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3720      	adds	r7, #32
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	40023800 	.word	0x40023800

0800794c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e09d      	b.n	8007a9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	2b00      	cmp	r3, #0
 8007964:	d108      	bne.n	8007978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800796e:	d009      	beq.n	8007984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	61da      	str	r2, [r3, #28]
 8007976:	e005      	b.n	8007984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7fa fe82 	bl	80026a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079c4:	d902      	bls.n	80079cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e002      	b.n	80079d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80079da:	d007      	beq.n	80079ec <HAL_SPI_Init+0xa0>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079e4:	d002      	beq.n	80079ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2e:	ea42 0103 	orr.w	r1, r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	0c1b      	lsrs	r3, r3, #16
 8007a48:	f003 0204 	and.w	r2, r3, #4
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	f003 0308 	and.w	r3, r3, #8
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a68:	ea42 0103 	orr.w	r1, r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69da      	ldr	r2, [r3, #28]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_SPI_Transmit_IT+0x20>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e072      	b.n	8007baa <HAL_SPI_Transmit_IT+0x106>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_SPI_Transmit_IT+0x34>
 8007ad2:	88fb      	ldrh	r3, [r7, #6]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d102      	bne.n	8007ade <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007adc:	e060      	b.n	8007ba0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d002      	beq.n	8007af0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8007aea:	2302      	movs	r3, #2
 8007aec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007aee:	e057      	b.n	8007ba0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2203      	movs	r2, #3
 8007af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	88fa      	ldrh	r2, [r7, #6]
 8007b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	88fa      	ldrh	r2, [r7, #6]
 8007b0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b34:	d903      	bls.n	8007b3e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4a1f      	ldr	r2, [pc, #124]	; (8007bb8 <HAL_SPI_Transmit_IT+0x114>)
 8007b3a:	651a      	str	r2, [r3, #80]	; 0x50
 8007b3c:	e002      	b.n	8007b44 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4a1e      	ldr	r2, [pc, #120]	; (8007bbc <HAL_SPI_Transmit_IT+0x118>)
 8007b42:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4c:	d10f      	bne.n	8007b6e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007b7c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	d008      	beq.n	8007b9e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	e000      	b.n	8007ba0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8007b9e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	080083b7 	.word	0x080083b7
 8007bbc:	08008371 	.word	0x08008371

08007bc0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d110      	bne.n	8007bfc <HAL_SPI_Receive_IT+0x3c>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007be2:	d10b      	bne.n	8007bfc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2204      	movs	r2, #4
 8007be8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 f894 	bl	8007d20 <HAL_SPI_TransmitReceive_IT>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	e089      	b.n	8007d10 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d101      	bne.n	8007c0a <HAL_SPI_Receive_IT+0x4a>
 8007c06:	2302      	movs	r3, #2
 8007c08:	e082      	b.n	8007d10 <HAL_SPI_Receive_IT+0x150>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d002      	beq.n	8007c24 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c22:	e070      	b.n	8007d06 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <HAL_SPI_Receive_IT+0x70>
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c34:	e067      	b.n	8007d06 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2204      	movs	r2, #4
 8007c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	88fa      	ldrh	r2, [r7, #6]
 8007c4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c7a:	d90b      	bls.n	8007c94 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c8a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4a22      	ldr	r2, [pc, #136]	; (8007d18 <HAL_SPI_Receive_IT+0x158>)
 8007c90:	64da      	str	r2, [r3, #76]	; 0x4c
 8007c92:	e00a      	b.n	8007caa <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ca2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4a1d      	ldr	r2, [pc, #116]	; (8007d1c <HAL_SPI_Receive_IT+0x15c>)
 8007ca8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb2:	d10f      	bne.n	8007cd4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007cd2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007ce2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d008      	beq.n	8007d04 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	e000      	b.n	8007d06 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8007d04:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	08008325 	.word	0x08008325
 8007d1c:	080082d5 	.word	0x080082d5

08007d20 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_SPI_TransmitReceive_IT+0x20>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e091      	b.n	8007e64 <HAL_SPI_TransmitReceive_IT+0x144>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d4e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d56:	7dbb      	ldrb	r3, [r7, #22]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d00d      	beq.n	8007d78 <HAL_SPI_TransmitReceive_IT+0x58>
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d62:	d106      	bne.n	8007d72 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <HAL_SPI_TransmitReceive_IT+0x52>
 8007d6c:	7dbb      	ldrb	r3, [r7, #22]
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d002      	beq.n	8007d78 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007d72:	2302      	movs	r3, #2
 8007d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d76:	e070      	b.n	8007e5a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007d84:	887b      	ldrh	r3, [r7, #2]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d8e:	e064      	b.n	8007e5a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d003      	beq.n	8007da4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2205      	movs	r2, #5
 8007da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	887a      	ldrh	r2, [r7, #2]
 8007db4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	887a      	ldrh	r2, [r7, #2]
 8007dba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	887a      	ldrh	r2, [r7, #2]
 8007dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	887a      	ldrh	r2, [r7, #2]
 8007dce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dda:	d906      	bls.n	8007dea <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a24      	ldr	r2, [pc, #144]	; (8007e70 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007de0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4a23      	ldr	r2, [pc, #140]	; (8007e74 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007de6:	651a      	str	r2, [r3, #80]	; 0x50
 8007de8:	e005      	b.n	8007df6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a22      	ldr	r2, [pc, #136]	; (8007e78 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007dee:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a22      	ldr	r2, [pc, #136]	; (8007e7c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007df4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dfe:	d802      	bhi.n	8007e06 <HAL_SPI_TransmitReceive_IT+0xe6>
 8007e00:	887b      	ldrh	r3, [r7, #2]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d908      	bls.n	8007e18 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e14:	605a      	str	r2, [r3, #4]
 8007e16:	e007      	b.n	8007e28 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e26:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007e36:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e42:	2b40      	cmp	r3, #64	; 0x40
 8007e44:	d008      	beq.n	8007e58 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	e000      	b.n	8007e5a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007e58:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	371c      	adds	r7, #28
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	0800820f 	.word	0x0800820f
 8007e74:	08008275 	.word	0x08008275
 8007e78:	080080bf 	.word	0x080080bf
 8007e7c:	0800817d 	.word	0x0800817d

08007e80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	099b      	lsrs	r3, r3, #6
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10f      	bne.n	8007ec4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	099b      	lsrs	r3, r3, #6
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3
    return;
 8007ec2:	e0d7      	b.n	8008074 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	085b      	lsrs	r3, r3, #1
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00a      	beq.n	8007ee6 <HAL_SPI_IRQHandler+0x66>
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	09db      	lsrs	r3, r3, #7
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
    return;
 8007ee4:	e0c6      	b.n	8008074 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	095b      	lsrs	r3, r3, #5
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10c      	bne.n	8007f0c <HAL_SPI_IRQHandler+0x8c>
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	099b      	lsrs	r3, r3, #6
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d106      	bne.n	8007f0c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	0a1b      	lsrs	r3, r3, #8
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80b4 	beq.w	8008074 <HAL_SPI_IRQHandler+0x1f4>
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 80ad 	beq.w	8008074 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	099b      	lsrs	r3, r3, #6
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d023      	beq.n	8007f6e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d011      	beq.n	8007f56 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f36:	f043 0204 	orr.w	r2, r3, #4
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	617b      	str	r3, [r7, #20]
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	e00b      	b.n	8007f6e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	613b      	str	r3, [r7, #16]
 8007f6a:	693b      	ldr	r3, [r7, #16]
        return;
 8007f6c:	e082      	b.n	8008074 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	095b      	lsrs	r3, r3, #5
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d014      	beq.n	8007fa4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f7e:	f043 0201 	orr.w	r2, r3, #1
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	0a1b      	lsrs	r3, r3, #8
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00c      	beq.n	8007fca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb4:	f043 0208 	orr.w	r2, r3, #8
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60bb      	str	r3, [r7, #8]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	60bb      	str	r3, [r7, #8]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d04f      	beq.n	8008072 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fe0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <HAL_SPI_IRQHandler+0x17e>
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d034      	beq.n	8008068 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0203 	bic.w	r2, r2, #3
 800800c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008012:	2b00      	cmp	r3, #0
 8008014:	d011      	beq.n	800803a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801a:	4a18      	ldr	r2, [pc, #96]	; (800807c <HAL_SPI_IRQHandler+0x1fc>)
 800801c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008022:	4618      	mov	r0, r3
 8008024:	f7fb fb91 	bl	800374a <HAL_DMA_Abort_IT>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803e:	2b00      	cmp	r3, #0
 8008040:	d016      	beq.n	8008070 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	4a0d      	ldr	r2, [pc, #52]	; (800807c <HAL_SPI_IRQHandler+0x1fc>)
 8008048:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	4618      	mov	r0, r3
 8008050:	f7fb fb7b 	bl	800374a <HAL_DMA_Abort_IT>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800805e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008066:	e003      	b.n	8008070 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f809 	bl	8008080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800806e:	e000      	b.n	8008072 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008070:	bf00      	nop
    return;
 8008072:	bf00      	nop
  }
}
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	08008095 	.word	0x08008095

08008080 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff ffe5 	bl	8008080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080b6:	bf00      	nop
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d923      	bls.n	800811a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	b292      	uxth	r2, r2
 80080de:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	1c9a      	adds	r2, r3, #2
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b02      	subs	r3, #2
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008102:	b29b      	uxth	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	d11f      	bne.n	8008148 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008116:	605a      	str	r2, [r3, #4]
 8008118:	e016      	b.n	8008148 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f103 020c 	add.w	r2, r3, #12
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	7812      	ldrb	r2, [r2, #0]
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10f      	bne.n	8008174 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008162:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fafc 	bl	800876c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008188:	b29b      	uxth	r3, r3
 800818a:	2b01      	cmp	r3, #1
 800818c:	d912      	bls.n	80081b4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008192:	881a      	ldrh	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	1c9a      	adds	r2, r3, #2
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	3b02      	subs	r3, #2
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081b2:	e012      	b.n	80081da <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	330c      	adds	r3, #12
 80081be:	7812      	ldrb	r2, [r2, #0]
 80081c0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	3b01      	subs	r3, #1
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081de:	b29b      	uxth	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d110      	bne.n	8008206 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081f2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d102      	bne.n	8008206 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fab3 	bl	800876c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	b292      	uxth	r2, r2
 8008222:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008228:	1c9a      	adds	r2, r3, #2
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008246:	b29b      	uxth	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10f      	bne.n	800826c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800825a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa80 	bl	800876c <SPI_CloseRxTx_ISR>
    }
  }
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	881a      	ldrh	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	1c9a      	adds	r2, r3, #2
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d110      	bne.n	80082cc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082b8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d102      	bne.n	80082cc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fa50 	bl	800876c <SPI_CloseRxTx_ISR>
    }
  }
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f103 020c 	add.w	r2, r3, #12
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e8:	7812      	ldrb	r2, [r2, #0]
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082fe:	b29b      	uxth	r3, r3
 8008300:	3b01      	subs	r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008310:	b29b      	uxth	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d102      	bne.n	800831c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa6a 	bl	80087f0 <SPI_CloseRx_ISR>
  }
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	b292      	uxth	r2, r2
 8008338:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	1c9a      	adds	r2, r3, #2
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800834a:	b29b      	uxth	r3, r3
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800835c:	b29b      	uxth	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d102      	bne.n	8008368 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fa44 	bl	80087f0 <SPI_CloseRx_ISR>
  }
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	330c      	adds	r3, #12
 8008382:	7812      	ldrb	r2, [r2, #0]
 8008384:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008394:	b29b      	uxth	r3, r3
 8008396:	3b01      	subs	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fa51 	bl	8008850 <SPI_CloseTx_ISR>
  }
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	881a      	ldrh	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	1c9a      	adds	r2, r3, #2
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d102      	bne.n	80083f2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa2f 	bl	8008850 <SPI_CloseTx_ISR>
  }
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b088      	sub	sp, #32
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	4613      	mov	r3, r2
 800840a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800840c:	f7fa fb04 	bl	8002a18 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	1a9b      	subs	r3, r3, r2
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	4413      	add	r3, r2
 800841a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800841c:	f7fa fafc 	bl	8002a18 <HAL_GetTick>
 8008420:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008422:	4b39      	ldr	r3, [pc, #228]	; (8008508 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	015b      	lsls	r3, r3, #5
 8008428:	0d1b      	lsrs	r3, r3, #20
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	fb02 f303 	mul.w	r3, r2, r3
 8008430:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008432:	e054      	b.n	80084de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d050      	beq.n	80084de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800843c:	f7fa faec 	bl	8002a18 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	429a      	cmp	r2, r3
 800844a:	d902      	bls.n	8008452 <SPI_WaitFlagStateUntilTimeout+0x56>
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d13d      	bne.n	80084ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008460:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800846a:	d111      	bne.n	8008490 <SPI_WaitFlagStateUntilTimeout+0x94>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008474:	d004      	beq.n	8008480 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800847e:	d107      	bne.n	8008490 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800848e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008498:	d10f      	bne.n	80084ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e017      	b.n	80084fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	3b01      	subs	r3, #1
 80084dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4013      	ands	r3, r2
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	bf0c      	ite	eq
 80084ee:	2301      	moveq	r3, #1
 80084f0:	2300      	movne	r3, #0
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	461a      	mov	r2, r3
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d19b      	bne.n	8008434 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3720      	adds	r7, #32
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	2000000c 	.word	0x2000000c

0800850c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800851a:	f7fa fa7d 	bl	8002a18 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	4413      	add	r3, r2
 8008528:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800852a:	f7fa fa75 	bl	8002a18 <HAL_GetTick>
 800852e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008530:	4b3e      	ldr	r3, [pc, #248]	; (800862c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	00da      	lsls	r2, r3, #3
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	0d1b      	lsrs	r3, r3, #20
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	fb02 f303 	mul.w	r3, r2, r3
 8008546:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8008548:	e062      	b.n	8008610 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008550:	d109      	bne.n	8008566 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d106      	bne.n	8008566 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	330c      	adds	r3, #12
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008564:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d050      	beq.n	8008610 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800856e:	f7fa fa53 	bl	8002a18 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	429a      	cmp	r2, r3
 800857c:	d902      	bls.n	8008584 <SPI_WaitFifoStateUntilTimeout+0x78>
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d13d      	bne.n	8008600 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008592:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800859c:	d111      	bne.n	80085c2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a6:	d004      	beq.n	80085b2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b0:	d107      	bne.n	80085c2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ca:	d10f      	bne.n	80085ec <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e010      	b.n	8008622 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	3b01      	subs	r3, #1
 800860e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689a      	ldr	r2, [r3, #8]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	4013      	ands	r3, r2
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d194      	bne.n	800854a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3720      	adds	r7, #32
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	2000000c 	.word	0x2000000c

08008630 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008644:	d111      	bne.n	800866a <SPI_EndRxTransaction+0x3a>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800864e:	d004      	beq.n	800865a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008658:	d107      	bne.n	800866a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008668:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2200      	movs	r2, #0
 8008672:	2180      	movs	r1, #128	; 0x80
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff fec1 	bl	80083fc <SPI_WaitFlagStateUntilTimeout>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008684:	f043 0220 	orr.w	r2, r3, #32
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e023      	b.n	80086d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008698:	d11d      	bne.n	80086d6 <SPI_EndRxTransaction+0xa6>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086a2:	d004      	beq.n	80086ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ac:	d113      	bne.n	80086d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff ff26 	bl	800850c <SPI_WaitFifoStateUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ca:	f043 0220 	orr.w	r2, r3, #32
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e000      	b.n	80086d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af02      	add	r7, sp, #8
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7ff ff07 	bl	800850c <SPI_WaitFifoStateUntilTimeout>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008708:	f043 0220 	orr.w	r2, r3, #32
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e027      	b.n	8008764 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2200      	movs	r2, #0
 800871c:	2180      	movs	r1, #128	; 0x80
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff fe6c 	bl	80083fc <SPI_WaitFlagStateUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d007      	beq.n	800873a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800872e:	f043 0220 	orr.w	r2, r3, #32
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e014      	b.n	8008764 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2200      	movs	r2, #0
 8008742:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff fee0 	bl	800850c <SPI_WaitFifoStateUntilTimeout>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d007      	beq.n	8008762 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008756:	f043 0220 	orr.w	r2, r3, #32
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e000      	b.n	8008764 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008774:	f7fa f950 	bl	8002a18 <HAL_GetTick>
 8008778:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0220 	bic.w	r2, r2, #32
 8008788:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	2164      	movs	r1, #100	; 0x64
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff ffa6 	bl	80086e0 <SPI_EndRxTxTransaction>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d005      	beq.n	80087a6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879e:	f043 0220 	orr.w	r2, r3, #32
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d115      	bne.n	80087da <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d107      	bne.n	80087ca <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7f9 fade 	bl	8001d84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80087c8:	e00e      	b.n	80087e8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7f9 fb02 	bl	8001ddc <HAL_SPI_TxRxCpltCallback>
}
 80087d8:	e006      	b.n	80087e8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fc4c 	bl	8008080 <HAL_SPI_ErrorCallback>
}
 80087e8:	bf00      	nop
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008806:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008808:	f7fa f906 	bl	8002a18 <HAL_GetTick>
 800880c:	4603      	mov	r3, r0
 800880e:	461a      	mov	r2, r3
 8008810:	2164      	movs	r1, #100	; 0x64
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff ff0c 	bl	8008630 <SPI_EndRxTransaction>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d005      	beq.n	800882a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008822:	f043 0220 	orr.w	r2, r3, #32
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008836:	2b00      	cmp	r3, #0
 8008838:	d103      	bne.n	8008842 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7f9 faa2 	bl	8001d84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008840:	e002      	b.n	8008848 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fc1c 	bl	8008080 <HAL_SPI_ErrorCallback>
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008858:	f7fa f8de 	bl	8002a18 <HAL_GetTick>
 800885c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800886c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	2164      	movs	r1, #100	; 0x64
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff ff34 	bl	80086e0 <SPI_EndRxTxTransaction>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008882:	f043 0220 	orr.w	r2, r3, #32
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008892:	2300      	movs	r3, #0
 8008894:	60bb      	str	r3, [r7, #8]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	60bb      	str	r3, [r7, #8]
 80088a6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff fbe1 	bl	8008080 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80088be:	e002      	b.n	80088c6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7f9 f9ff 	bl	8001cc4 <HAL_SPI_TxCpltCallback>
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088d0:	b084      	sub	sp, #16
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	f107 001c 	add.w	r0, r7, #28
 80088de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d126      	bne.n	8008936 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	4b3f      	ldr	r3, [pc, #252]	; (80089f8 <USB_CoreInit+0x128>)
 80088fa:	4013      	ands	r3, r2
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f043 0210 	orr.w	r2, r3, #16
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891a:	2b01      	cmp	r3, #1
 800891c:	d105      	bne.n	800892a <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 fb0e 	bl	8009f4c <USB_CoreReset>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]
 8008934:	e048      	b.n	80089c8 <USB_CoreInit+0xf8>
  }
#ifdef USB_HS_PHYC
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	2b03      	cmp	r3, #3
 800893a:	d134      	bne.n	80089a6 <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	4b2a      	ldr	r3, [pc, #168]	; (80089f8 <USB_CoreInit+0x128>)
 800894e:	4013      	ands	r3, r2
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f023 0210 	bic.w	r2, r3, #16
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	60da      	str	r2, [r3, #12]
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 fb1b 	bl	8009fb4 <USB_HS_PHYCInit>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e02f      	b.n	80089e8 <USB_CoreInit+0x118>
    }

    if (cfg.use_external_vbus == 1U)
 8008988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898a:	2b01      	cmp	r3, #1
 800898c:	d105      	bne.n	800899a <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f001 fad6 	bl	8009f4c <USB_CoreReset>
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
 80089a4:	e010      	b.n	80089c8 <USB_CoreInit+0xf8>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 faca 	bl	8009f4c <USB_CoreReset>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d10b      	bne.n	80089e6 <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f043 0206 	orr.w	r2, r3, #6
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f043 0220 	orr.w	r2, r3, #32
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089f2:	b004      	add	sp, #16
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	ffbdffbf 	.word	0xffbdffbf

080089fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d165      	bne.n	8008adc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4a41      	ldr	r2, [pc, #260]	; (8008b18 <USB_SetTurnaroundTime+0x11c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d906      	bls.n	8008a26 <USB_SetTurnaroundTime+0x2a>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4a40      	ldr	r2, [pc, #256]	; (8008b1c <USB_SetTurnaroundTime+0x120>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d202      	bcs.n	8008a26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a20:	230f      	movs	r3, #15
 8008a22:	617b      	str	r3, [r7, #20]
 8008a24:	e062      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	4a3c      	ldr	r2, [pc, #240]	; (8008b1c <USB_SetTurnaroundTime+0x120>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d306      	bcc.n	8008a3c <USB_SetTurnaroundTime+0x40>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	4a3b      	ldr	r2, [pc, #236]	; (8008b20 <USB_SetTurnaroundTime+0x124>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d202      	bcs.n	8008a3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008a36:	230e      	movs	r3, #14
 8008a38:	617b      	str	r3, [r7, #20]
 8008a3a:	e057      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4a38      	ldr	r2, [pc, #224]	; (8008b20 <USB_SetTurnaroundTime+0x124>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d306      	bcc.n	8008a52 <USB_SetTurnaroundTime+0x56>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4a37      	ldr	r2, [pc, #220]	; (8008b24 <USB_SetTurnaroundTime+0x128>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d202      	bcs.n	8008a52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008a4c:	230d      	movs	r3, #13
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	e04c      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	4a33      	ldr	r2, [pc, #204]	; (8008b24 <USB_SetTurnaroundTime+0x128>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d306      	bcc.n	8008a68 <USB_SetTurnaroundTime+0x6c>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	4a32      	ldr	r2, [pc, #200]	; (8008b28 <USB_SetTurnaroundTime+0x12c>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d802      	bhi.n	8008a68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008a62:	230c      	movs	r3, #12
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	e041      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4a2f      	ldr	r2, [pc, #188]	; (8008b28 <USB_SetTurnaroundTime+0x12c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d906      	bls.n	8008a7e <USB_SetTurnaroundTime+0x82>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4a2e      	ldr	r2, [pc, #184]	; (8008b2c <USB_SetTurnaroundTime+0x130>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d802      	bhi.n	8008a7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008a78:	230b      	movs	r3, #11
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	e036      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4a2a      	ldr	r2, [pc, #168]	; (8008b2c <USB_SetTurnaroundTime+0x130>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d906      	bls.n	8008a94 <USB_SetTurnaroundTime+0x98>
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	4a29      	ldr	r2, [pc, #164]	; (8008b30 <USB_SetTurnaroundTime+0x134>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d802      	bhi.n	8008a94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008a8e:	230a      	movs	r3, #10
 8008a90:	617b      	str	r3, [r7, #20]
 8008a92:	e02b      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <USB_SetTurnaroundTime+0x134>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d906      	bls.n	8008aaa <USB_SetTurnaroundTime+0xae>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4a25      	ldr	r2, [pc, #148]	; (8008b34 <USB_SetTurnaroundTime+0x138>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d202      	bcs.n	8008aaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008aa4:	2309      	movs	r3, #9
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	e020      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4a21      	ldr	r2, [pc, #132]	; (8008b34 <USB_SetTurnaroundTime+0x138>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d306      	bcc.n	8008ac0 <USB_SetTurnaroundTime+0xc4>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4a20      	ldr	r2, [pc, #128]	; (8008b38 <USB_SetTurnaroundTime+0x13c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d802      	bhi.n	8008ac0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008aba:	2308      	movs	r3, #8
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e015      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4a1d      	ldr	r2, [pc, #116]	; (8008b38 <USB_SetTurnaroundTime+0x13c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d906      	bls.n	8008ad6 <USB_SetTurnaroundTime+0xda>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4a1c      	ldr	r2, [pc, #112]	; (8008b3c <USB_SetTurnaroundTime+0x140>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d202      	bcs.n	8008ad6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ad0:	2307      	movs	r3, #7
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	e00a      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008ad6:	2306      	movs	r3, #6
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	e007      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d102      	bne.n	8008ae8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ae2:	2309      	movs	r3, #9
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	e001      	b.n	8008aec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008ae8:	2309      	movs	r3, #9
 8008aea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	029b      	lsls	r3, r3, #10
 8008b00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b04:	431a      	orrs	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	00d8acbf 	.word	0x00d8acbf
 8008b1c:	00e4e1c0 	.word	0x00e4e1c0
 8008b20:	00f42400 	.word	0x00f42400
 8008b24:	01067380 	.word	0x01067380
 8008b28:	011a499f 	.word	0x011a499f
 8008b2c:	01312cff 	.word	0x01312cff
 8008b30:	014ca43f 	.word	0x014ca43f
 8008b34:	016e3600 	.word	0x016e3600
 8008b38:	01a6ab1f 	.word	0x01a6ab1f
 8008b3c:	01e84800 	.word	0x01e84800

08008b40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f043 0201 	orr.w	r2, r3, #1
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f023 0201 	bic.w	r2, r3, #1
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d106      	bne.n	8008bb0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	60da      	str	r2, [r3, #12]
 8008bae:	e00b      	b.n	8008bc8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d106      	bne.n	8008bc4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60da      	str	r2, [r3, #12]
 8008bc2:	e001      	b.n	8008bc8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e003      	b.n	8008bd0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008bc8:	2032      	movs	r0, #50	; 0x32
 8008bca:	f7f9 ff31 	bl	8002a30 <HAL_Delay>

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bd8:	b084      	sub	sp, #16
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b086      	sub	sp, #24
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	613b      	str	r3, [r7, #16]
 8008bf6:	e009      	b.n	8008c0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	3340      	adds	r3, #64	; 0x40
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2b0e      	cmp	r3, #14
 8008c10:	d9f2      	bls.n	8008bf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d11c      	bne.n	8008c52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c26:	f043 0302 	orr.w	r3, r3, #2
 8008c2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	e005      	b.n	8008c5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c64:	461a      	mov	r2, r3
 8008c66:	2300      	movs	r3, #0
 8008c68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c70:	4619      	mov	r1, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c78:	461a      	mov	r2, r3
 8008c7a:	680b      	ldr	r3, [r1, #0]
 8008c7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d10c      	bne.n	8008c9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d104      	bne.n	8008c94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f959 	bl	8008f44 <USB_SetDevSpeed>
 8008c92:	e018      	b.n	8008cc6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c94:	2101      	movs	r1, #1
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f954 	bl	8008f44 <USB_SetDevSpeed>
 8008c9c:	e013      	b.n	8008cc6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d10c      	bne.n	8008cbe <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d104      	bne.n	8008cb4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008caa:	2100      	movs	r1, #0
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f949 	bl	8008f44 <USB_SetDevSpeed>
 8008cb2:	e008      	b.n	8008cc6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f944 	bl	8008f44 <USB_SetDevSpeed>
 8008cbc:	e003      	b.n	8008cc6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008cbe:	2103      	movs	r1, #3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f93f 	bl	8008f44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008cc6:	2110      	movs	r1, #16
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f8f3 	bl	8008eb4 <USB_FlushTxFifo>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f911 	bl	8008f00 <USB_FlushRxFifo>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	461a      	mov	r2, r3
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d06:	461a      	mov	r2, r3
 8008d08:	2300      	movs	r3, #0
 8008d0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	613b      	str	r3, [r7, #16]
 8008d10:	e043      	b.n	8008d9a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d28:	d118      	bne.n	8008d5c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10a      	bne.n	8008d46 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	e013      	b.n	8008d6e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	461a      	mov	r2, r3
 8008d54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	e008      	b.n	8008d6e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d68:	461a      	mov	r2, r3
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	3301      	adds	r3, #1
 8008d98:	613b      	str	r3, [r7, #16]
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d3b7      	bcc.n	8008d12 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008da2:	2300      	movs	r3, #0
 8008da4:	613b      	str	r3, [r7, #16]
 8008da6:	e043      	b.n	8008e30 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dbe:	d118      	bne.n	8008df2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10a      	bne.n	8008ddc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	e013      	b.n	8008e04 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	461a      	mov	r2, r3
 8008dea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	e008      	b.n	8008e04 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfe:	461a      	mov	r2, r3
 8008e00:	2300      	movs	r3, #0
 8008e02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e10:	461a      	mov	r2, r3
 8008e12:	2300      	movs	r3, #0
 8008e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e22:	461a      	mov	r2, r3
 8008e24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	613b      	str	r3, [r7, #16]
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d3b7      	bcc.n	8008da8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d105      	bne.n	8008e6c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	f043 0210 	orr.w	r2, r3, #16
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699a      	ldr	r2, [r3, #24]
 8008e70:	4b0e      	ldr	r3, [pc, #56]	; (8008eac <USB_DevInit+0x2d4>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	f043 0208 	orr.w	r2, r3, #8
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d105      	bne.n	8008e9c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	4b06      	ldr	r3, [pc, #24]	; (8008eb0 <USB_DevInit+0x2d8>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ea8:	b004      	add	sp, #16
 8008eaa:	4770      	bx	lr
 8008eac:	803c3800 	.word	0x803c3800
 8008eb0:	40000004 	.word	0x40000004

08008eb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	019b      	lsls	r3, r3, #6
 8008ec6:	f043 0220 	orr.w	r2, r3, #32
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	4a09      	ldr	r2, [pc, #36]	; (8008efc <USB_FlushTxFifo+0x48>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d901      	bls.n	8008ee0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e006      	b.n	8008eee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b20      	cmp	r3, #32
 8008eea:	d0f0      	beq.n	8008ece <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	00030d40 	.word	0x00030d40

08008f00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2210      	movs	r2, #16
 8008f10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <USB_FlushRxFifo+0x40>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d901      	bls.n	8008f24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e006      	b.n	8008f32 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f003 0310 	and.w	r3, r3, #16
 8008f2c:	2b10      	cmp	r3, #16
 8008f2e:	d0f0      	beq.n	8008f12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	00030d40 	.word	0x00030d40

08008f44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	68f9      	ldr	r1, [r7, #12]
 8008f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f64:	4313      	orrs	r3, r2
 8008f66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b087      	sub	sp, #28
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 0306 	and.w	r3, r3, #6
 8008f8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f96:	2300      	movs	r3, #0
 8008f98:	75fb      	strb	r3, [r7, #23]
 8008f9a:	e00a      	b.n	8008fb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d002      	beq.n	8008fa8 <USB_GetDevSpeed+0x32>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b06      	cmp	r3, #6
 8008fa6:	d102      	bne.n	8008fae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008fa8:	2302      	movs	r3, #2
 8008faa:	75fb      	strb	r3, [r7, #23]
 8008fac:	e001      	b.n	8008fb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008fae:	230f      	movs	r3, #15
 8008fb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	371c      	adds	r7, #28
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d139      	bne.n	8009050 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe2:	69da      	ldr	r2, [r3, #28]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	f003 030f 	and.w	r3, r3, #15
 8008fec:	2101      	movs	r1, #1
 8008fee:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	68f9      	ldr	r1, [r7, #12]
 8008ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	015a      	lsls	r2, r3, #5
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4413      	add	r3, r2
 8009006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d153      	bne.n	80090bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	78db      	ldrb	r3, [r3, #3]
 800902e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009030:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	059b      	lsls	r3, r3, #22
 8009036:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009038:	431a      	orrs	r2, r3
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	0159      	lsls	r1, r3, #5
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	440b      	add	r3, r1
 8009042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009046:	4619      	mov	r1, r3
 8009048:	4b20      	ldr	r3, [pc, #128]	; (80090cc <USB_ActivateEndpoint+0x10c>)
 800904a:	4313      	orrs	r3, r2
 800904c:	600b      	str	r3, [r1, #0]
 800904e:	e035      	b.n	80090bc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	69da      	ldr	r2, [r3, #28]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	2101      	movs	r1, #1
 8009062:	fa01 f303 	lsl.w	r3, r1, r3
 8009066:	041b      	lsls	r3, r3, #16
 8009068:	68f9      	ldr	r1, [r7, #12]
 800906a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800906e:	4313      	orrs	r3, r2
 8009070:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4413      	add	r3, r2
 800907a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d119      	bne.n	80090bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	78db      	ldrb	r3, [r3, #3]
 80090a2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090a4:	430b      	orrs	r3, r1
 80090a6:	431a      	orrs	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	0159      	lsls	r1, r3, #5
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	440b      	add	r3, r1
 80090b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b4:	4619      	mov	r1, r3
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <USB_ActivateEndpoint+0x10c>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	10008000 	.word	0x10008000

080090d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d161      	bne.n	80091b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009102:	d11f      	bne.n	8009144 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009122:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4413      	add	r3, r2
 800912c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	0151      	lsls	r1, r2, #5
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	440a      	add	r2, r1
 800913a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800913e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009142:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	f003 030f 	and.w	r3, r3, #15
 8009154:	2101      	movs	r1, #1
 8009156:	fa01 f303 	lsl.w	r3, r1, r3
 800915a:	b29b      	uxth	r3, r3
 800915c:	43db      	mvns	r3, r3
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009164:	4013      	ands	r3, r2
 8009166:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916e:	69da      	ldr	r2, [r3, #28]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 030f 	and.w	r3, r3, #15
 8009178:	2101      	movs	r1, #1
 800917a:	fa01 f303 	lsl.w	r3, r1, r3
 800917e:	b29b      	uxth	r3, r3
 8009180:	43db      	mvns	r3, r3
 8009182:	68f9      	ldr	r1, [r7, #12]
 8009184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009188:	4013      	ands	r3, r2
 800918a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	0159      	lsls	r1, r3, #5
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	440b      	add	r3, r1
 80091a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a6:	4619      	mov	r1, r3
 80091a8:	4b35      	ldr	r3, [pc, #212]	; (8009280 <USB_DeactivateEndpoint+0x1b0>)
 80091aa:	4013      	ands	r3, r2
 80091ac:	600b      	str	r3, [r1, #0]
 80091ae:	e060      	b.n	8009272 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091c6:	d11f      	bne.n	8009208 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	0151      	lsls	r1, r2, #5
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	440a      	add	r2, r1
 80091de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	0151      	lsls	r1, r2, #5
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	440a      	add	r2, r1
 80091fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009206:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	2101      	movs	r1, #1
 800921a:	fa01 f303 	lsl.w	r3, r1, r3
 800921e:	041b      	lsls	r3, r3, #16
 8009220:	43db      	mvns	r3, r3
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009228:	4013      	ands	r3, r2
 800922a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	2101      	movs	r1, #1
 800923e:	fa01 f303 	lsl.w	r3, r1, r3
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	43db      	mvns	r3, r3
 8009246:	68f9      	ldr	r1, [r7, #12]
 8009248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800924c:	4013      	ands	r3, r2
 800924e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	0159      	lsls	r1, r3, #5
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	440b      	add	r3, r1
 8009266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926a:	4619      	mov	r1, r3
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <USB_DeactivateEndpoint+0x1b4>)
 800926e:	4013      	ands	r3, r2
 8009270:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	ec337800 	.word	0xec337800
 8009284:	eff37800 	.word	0xeff37800

08009288 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af02      	add	r7, sp, #8
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	f040 8163 	bne.w	8009570 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d132      	bne.n	8009318 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092be:	691a      	ldr	r2, [r3, #16]
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	0159      	lsls	r1, r3, #5
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	440b      	add	r3, r1
 80092c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092cc:	4619      	mov	r1, r3
 80092ce:	4ba5      	ldr	r3, [pc, #660]	; (8009564 <USB_EPStartXfer+0x2dc>)
 80092d0:	4013      	ands	r3, r2
 80092d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	0151      	lsls	r1, r2, #5
 80092e6:	69fa      	ldr	r2, [r7, #28]
 80092e8:	440a      	add	r2, r1
 80092ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009300:	691a      	ldr	r2, [r3, #16]
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	0159      	lsls	r1, r3, #5
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	440b      	add	r3, r1
 800930a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930e:	4619      	mov	r1, r3
 8009310:	4b95      	ldr	r3, [pc, #596]	; (8009568 <USB_EPStartXfer+0x2e0>)
 8009312:	4013      	ands	r3, r2
 8009314:	610b      	str	r3, [r1, #16]
 8009316:	e074      	b.n	8009402 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	4413      	add	r3, r2
 8009320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	0159      	lsls	r1, r3, #5
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	440b      	add	r3, r1
 800932e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009332:	4619      	mov	r1, r3
 8009334:	4b8c      	ldr	r3, [pc, #560]	; (8009568 <USB_EPStartXfer+0x2e0>)
 8009336:	4013      	ands	r3, r2
 8009338:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009346:	691a      	ldr	r2, [r3, #16]
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	0159      	lsls	r1, r3, #5
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	440b      	add	r3, r1
 8009350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009354:	4619      	mov	r1, r3
 8009356:	4b83      	ldr	r3, [pc, #524]	; (8009564 <USB_EPStartXfer+0x2dc>)
 8009358:	4013      	ands	r3, r2
 800935a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009368:	691a      	ldr	r2, [r3, #16]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	6959      	ldr	r1, [r3, #20]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	440b      	add	r3, r1
 8009374:	1e59      	subs	r1, r3, #1
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	fbb1 f3f3 	udiv	r3, r1, r3
 800937e:	04d9      	lsls	r1, r3, #19
 8009380:	4b7a      	ldr	r3, [pc, #488]	; (800956c <USB_EPStartXfer+0x2e4>)
 8009382:	400b      	ands	r3, r1
 8009384:	69b9      	ldr	r1, [r7, #24]
 8009386:	0148      	lsls	r0, r1, #5
 8009388:	69f9      	ldr	r1, [r7, #28]
 800938a:	4401      	add	r1, r0
 800938c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009390:	4313      	orrs	r3, r2
 8009392:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a0:	691a      	ldr	r2, [r3, #16]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093aa:	69b9      	ldr	r1, [r7, #24]
 80093ac:	0148      	lsls	r0, r1, #5
 80093ae:	69f9      	ldr	r1, [r7, #28]
 80093b0:	4401      	add	r1, r0
 80093b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093b6:	4313      	orrs	r3, r2
 80093b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	78db      	ldrb	r3, [r3, #3]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d11f      	bne.n	8009402 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	0151      	lsls	r1, r2, #5
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	440a      	add	r2, r1
 80093d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80093e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	0151      	lsls	r1, r2, #5
 80093f4:	69fa      	ldr	r2, [r7, #28]
 80093f6:	440a      	add	r2, r1
 80093f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009400:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d14b      	bne.n	80094a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d009      	beq.n	8009424 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941c:	461a      	mov	r2, r3
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	78db      	ldrb	r3, [r3, #3]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d128      	bne.n	800947e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009438:	2b00      	cmp	r3, #0
 800943a:	d110      	bne.n	800945e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	e00f      	b.n	800947e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	0151      	lsls	r1, r2, #5
 8009470:	69fa      	ldr	r2, [r7, #28]
 8009472:	440a      	add	r2, r1
 8009474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800947c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	0151      	lsls	r1, r2, #5
 8009490:	69fa      	ldr	r2, [r7, #28]
 8009492:	440a      	add	r2, r1
 8009494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009498:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	e133      	b.n	8009708 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	0151      	lsls	r1, r2, #5
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	440a      	add	r2, r1
 80094b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	78db      	ldrb	r3, [r3, #3]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d015      	beq.n	80094f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 811b 	beq.w	8009708 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	f003 030f 	and.w	r3, r3, #15
 80094e2:	2101      	movs	r1, #1
 80094e4:	fa01 f303 	lsl.w	r3, r1, r3
 80094e8:	69f9      	ldr	r1, [r7, #28]
 80094ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ee:	4313      	orrs	r3, r2
 80094f0:	634b      	str	r3, [r1, #52]	; 0x34
 80094f2:	e109      	b.n	8009708 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009500:	2b00      	cmp	r3, #0
 8009502:	d110      	bne.n	8009526 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	e00f      	b.n	8009546 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69ba      	ldr	r2, [r7, #24]
 8009536:	0151      	lsls	r1, r2, #5
 8009538:	69fa      	ldr	r2, [r7, #28]
 800953a:	440a      	add	r2, r1
 800953c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009544:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	68d9      	ldr	r1, [r3, #12]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	781a      	ldrb	r2, [r3, #0]
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	b298      	uxth	r0, r3
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	4603      	mov	r3, r0
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fa38 	bl	80099d0 <USB_WritePacket>
 8009560:	e0d2      	b.n	8009708 <USB_EPStartXfer+0x480>
 8009562:	bf00      	nop
 8009564:	e007ffff 	.word	0xe007ffff
 8009568:	fff80000 	.word	0xfff80000
 800956c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957c:	691a      	ldr	r2, [r3, #16]
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	0159      	lsls	r1, r3, #5
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	440b      	add	r3, r1
 8009586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958a:	4619      	mov	r1, r3
 800958c:	4b61      	ldr	r3, [pc, #388]	; (8009714 <USB_EPStartXfer+0x48c>)
 800958e:	4013      	ands	r3, r2
 8009590:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959e:	691a      	ldr	r2, [r3, #16]
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	0159      	lsls	r1, r3, #5
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	440b      	add	r3, r1
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	4619      	mov	r1, r3
 80095ae:	4b5a      	ldr	r3, [pc, #360]	; (8009718 <USB_EPStartXfer+0x490>)
 80095b0:	4013      	ands	r3, r2
 80095b2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d123      	bne.n	8009604 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c8:	691a      	ldr	r2, [r3, #16]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095d2:	69b9      	ldr	r1, [r7, #24]
 80095d4:	0148      	lsls	r0, r1, #5
 80095d6:	69f9      	ldr	r1, [r7, #28]
 80095d8:	4401      	add	r1, r0
 80095da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095de:	4313      	orrs	r3, r2
 80095e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	0151      	lsls	r1, r2, #5
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	440a      	add	r2, r1
 80095f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009600:	6113      	str	r3, [r2, #16]
 8009602:	e033      	b.n	800966c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	695a      	ldr	r2, [r3, #20]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	4413      	add	r3, r2
 800960e:	1e5a      	subs	r2, r3, #1
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	fbb2 f3f3 	udiv	r3, r2, r3
 8009618:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	4413      	add	r3, r2
 8009622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	8afb      	ldrh	r3, [r7, #22]
 800962a:	04d9      	lsls	r1, r3, #19
 800962c:	4b3b      	ldr	r3, [pc, #236]	; (800971c <USB_EPStartXfer+0x494>)
 800962e:	400b      	ands	r3, r1
 8009630:	69b9      	ldr	r1, [r7, #24]
 8009632:	0148      	lsls	r0, r1, #5
 8009634:	69f9      	ldr	r1, [r7, #28]
 8009636:	4401      	add	r1, r0
 8009638:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800963c:	4313      	orrs	r3, r2
 800963e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	691a      	ldr	r2, [r3, #16]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	8af9      	ldrh	r1, [r7, #22]
 8009654:	fb01 f303 	mul.w	r3, r1, r3
 8009658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800965c:	69b9      	ldr	r1, [r7, #24]
 800965e:	0148      	lsls	r0, r1, #5
 8009660:	69f9      	ldr	r1, [r7, #28]
 8009662:	4401      	add	r1, r0
 8009664:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009668:	4313      	orrs	r3, r2
 800966a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d10d      	bne.n	800968e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d009      	beq.n	800968e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	68d9      	ldr	r1, [r3, #12]
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968a:	460a      	mov	r2, r1
 800968c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	78db      	ldrb	r3, [r3, #3]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d128      	bne.n	80096e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d110      	bne.n	80096c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	0151      	lsls	r1, r2, #5
 80096b8:	69fa      	ldr	r2, [r7, #28]
 80096ba:	440a      	add	r2, r1
 80096bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096c4:	6013      	str	r3, [r2, #0]
 80096c6:	e00f      	b.n	80096e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	0151      	lsls	r1, r2, #5
 80096da:	69fa      	ldr	r2, [r7, #28]
 80096dc:	440a      	add	r2, r1
 80096de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	0151      	lsls	r1, r2, #5
 80096fa:	69fa      	ldr	r2, [r7, #28]
 80096fc:	440a      	add	r2, r1
 80096fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009702:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009706:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	fff80000 	.word	0xfff80000
 8009718:	e007ffff 	.word	0xe007ffff
 800971c:	1ff80000 	.word	0x1ff80000

08009720 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	4613      	mov	r3, r2
 800972c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	785b      	ldrb	r3, [r3, #1]
 800973c:	2b01      	cmp	r3, #1
 800973e:	f040 80cd 	bne.w	80098dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d132      	bne.n	80097b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	0159      	lsls	r1, r3, #5
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	440b      	add	r3, r1
 8009760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009764:	4619      	mov	r1, r3
 8009766:	4b98      	ldr	r3, [pc, #608]	; (80099c8 <USB_EP0StartXfer+0x2a8>)
 8009768:	4013      	ands	r3, r2
 800976a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	0151      	lsls	r1, r2, #5
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	440a      	add	r2, r1
 8009782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800978a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009798:	691a      	ldr	r2, [r3, #16]
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	0159      	lsls	r1, r3, #5
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	440b      	add	r3, r1
 80097a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a6:	4619      	mov	r1, r3
 80097a8:	4b88      	ldr	r3, [pc, #544]	; (80099cc <USB_EP0StartXfer+0x2ac>)
 80097aa:	4013      	ands	r3, r2
 80097ac:	610b      	str	r3, [r1, #16]
 80097ae:	e04e      	b.n	800984e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	0159      	lsls	r1, r3, #5
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	440b      	add	r3, r1
 80097c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ca:	4619      	mov	r1, r3
 80097cc:	4b7f      	ldr	r3, [pc, #508]	; (80099cc <USB_EP0StartXfer+0x2ac>)
 80097ce:	4013      	ands	r3, r2
 80097d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097de:	691a      	ldr	r2, [r3, #16]
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	0159      	lsls	r1, r3, #5
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	440b      	add	r3, r1
 80097e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ec:	4619      	mov	r1, r3
 80097ee:	4b76      	ldr	r3, [pc, #472]	; (80099c8 <USB_EP0StartXfer+0x2a8>)
 80097f0:	4013      	ands	r3, r2
 80097f2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	695a      	ldr	r2, [r3, #20]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d903      	bls.n	8009808 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	0151      	lsls	r1, r2, #5
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	440a      	add	r2, r1
 800981e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009834:	691a      	ldr	r2, [r3, #16]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800983e:	6939      	ldr	r1, [r7, #16]
 8009840:	0148      	lsls	r0, r1, #5
 8009842:	6979      	ldr	r1, [r7, #20]
 8009844:	4401      	add	r1, r0
 8009846:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800984a:	4313      	orrs	r3, r2
 800984c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d11e      	bne.n	8009892 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d009      	beq.n	8009870 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009868:	461a      	mov	r2, r3
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	0151      	lsls	r1, r2, #5
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	440a      	add	r2, r1
 8009886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800988a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	e092      	b.n	80099b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d07e      	beq.n	80099b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	f003 030f 	and.w	r3, r3, #15
 80098ca:	2101      	movs	r1, #1
 80098cc:	fa01 f303 	lsl.w	r3, r1, r3
 80098d0:	6979      	ldr	r1, [r7, #20]
 80098d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098d6:	4313      	orrs	r3, r2
 80098d8:	634b      	str	r3, [r1, #52]	; 0x34
 80098da:	e06d      	b.n	80099b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	0159      	lsls	r1, r3, #5
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	440b      	add	r3, r1
 80098f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f6:	4619      	mov	r1, r3
 80098f8:	4b34      	ldr	r3, [pc, #208]	; (80099cc <USB_EP0StartXfer+0x2ac>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990a:	691a      	ldr	r2, [r3, #16]
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	0159      	lsls	r1, r3, #5
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	440b      	add	r3, r1
 8009914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009918:	4619      	mov	r1, r3
 800991a:	4b2b      	ldr	r3, [pc, #172]	; (80099c8 <USB_EP0StartXfer+0x2a8>)
 800991c:	4013      	ands	r3, r2
 800991e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	0151      	lsls	r1, r2, #5
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	440a      	add	r2, r1
 8009946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800994a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800994e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	4413      	add	r3, r2
 8009958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800995c:	691a      	ldr	r2, [r3, #16]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009966:	6939      	ldr	r1, [r7, #16]
 8009968:	0148      	lsls	r0, r1, #5
 800996a:	6979      	ldr	r1, [r7, #20]
 800996c:	4401      	add	r1, r0
 800996e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009972:	4313      	orrs	r3, r2
 8009974:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d10d      	bne.n	8009998 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d009      	beq.n	8009998 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	68d9      	ldr	r1, [r3, #12]
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009994:	460a      	mov	r2, r1
 8009996:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	0151      	lsls	r1, r2, #5
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	440a      	add	r2, r1
 80099ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	371c      	adds	r7, #28
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	e007ffff 	.word	0xe007ffff
 80099cc:	fff80000 	.word	0xfff80000

080099d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b089      	sub	sp, #36	; 0x24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	4611      	mov	r1, r2
 80099dc:	461a      	mov	r2, r3
 80099de:	460b      	mov	r3, r1
 80099e0:	71fb      	strb	r3, [r7, #7]
 80099e2:	4613      	mov	r3, r2
 80099e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80099ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d11a      	bne.n	8009a2c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80099f6:	88bb      	ldrh	r3, [r7, #4]
 80099f8:	3303      	adds	r3, #3
 80099fa:	089b      	lsrs	r3, r3, #2
 80099fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80099fe:	2300      	movs	r3, #0
 8009a00:	61bb      	str	r3, [r7, #24]
 8009a02:	e00f      	b.n	8009a24 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	031a      	lsls	r2, r3, #12
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a10:	461a      	mov	r2, r3
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	3301      	adds	r3, #1
 8009a22:	61bb      	str	r3, [r7, #24]
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d3eb      	bcc.n	8009a04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3724      	adds	r7, #36	; 0x24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b089      	sub	sp, #36	; 0x24
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	4613      	mov	r3, r2
 8009a46:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009a50:	88fb      	ldrh	r3, [r7, #6]
 8009a52:	3303      	adds	r3, #3
 8009a54:	089b      	lsrs	r3, r3, #2
 8009a56:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61bb      	str	r3, [r7, #24]
 8009a5c:	e00b      	b.n	8009a76 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	3301      	adds	r3, #1
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	69ba      	ldr	r2, [r7, #24]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d3ef      	bcc.n	8009a5e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009a7e:	69fb      	ldr	r3, [r7, #28]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3724      	adds	r7, #36	; 0x24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	785b      	ldrb	r3, [r3, #1]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d12c      	bne.n	8009b02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	db12      	blt.n	8009ae0 <USB_EPSetStall+0x54>
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00f      	beq.n	8009ae0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	0151      	lsls	r1, r2, #5
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	440a      	add	r2, r1
 8009ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ada:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ade:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	0151      	lsls	r1, r2, #5
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	440a      	add	r2, r1
 8009af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	e02b      	b.n	8009b5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	db12      	blt.n	8009b3a <USB_EPSetStall+0xae>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00f      	beq.n	8009b3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	015a      	lsls	r2, r3, #5
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4413      	add	r3, r2
 8009b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	0151      	lsls	r1, r2, #5
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	440a      	add	r2, r1
 8009b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	0151      	lsls	r1, r2, #5
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	440a      	add	r2, r1
 8009b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	785b      	ldrb	r3, [r3, #1]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d128      	bne.n	8009bd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	0151      	lsls	r1, r2, #5
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	440a      	add	r2, r1
 8009b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ba2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	78db      	ldrb	r3, [r3, #3]
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d003      	beq.n	8009bb4 <USB_EPClearStall+0x4c>
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	78db      	ldrb	r3, [r3, #3]
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d138      	bne.n	8009c26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	0151      	lsls	r1, r2, #5
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	440a      	add	r2, r1
 8009bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	e027      	b.n	8009c26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	0151      	lsls	r1, r2, #5
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	440a      	add	r2, r1
 8009bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	78db      	ldrb	r3, [r3, #3]
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d003      	beq.n	8009c06 <USB_EPClearStall+0x9e>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	78db      	ldrb	r3, [r3, #3]
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d10f      	bne.n	8009c26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	011b      	lsls	r3, r3, #4
 8009c64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c68:	68f9      	ldr	r1, [r7, #12]
 8009c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c9a:	f023 0303 	bic.w	r3, r3, #3
 8009c9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cae:	f023 0302 	bic.w	r3, r3, #2
 8009cb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b085      	sub	sp, #20
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cdc:	f023 0303 	bic.w	r3, r3, #3
 8009ce0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf0:	f043 0302 	orr.w	r3, r3, #2
 8009cf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	0c1b      	lsrs	r3, r3, #16
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b085      	sub	sp, #20
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	4013      	ands	r3, r2
 8009d80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	b29b      	uxth	r3, r3
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b085      	sub	sp, #20
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009da2:	78fb      	ldrb	r3, [r7, #3]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b087      	sub	sp, #28
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	f003 030f 	and.w	r3, r3, #15
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfe:	01db      	lsls	r3, r3, #7
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e08:	78fb      	ldrb	r3, [r7, #3]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	4013      	ands	r3, r2
 8009e1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	f003 0301 	and.w	r3, r3, #1
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
	...

08009e48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e62:	4619      	mov	r1, r3
 8009e64:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <USB_ActivateSetup+0x44>)
 8009e66:	4013      	ands	r3, r2
 8009e68:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	fffff800 	.word	0xfffff800

08009e90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	333c      	adds	r3, #60	; 0x3c
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	4a26      	ldr	r2, [pc, #152]	; (8009f48 <USB_EP0_OutStart+0xb8>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d90a      	bls.n	8009eca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ec4:	d101      	bne.n	8009eca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e037      	b.n	8009f3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef8:	f043 0318 	orr.w	r3, r3, #24
 8009efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f12:	7afb      	ldrb	r3, [r7, #11]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d10f      	bne.n	8009f38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1e:	461a      	mov	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	4f54300a 	.word	0x4f54300a

08009f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4a13      	ldr	r2, [pc, #76]	; (8009fb0 <USB_CoreReset+0x64>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d901      	bls.n	8009f6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e01b      	b.n	8009fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	daf2      	bge.n	8009f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	f043 0201 	orr.w	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3301      	adds	r3, #1
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	4a09      	ldr	r2, [pc, #36]	; (8009fb0 <USB_CoreReset+0x64>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d901      	bls.n	8009f94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e006      	b.n	8009fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d0f0      	beq.n	8009f82 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	00030d40 	.word	0x00030d40

08009fb4 <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  uint32_t count = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 8009fc0:	4b16      	ldr	r3, [pc, #88]	; (800a01c <USB_HS_PHYCInit+0x68>)
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	4a15      	ldr	r2, [pc, #84]	; (800a01c <USB_HS_PHYCInit+0x68>)
 8009fc6:	f043 0304 	orr.w	r3, r3, #4
 8009fca:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8009fcc:	e008      	b.n	8009fe0 <USB_HS_PHYCInit+0x2c>
  {
    if (++count > 200000U)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4a12      	ldr	r2, [pc, #72]	; (800a020 <USB_HS_PHYCInit+0x6c>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d901      	bls.n	8009fe0 <USB_HS_PHYCInit+0x2c>
    {
      return HAL_TIMEOUT;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e019      	b.n	800a014 <USB_HS_PHYCInit+0x60>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8009fe0:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <USB_HS_PHYCInit+0x68>)
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d0f0      	beq.n	8009fce <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
  }
  else if (HSE_VALUE == 25000000U) /* HSE = 25MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x5U << 1);
 8009fec:	4b0b      	ldr	r3, [pc, #44]	; (800a01c <USB_HS_PHYCInit+0x68>)
 8009fee:	220a      	movs	r2, #10
 8009ff0:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 8009ff2:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <USB_HS_PHYCInit+0x68>)
 8009ff4:	68da      	ldr	r2, [r3, #12]
 8009ff6:	4909      	ldr	r1, [pc, #36]	; (800a01c <USB_HS_PHYCInit+0x68>)
 8009ff8:	f640 7313 	movw	r3, #3859	; 0xf13
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 800a000:	4b06      	ldr	r3, [pc, #24]	; (800a01c <USB_HS_PHYCInit+0x68>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a05      	ldr	r2, [pc, #20]	; (800a01c <USB_HS_PHYCInit+0x68>)
 800a006:	f043 0301 	orr.w	r3, r3, #1
 800a00a:	6013      	str	r3, [r2, #0]

  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 800a00c:	2002      	movs	r0, #2
 800a00e:	f7f8 fd0f 	bl	8002a30 <HAL_Delay>

  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	40017c00 	.word	0x40017c00
 800a020:	00030d40 	.word	0x00030d40

0800a024 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a030:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a034:	f002 fa26 	bl	800c484 <malloc>
 800a038:	4603      	mov	r3, r0
 800a03a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d105      	bne.n	800a04e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a04a:	2302      	movs	r3, #2
 800a04c:	e054      	b.n	800a0f8 <USBD_CDC_Init+0xd4>
  }

  pdev->pClassData = (void *)hcdc;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7c1b      	ldrb	r3, [r3, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d115      	bne.n	800a08a <USBD_CDC_Init+0x66>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a05e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a062:	2202      	movs	r2, #2
 800a064:	2181      	movs	r1, #129	; 0x81
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f002 f893 	bl	800c192 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a072:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a076:	2202      	movs	r2, #2
 800a078:	2101      	movs	r1, #1
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f002 f889 	bl	800c192 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
 800a088:	e012      	b.n	800a0b0 <USBD_CDC_Init+0x8c>
      /*pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;*/
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a08a:	2340      	movs	r3, #64	; 0x40
 800a08c:	2202      	movs	r2, #2
 800a08e:	2181      	movs	r1, #129	; 0x81
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f002 f87e 	bl	800c192 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a09c:	2340      	movs	r3, #64	; 0x40
 800a09e:	2202      	movs	r2, #2
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f002 f875 	bl	800c192 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  /* Open Command IN EP */
  /*(void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;*/

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	7c1b      	ldrb	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d109      	bne.n	800a0e6 <USBD_CDC_Init+0xc2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0dc:	2101      	movs	r1, #1
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f002 f946 	bl	800c370 <USBD_LL_PrepareReceive>
 800a0e4:	e007      	b.n	800a0f6 <USBD_CDC_Init+0xd2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0ec:	2340      	movs	r3, #64	; 0x40
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f002 f93d 	bl	800c370 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a110:	2181      	movs	r1, #129	; 0x81
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f002 f863 	bl	800c1de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a11e:	2101      	movs	r1, #1
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f002 f85c 	bl	800c1de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  /*(void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;*/

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00e      	beq.n	800a156 <USBD_CDC_DeInit+0x56>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a148:	4618      	mov	r0, r3
 800a14a:	f002 f9a3 	bl	800c494 <free>
    pdev->pClassData = NULL;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800a156:	7bfb      	ldrb	r3, [r7, #15]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a170:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a186:	2b40      	cmp	r3, #64	; 0x40
 800a188:	f000 809f 	beq.w	800a2ca <USBD_CDC_Setup+0x16a>
 800a18c:	2b40      	cmp	r3, #64	; 0x40
 800a18e:	f200 8166 	bhi.w	800a45e <USBD_CDC_Setup+0x2fe>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d03a      	beq.n	800a20c <USBD_CDC_Setup+0xac>
 800a196:	2b20      	cmp	r3, #32
 800a198:	f040 8161 	bne.w	800a45e <USBD_CDC_Setup+0x2fe>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	88db      	ldrh	r3, [r3, #6]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d029      	beq.n	800a1f8 <USBD_CDC_Setup+0x98>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	b25b      	sxtb	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	da11      	bge.n	800a1d2 <USBD_CDC_Setup+0x72>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800a1ba:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	88d2      	ldrh	r2, [r2, #6]
 800a1c0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a1c2:	6939      	ldr	r1, [r7, #16]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	88db      	ldrh	r3, [r3, #6]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 fb86 	bl	800b8dc <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800a1d0:	e14c      	b.n	800a46c <USBD_CDC_Setup+0x30c>
        hcdc->CmdOpCode = req->bRequest;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	785a      	ldrb	r2, [r3, #1]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	88db      	ldrh	r3, [r3, #6]
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a1e8:	6939      	ldr	r1, [r7, #16]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	88db      	ldrh	r3, [r3, #6]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 fb9f 	bl	800b934 <USBD_CtlPrepareRx>
    break;
 800a1f6:	e139      	b.n	800a46c <USBD_CDC_Setup+0x30c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	7850      	ldrb	r0, [r2, #1]
 800a204:	2200      	movs	r2, #0
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	4798      	blx	r3
    break;
 800a20a:	e12f      	b.n	800a46c <USBD_CDC_Setup+0x30c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	785b      	ldrb	r3, [r3, #1]
 800a210:	2b0b      	cmp	r3, #11
 800a212:	d84f      	bhi.n	800a2b4 <USBD_CDC_Setup+0x154>
 800a214:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <USBD_CDC_Setup+0xbc>)
 800a216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21a:	bf00      	nop
 800a21c:	0800a24d 	.word	0x0800a24d
 800a220:	0800a2c3 	.word	0x0800a2c3
 800a224:	0800a2b5 	.word	0x0800a2b5
 800a228:	0800a2b5 	.word	0x0800a2b5
 800a22c:	0800a2b5 	.word	0x0800a2b5
 800a230:	0800a2b5 	.word	0x0800a2b5
 800a234:	0800a2b5 	.word	0x0800a2b5
 800a238:	0800a2b5 	.word	0x0800a2b5
 800a23c:	0800a2b5 	.word	0x0800a2b5
 800a240:	0800a2b5 	.word	0x0800a2b5
 800a244:	0800a275 	.word	0x0800a275
 800a248:	0800a29d 	.word	0x0800a29d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a252:	2b03      	cmp	r3, #3
 800a254:	d107      	bne.n	800a266 <USBD_CDC_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a256:	f107 030c 	add.w	r3, r7, #12
 800a25a:	2202      	movs	r2, #2
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 fb3c 	bl	800b8dc <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a264:	e030      	b.n	800a2c8 <USBD_CDC_Setup+0x168>
        USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 fac6 	bl	800b7fa <USBD_CtlError>
        ret = USBD_FAIL;
 800a26e:	2303      	movs	r3, #3
 800a270:	75fb      	strb	r3, [r7, #23]
      break;
 800a272:	e029      	b.n	800a2c8 <USBD_CDC_Setup+0x168>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d107      	bne.n	800a28e <USBD_CDC_Setup+0x12e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a27e:	f107 030f 	add.w	r3, r7, #15
 800a282:	2201      	movs	r2, #1
 800a284:	4619      	mov	r1, r3
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 fb28 	bl	800b8dc <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a28c:	e01c      	b.n	800a2c8 <USBD_CDC_Setup+0x168>
        USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 fab2 	bl	800b7fa <USBD_CtlError>
        ret = USBD_FAIL;
 800a296:	2303      	movs	r3, #3
 800a298:	75fb      	strb	r3, [r7, #23]
      break;
 800a29a:	e015      	b.n	800a2c8 <USBD_CDC_Setup+0x168>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d00f      	beq.n	800a2c6 <USBD_CDC_Setup+0x166>
      {
        USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 faa6 	bl	800b7fa <USBD_CtlError>
        ret = USBD_FAIL;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a2b2:	e008      	b.n	800a2c6 <USBD_CDC_Setup+0x166>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 fa9f 	bl	800b7fa <USBD_CtlError>
      ret = USBD_FAIL;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c0:	e002      	b.n	800a2c8 <USBD_CDC_Setup+0x168>
      break;
 800a2c2:	bf00      	nop
 800a2c4:	e0d2      	b.n	800a46c <USBD_CDC_Setup+0x30c>
      break;
 800a2c6:	bf00      	nop
    }
    break;
 800a2c8:	e0d0      	b.n	800a46c <USBD_CDC_Setup+0x30c>

  case USB_REQ_TYPE_VENDOR:
    switch (req->bRequest)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	785b      	ldrb	r3, [r3, #1]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	2b11      	cmp	r3, #17
 800a2d2:	f200 80bd 	bhi.w	800a450 <USBD_CDC_Setup+0x2f0>
 800a2d6:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <USBD_CDC_Setup+0x17c>)
 800a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2dc:	0800a325 	.word	0x0800a325
 800a2e0:	0800a335 	.word	0x0800a335
 800a2e4:	0800a345 	.word	0x0800a345
 800a2e8:	0800a355 	.word	0x0800a355
 800a2ec:	0800a365 	.word	0x0800a365
 800a2f0:	0800a375 	.word	0x0800a375
 800a2f4:	0800a3a5 	.word	0x0800a3a5
 800a2f8:	0800a3b5 	.word	0x0800a3b5
 800a2fc:	0800a3bd 	.word	0x0800a3bd
 800a300:	0800a3c5 	.word	0x0800a3c5
 800a304:	0800a3cd 	.word	0x0800a3cd
 800a308:	0800a3e3 	.word	0x0800a3e3
 800a30c:	0800a3f5 	.word	0x0800a3f5
 800a310:	0800a40f 	.word	0x0800a40f
 800a314:	0800a435 	.word	0x0800a435
 800a318:	0800a385 	.word	0x0800a385
 800a31c:	0800a43d 	.word	0x0800a43d
 800a320:	0800a443 	.word	0x0800a443
    {
      case USB_MAX2837_SET_LO_FREQ:
        max2837_set_freq(&transceiver, (uint32_t)(pdev->pData));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a32a:	4619      	mov	r1, r3
 800a32c:	4852      	ldr	r0, [pc, #328]	; (800a478 <USBD_CDC_Setup+0x318>)
 800a32e:	f7f6 fcf5 	bl	8000d1c <max2837_set_freq>
        break;
 800a332:	e094      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_MAX2837_SET_MODE:
        max2837_set_mode(&transceiver, (max2837_mode)(req->wValue));
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	885b      	ldrh	r3, [r3, #2]
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	4619      	mov	r1, r3
 800a33c:	484e      	ldr	r0, [pc, #312]	; (800a478 <USBD_CDC_Setup+0x318>)
 800a33e:	f7f6 fc9a 	bl	8000c76 <max2837_set_mode>
        break;
 800a342:	e08c      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_MAX2837_SET_LNA_GAIN:
        max2837_set_lna_gain(&transceiver, (uint8_t)(req->wValue));
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	885b      	ldrh	r3, [r3, #2]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	4619      	mov	r1, r3
 800a34c:	484a      	ldr	r0, [pc, #296]	; (800a478 <USBD_CDC_Setup+0x318>)
 800a34e:	f7f6 fd4d 	bl	8000dec <max2837_set_lna_gain>
        break;
 800a352:	e084      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_MAX2837_SET_VGA_GAIN:
        max2837_set_vga_gain(&transceiver, (uint8_t)(req->wValue));
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	885b      	ldrh	r3, [r3, #2]
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	4619      	mov	r1, r3
 800a35c:	4846      	ldr	r0, [pc, #280]	; (800a478 <USBD_CDC_Setup+0x318>)
 800a35e:	f7f6 fe39 	bl	8000fd4 <max2837_set_vga_gain>
        break;
 800a362:	e07c      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_MAX2837_SET_LPF_BW:
        max2837_set_lpf_bw(&transceiver, (uint8_t)(req->wValue));
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	885b      	ldrh	r3, [r3, #2]
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	4619      	mov	r1, r3
 800a36c:	4842      	ldr	r0, [pc, #264]	; (800a478 <USBD_CDC_Setup+0x318>)
 800a36e:	f7f6 fdc1 	bl	8000ef4 <max2837_set_lpf_bw>
        break;
 800a372:	e074      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_MAX2837_GET_TEMP:
        max2837_temperature = max2837_get_temp(&transceiver);
 800a374:	4840      	ldr	r0, [pc, #256]	; (800a478 <USBD_CDC_Setup+0x318>)
 800a376:	f7f6 fc45 	bl	8000c04 <max2837_get_temp>
 800a37a:	4603      	mov	r3, r0
 800a37c:	461a      	mov	r2, r3
 800a37e:	4b3f      	ldr	r3, [pc, #252]	; (800a47c <USBD_CDC_Setup+0x31c>)
 800a380:	701a      	strb	r2, [r3, #0]
        break;
 800a382:	e06c      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_MAX2837_GET_RSSI:
        HAL_ADC_Start(&hadc1);
 800a384:	483e      	ldr	r0, [pc, #248]	; (800a480 <USBD_CDC_Setup+0x320>)
 800a386:	f7f8 fbbb 	bl	8002b00 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800a38a:	f04f 31ff 	mov.w	r1, #4294967295
 800a38e:	483c      	ldr	r0, [pc, #240]	; (800a480 <USBD_CDC_Setup+0x320>)
 800a390:	f7f8 fc84 	bl	8002c9c <HAL_ADC_PollForConversion>
        max2837_rssi = HAL_ADC_GetValue(&hadc1);
 800a394:	483a      	ldr	r0, [pc, #232]	; (800a480 <USBD_CDC_Setup+0x320>)
 800a396:	f7f8 fe4d 	bl	8003034 <HAL_ADC_GetValue>
 800a39a:	4603      	mov	r3, r0
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	4b39      	ldr	r3, [pc, #228]	; (800a484 <USBD_CDC_Setup+0x324>)
 800a3a0:	801a      	strh	r2, [r3, #0]
        break;
 800a3a2:	e05c      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_RFFC5072_SET_LO_FREQ:
        rffc5072_set_freq(&mixer, (uint32_t)(pdev->pData));
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	4836      	ldr	r0, [pc, #216]	; (800a488 <USBD_CDC_Setup+0x328>)
 800a3ae:	f7f6 ff01 	bl	80011b4 <rffc5072_set_freq>
        break;
 800a3b2:	e054      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_RFFC5072_SET_LOW_PHASENOISE:
        rffc5072_lower_phase_noise(&mixer);
 800a3b4:	4834      	ldr	r0, [pc, #208]	; (800a488 <USBD_CDC_Setup+0x328>)
 800a3b6:	f7f7 f897 	bl	80014e8 <rffc5072_lower_phase_noise>
        break;
 800a3ba:	e050      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_RFFC5072_ENABLE:
        rffc5072_enable(&mixer);
 800a3bc:	4832      	ldr	r0, [pc, #200]	; (800a488 <USBD_CDC_Setup+0x328>)
 800a3be:	f7f7 f9c5 	bl	800174c <rffc5072_enable>
        break;
 800a3c2:	e04c      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_RFFC5072_DISABLE:
        rffc5072_disable(&mixer);
 800a3c4:	4830      	ldr	r0, [pc, #192]	; (800a488 <USBD_CDC_Setup+0x328>)
 800a3c6:	f7f7 f9d1 	bl	800176c <rffc5072_disable>
        break;
 800a3ca:	e048      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_GENCLK_SET_FREQ:
        genclk_fod_settings(&clockg, (uint8_t)(req->wValue), (uint8_t)(req->wIndex));
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	885b      	ldrh	r3, [r3, #2]
 800a3d0:	b2d9      	uxtb	r1, r3
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	889b      	ldrh	r3, [r3, #4]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	461a      	mov	r2, r3
 800a3da:	482c      	ldr	r0, [pc, #176]	; (800a48c <USBD_CDC_Setup+0x32c>)
 800a3dc:	f7f6 f9f4 	bl	80007c8 <genclk_fod_settings>
        break;
 800a3e0:	e03d      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_GENCLK_SET_OUTPUTS:
        genclk_outEn(&clockg, (uint8_t)(pdev->pData));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	4827      	ldr	r0, [pc, #156]	; (800a48c <USBD_CDC_Setup+0x32c>)
 800a3ee:	f7f6 f9b7 	bl	8000760 <genclk_outEn>
        break;
 800a3f2:	e034      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_ENABLE_BANDPASS_FILTER:
        HAL_GPIO_WritePin(Filt_Bypass_GPIO_Port, Filt_Bypass_Pin, GPIO_PIN_SET);
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3fa:	4825      	ldr	r0, [pc, #148]	; (800a490 <USBD_CDC_Setup+0x330>)
 800a3fc:	f7f9 fb8a 	bl	8003b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Filtro_GPIO_Port, Filtro_Pin, GPIO_PIN_RESET);
 800a400:	2200      	movs	r2, #0
 800a402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a406:	4822      	ldr	r0, [pc, #136]	; (800a490 <USBD_CDC_Setup+0x330>)
 800a408:	f7f9 fb84 	bl	8003b14 <HAL_GPIO_WritePin>
        break;
 800a40c:	e027      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_ENABLE_AMP:
        HAL_GPIO_WritePin(Rx_Amp_Pwr_GPIO_Port, Rx_Amp_Pwr_Pin, GPIO_PIN_RESET);
 800a40e:	2200      	movs	r2, #0
 800a410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a414:	481f      	ldr	r0, [pc, #124]	; (800a494 <USBD_CDC_Setup+0x334>)
 800a416:	f7f9 fb7d 	bl	8003b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Rx_Amp_Bypass_GPIO_Port, Rx_Amp_Bypass_Pin, GPIO_PIN_SET);
 800a41a:	2201      	movs	r2, #1
 800a41c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a420:	481c      	ldr	r0, [pc, #112]	; (800a494 <USBD_CDC_Setup+0x334>)
 800a422:	f7f9 fb77 	bl	8003b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Rx_Amp_GPIO_Port, Rx_Amp_Pin, GPIO_PIN_RESET);
 800a426:	2200      	movs	r2, #0
 800a428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a42c:	4819      	ldr	r0, [pc, #100]	; (800a494 <USBD_CDC_Setup+0x334>)
 800a42e:	f7f9 fb71 	bl	8003b14 <HAL_GPIO_WritePin>
        break;
 800a432:	e014      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_BYPASS_MIXER:
        bypass_rf_mixer(1);
 800a434:	2001      	movs	r0, #1
 800a436:	f7f7 f9f5 	bl	8001824 <bypass_rf_mixer>
        break;
 800a43a:	e010      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_QUICK_TEST:
        quick_test();
 800a43c:	f7f7 fc1e 	bl	8001c7c <quick_test>
        break;
 800a440:	e00d      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      case USB_TUNE_FREQ:
        tune_freq((uint32_t)(pdev->pData));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a448:	4618      	mov	r0, r3
 800a44a:	f7f7 fa8f 	bl	800196c <tune_freq>
        break;
 800a44e:	e006      	b.n	800a45e <USBD_CDC_Setup+0x2fe>
      default:
        USBD_CtlError(pdev, req);
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f001 f9d1 	bl	800b7fa <USBD_CtlError>
        ret = USBD_FAIL;
 800a458:	2303      	movs	r3, #3
 800a45a:	75fb      	strb	r3, [r7, #23]
        break;
 800a45c:	bf00      	nop
    }

  default:
    USBD_CtlError(pdev, req);
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f001 f9ca 	bl	800b7fa <USBD_CtlError>
    ret = USBD_FAIL;
 800a466:	2303      	movs	r3, #3
 800a468:	75fb      	strb	r3, [r7, #23]
    break;
 800a46a:	bf00      	nop
  }

  return (uint8_t)ret;
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000308 	.word	0x20000308
 800a47c:	20000254 	.word	0x20000254
 800a480:	20000258 	.word	0x20000258
 800a484:	200002a0 	.word	0x200002a0
 800a488:	200001b0 	.word	0x200001b0
 800a48c:	20000368 	.word	0x20000368
 800a490:	40020400 	.word	0x40020400
 800a494:	40021000 	.word	0x40021000

0800a498 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e049      	b.n	800a54e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a4c2:	78fa      	ldrb	r2, [r7, #3]
 800a4c4:	6879      	ldr	r1, [r7, #4]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	440b      	add	r3, r1
 800a4d0:	3318      	adds	r3, #24
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d029      	beq.n	800a52c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a4d8:	78fa      	ldrb	r2, [r7, #3]
 800a4da:	6879      	ldr	r1, [r7, #4]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	440b      	add	r3, r1
 800a4e6:	3318      	adds	r3, #24
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	78f9      	ldrb	r1, [r7, #3]
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	00db      	lsls	r3, r3, #3
 800a4f2:	1a5b      	subs	r3, r3, r1
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4403      	add	r3, r0
 800a4f8:	3344      	adds	r3, #68	; 0x44
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a500:	fb03 f301 	mul.w	r3, r3, r1
 800a504:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a506:	2b00      	cmp	r3, #0
 800a508:	d110      	bne.n	800a52c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a50a:	78fa      	ldrb	r2, [r7, #3]
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4613      	mov	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	440b      	add	r3, r1
 800a518:	3318      	adds	r3, #24
 800a51a:	2200      	movs	r2, #0
 800a51c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a51e:	78f9      	ldrb	r1, [r7, #3]
 800a520:	2300      	movs	r3, #0
 800a522:	2200      	movs	r2, #0
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f001 ff02 	bl	800c32e <USBD_LL_Transmit>
 800a52a:	e00f      	b.n	800a54c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a548:	78fa      	ldrb	r2, [r7, #3]
 800a54a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	460b      	mov	r3, r1
 800a560:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a568:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a574:	2303      	movs	r3, #3
 800a576:	e015      	b.n	800a5a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a578:	78fb      	ldrb	r3, [r7, #3]
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 ff18 	bl	800c3b2 <USBD_LL_GetRxDataSize>
 800a582:	4602      	mov	r2, r0
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5ba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d015      	beq.n	800a5f2 <USBD_CDC_EP0_RxReady+0x46>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a5cc:	2bff      	cmp	r3, #255	; 0xff
 800a5ce:	d010      	beq.n	800a5f2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a5de:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	22ff      	movs	r2, #255	; 0xff
 800a5ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2220      	movs	r2, #32
 800a608:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a60a:	4b03      	ldr	r3, [pc, #12]	; (800a618 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	2000007c 	.word	0x2000007c

0800a61c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2220      	movs	r2, #32
 800a628:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a62a:	4b03      	ldr	r3, [pc, #12]	; (800a638 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	2000005c 	.word	0x2000005c

0800a63c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2220      	movs	r2, #32
 800a648:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a64a:	4b03      	ldr	r3, [pc, #12]	; (800a658 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	2000009c 	.word	0x2000009c

0800a65c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	220a      	movs	r2, #10
 800a668:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a66a:	4b03      	ldr	r3, [pc, #12]	; (800a678 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	20000018 	.word	0x20000018

0800a67c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e004      	b.n	800a69a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b087      	sub	sp, #28
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	371c      	adds	r7, #28
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6e8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a70e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a710:	2301      	movs	r3, #1
 800a712:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a71e:	2303      	movs	r3, #3
 800a720:	e01a      	b.n	800a758 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d114      	bne.n	800a756 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2201      	movs	r2, #1
 800a730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a74a:	2181      	movs	r1, #129	; 0x81
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f001 fdee 	bl	800c32e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a76e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a776:	2b00      	cmp	r3, #0
 800a778:	d101      	bne.n	800a77e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e016      	b.n	800a7ac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7c1b      	ldrb	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d109      	bne.n	800a79a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a78c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a790:	2101      	movs	r1, #1
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f001 fdec 	bl	800c370 <USBD_LL_PrepareReceive>
 800a798:	e007      	b.n	800a7aa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 fde3 	bl	800c370 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e025      	b.n	800a818 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	79fa      	ldrb	r2, [r7, #7]
 800a80a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f001 fc55 	bl	800c0bc <USBD_LL_Init>
 800a812:	4603      	mov	r3, r0
 800a814:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a816:	7dfb      	ldrb	r3, [r7, #23]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a834:	2303      	movs	r3, #3
 800a836:	e010      	b.n	800a85a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a848:	f107 020e 	add.w	r2, r7, #14
 800a84c:	4610      	mov	r0, r2
 800a84e:	4798      	blx	r3
 800a850:	4602      	mov	r2, r0
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 fc76 	bl	800c15c <USBD_LL_Start>
 800a870:	4603      	mov	r3, r0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a89c:	2303      	movs	r3, #3
 800a89e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d009      	beq.n	800a8be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	78fa      	ldrb	r2, [r7, #3]
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	4798      	blx	r3
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d007      	beq.n	800a8ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	78fa      	ldrb	r2, [r7, #3]
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	4798      	blx	r3
  }

  return USBD_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 ff3b 	bl	800b786 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a91e:	461a      	mov	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a92c:	f003 031f 	and.w	r3, r3, #31
 800a930:	2b02      	cmp	r3, #2
 800a932:	d01a      	beq.n	800a96a <USBD_LL_SetupStage+0x72>
 800a934:	2b02      	cmp	r3, #2
 800a936:	d822      	bhi.n	800a97e <USBD_LL_SetupStage+0x86>
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <USBD_LL_SetupStage+0x4a>
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d00a      	beq.n	800a956 <USBD_LL_SetupStage+0x5e>
 800a940:	e01d      	b.n	800a97e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fa18 	bl	800ad80 <USBD_StdDevReq>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]
      break;
 800a954:	e020      	b.n	800a998 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a95c:	4619      	mov	r1, r3
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fa7c 	bl	800ae5c <USBD_StdItfReq>
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]
      break;
 800a968:	e016      	b.n	800a998 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 faba 	bl	800aeec <USBD_StdEPReq>
 800a978:	4603      	mov	r3, r0
 800a97a:	73fb      	strb	r3, [r7, #15]
      break;
 800a97c:	e00c      	b.n	800a998 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a984:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 fc45 	bl	800c21c <USBD_LL_StallEP>
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]
      break;
 800a996:	bf00      	nop
  }

  return ret;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b086      	sub	sp, #24
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	607a      	str	r2, [r7, #4]
 800a9ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a9b0:	7afb      	ldrb	r3, [r7, #11]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d137      	bne.n	800aa26 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a9bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d14a      	bne.n	800aa5e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	689a      	ldr	r2, [r3, #8]
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d913      	bls.n	800a9fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	689a      	ldr	r2, [r3, #8]
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	1ad2      	subs	r2, r2, r3
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	bf28      	it	cs
 800a9ee:	4613      	movcs	r3, r2
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 ffba 	bl	800b96e <USBD_CtlContinueRx>
 800a9fa:	e030      	b.n	800aa5e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00a      	beq.n	800aa1e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d105      	bne.n	800aa1e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 ffb6 	bl	800b990 <USBD_CtlSendStatus>
 800aa24:	e01b      	b.n	800aa5e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d013      	beq.n	800aa5a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa38:	2b03      	cmp	r3, #3
 800aa3a:	d10e      	bne.n	800aa5a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	7afa      	ldrb	r2, [r7, #11]
 800aa46:	4611      	mov	r1, r2
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	4798      	blx	r3
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d003      	beq.n	800aa5e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	e002      	b.n	800aa60 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e000      	b.n	800aa60 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	460b      	mov	r3, r1
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa76:	7afb      	ldrb	r3, [r7, #11]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d16a      	bne.n	800ab52 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3314      	adds	r3, #20
 800aa80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d155      	bne.n	800ab38 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	689a      	ldr	r2, [r3, #8]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d914      	bls.n	800aac2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	689a      	ldr	r2, [r3, #8]
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	1ad2      	subs	r2, r2, r3
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 ff2f 	bl	800b912 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aab4:	2300      	movs	r3, #0
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f001 fc58 	bl	800c370 <USBD_LL_PrepareReceive>
 800aac0:	e03a      	b.n	800ab38 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d11c      	bne.n	800ab08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d316      	bcc.n	800ab08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d20f      	bcs.n	800ab08 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aae8:	2200      	movs	r2, #0
 800aaea:	2100      	movs	r1, #0
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 ff10 	bl	800b912 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aafa:	2300      	movs	r3, #0
 800aafc:	2200      	movs	r2, #0
 800aafe:	2100      	movs	r1, #0
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f001 fc35 	bl	800c370 <USBD_LL_PrepareReceive>
 800ab06:	e017      	b.n	800ab38 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00a      	beq.n	800ab2a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d105      	bne.n	800ab2a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab2a:	2180      	movs	r1, #128	; 0x80
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f001 fb75 	bl	800c21c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 ff3f 	bl	800b9b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d123      	bne.n	800ab8a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f7ff fe99 	bl	800a87a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab50:	e01b      	b.n	800ab8a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d013      	beq.n	800ab86 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab64:	2b03      	cmp	r3, #3
 800ab66:	d10e      	bne.n	800ab86 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	7afa      	ldrb	r2, [r7, #11]
 800ab72:	4611      	mov	r1, r2
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	4798      	blx	r3
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d003      	beq.n	800ab8a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	e002      	b.n	800ab8c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e000      	b.n	800ab8c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d009      	beq.n	800abd8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6852      	ldr	r2, [r2, #4]
 800abd0:	b2d2      	uxtb	r2, r2
 800abd2:	4611      	mov	r1, r2
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	2200      	movs	r2, #0
 800abdc:	2100      	movs	r1, #0
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 fad7 	bl	800c192 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2240      	movs	r2, #64	; 0x40
 800abf0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abf4:	2340      	movs	r3, #64	; 0x40
 800abf6:	2200      	movs	r2, #0
 800abf8:	2180      	movs	r1, #128	; 0x80
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f001 fac9 	bl	800c192 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2240      	movs	r2, #64	; 0x40
 800ac0a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b083      	sub	sp, #12
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	78fa      	ldrb	r2, [r7, #3]
 800ac26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2204      	movs	r2, #4
 800ac4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d105      	bne.n	800ac7e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d10b      	bne.n	800acb6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d005      	beq.n	800acb6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800acda:	b480      	push	{r7}
 800acdc:	b083      	sub	sp, #12
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	460b      	mov	r3, r1
 800ace4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d009      	beq.n	800ad38 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	6852      	ldr	r2, [r2, #4]
 800ad30:	b2d2      	uxtb	r2, r2
 800ad32:	4611      	mov	r1, r2
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	4798      	blx	r3
  }

  return USBD_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b087      	sub	sp, #28
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	3301      	adds	r3, #1
 800ad58:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad60:	8a3b      	ldrh	r3, [r7, #16]
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	b21a      	sxth	r2, r3
 800ad66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	b21b      	sxth	r3, r3
 800ad6e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad70:	89fb      	ldrh	r3, [r7, #14]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	371c      	adds	r7, #28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
	...

0800ad80 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad96:	2b40      	cmp	r3, #64	; 0x40
 800ad98:	d005      	beq.n	800ada6 <USBD_StdDevReq+0x26>
 800ad9a:	2b40      	cmp	r3, #64	; 0x40
 800ad9c:	d853      	bhi.n	800ae46 <USBD_StdDevReq+0xc6>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00b      	beq.n	800adba <USBD_StdDevReq+0x3a>
 800ada2:	2b20      	cmp	r3, #32
 800ada4:	d14f      	bne.n	800ae46 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	4798      	blx	r3
 800adb4:	4603      	mov	r3, r0
 800adb6:	73fb      	strb	r3, [r7, #15]
    break;
 800adb8:	e04a      	b.n	800ae50 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	785b      	ldrb	r3, [r3, #1]
 800adbe:	2b09      	cmp	r3, #9
 800adc0:	d83b      	bhi.n	800ae3a <USBD_StdDevReq+0xba>
 800adc2:	a201      	add	r2, pc, #4	; (adr r2, 800adc8 <USBD_StdDevReq+0x48>)
 800adc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc8:	0800ae1d 	.word	0x0800ae1d
 800adcc:	0800ae31 	.word	0x0800ae31
 800add0:	0800ae3b 	.word	0x0800ae3b
 800add4:	0800ae27 	.word	0x0800ae27
 800add8:	0800ae3b 	.word	0x0800ae3b
 800addc:	0800adfb 	.word	0x0800adfb
 800ade0:	0800adf1 	.word	0x0800adf1
 800ade4:	0800ae3b 	.word	0x0800ae3b
 800ade8:	0800ae13 	.word	0x0800ae13
 800adec:	0800ae05 	.word	0x0800ae05
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f9d8 	bl	800b1a8 <USBD_GetDescriptor>
      break;
 800adf8:	e024      	b.n	800ae44 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fb3d 	bl	800b47c <USBD_SetAddress>
      break;
 800ae02:	e01f      	b.n	800ae44 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fb7c 	bl	800b504 <USBD_SetConfig>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae10:	e018      	b.n	800ae44 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fc19 	bl	800b64c <USBD_GetConfig>
      break;
 800ae1a:	e013      	b.n	800ae44 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fc49 	bl	800b6b6 <USBD_GetStatus>
      break;
 800ae24:	e00e      	b.n	800ae44 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fc77 	bl	800b71c <USBD_SetFeature>
      break;
 800ae2e:	e009      	b.n	800ae44 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fc86 	bl	800b744 <USBD_ClrFeature>
      break;
 800ae38:	e004      	b.n	800ae44 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fcdc 	bl	800b7fa <USBD_CtlError>
      break;
 800ae42:	bf00      	nop
    }
    break;
 800ae44:	e004      	b.n	800ae50 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fcd6 	bl	800b7fa <USBD_CtlError>
    break;
 800ae4e:	bf00      	nop
  }

  return ret;
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop

0800ae5c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae72:	2b40      	cmp	r3, #64	; 0x40
 800ae74:	d005      	beq.n	800ae82 <USBD_StdItfReq+0x26>
 800ae76:	2b40      	cmp	r3, #64	; 0x40
 800ae78:	d82e      	bhi.n	800aed8 <USBD_StdItfReq+0x7c>
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <USBD_StdItfReq+0x26>
 800ae7e:	2b20      	cmp	r3, #32
 800ae80:	d12a      	bne.n	800aed8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d81d      	bhi.n	800aeca <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	889b      	ldrh	r3, [r3, #4]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d813      	bhi.n	800aec0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	4798      	blx	r3
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	88db      	ldrh	r3, [r3, #6]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d110      	bne.n	800aed4 <USBD_StdItfReq+0x78>
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10d      	bne.n	800aed4 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fd69 	bl	800b990 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800aebe:	e009      	b.n	800aed4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fc99 	bl	800b7fa <USBD_CtlError>
      break;
 800aec8:	e004      	b.n	800aed4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fc94 	bl	800b7fa <USBD_CtlError>
      break;
 800aed2:	e000      	b.n	800aed6 <USBD_StdItfReq+0x7a>
      break;
 800aed4:	bf00      	nop
    }
    break;
 800aed6:	e004      	b.n	800aee2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fc8d 	bl	800b7fa <USBD_CtlError>
    break;
 800aee0:	bf00      	nop
  }

  return ret;
 800aee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	889b      	ldrh	r3, [r3, #4]
 800aefe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af08:	2b40      	cmp	r3, #64	; 0x40
 800af0a:	d007      	beq.n	800af1c <USBD_StdEPReq+0x30>
 800af0c:	2b40      	cmp	r3, #64	; 0x40
 800af0e:	f200 8140 	bhi.w	800b192 <USBD_StdEPReq+0x2a6>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00c      	beq.n	800af30 <USBD_StdEPReq+0x44>
 800af16:	2b20      	cmp	r3, #32
 800af18:	f040 813b 	bne.w	800b192 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	6839      	ldr	r1, [r7, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	4798      	blx	r3
 800af2a:	4603      	mov	r3, r0
 800af2c:	73fb      	strb	r3, [r7, #15]
    break;
 800af2e:	e135      	b.n	800b19c <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	785b      	ldrb	r3, [r3, #1]
 800af34:	2b03      	cmp	r3, #3
 800af36:	d007      	beq.n	800af48 <USBD_StdEPReq+0x5c>
 800af38:	2b03      	cmp	r3, #3
 800af3a:	f300 8124 	bgt.w	800b186 <USBD_StdEPReq+0x29a>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d07b      	beq.n	800b03a <USBD_StdEPReq+0x14e>
 800af42:	2b01      	cmp	r3, #1
 800af44:	d03b      	beq.n	800afbe <USBD_StdEPReq+0xd2>
 800af46:	e11e      	b.n	800b186 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d002      	beq.n	800af58 <USBD_StdEPReq+0x6c>
 800af52:	2b03      	cmp	r3, #3
 800af54:	d016      	beq.n	800af84 <USBD_StdEPReq+0x98>
 800af56:	e02c      	b.n	800afb2 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00d      	beq.n	800af7a <USBD_StdEPReq+0x8e>
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	2b80      	cmp	r3, #128	; 0x80
 800af62:	d00a      	beq.n	800af7a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800af64:	7bbb      	ldrb	r3, [r7, #14]
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f001 f957 	bl	800c21c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af6e:	2180      	movs	r1, #128	; 0x80
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f001 f953 	bl	800c21c <USBD_LL_StallEP>
 800af76:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800af78:	e020      	b.n	800afbc <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fc3c 	bl	800b7fa <USBD_CtlError>
        break;
 800af82:	e01b      	b.n	800afbc <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	885b      	ldrh	r3, [r3, #2]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10e      	bne.n	800afaa <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af8c:	7bbb      	ldrb	r3, [r7, #14]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00b      	beq.n	800afaa <USBD_StdEPReq+0xbe>
 800af92:	7bbb      	ldrb	r3, [r7, #14]
 800af94:	2b80      	cmp	r3, #128	; 0x80
 800af96:	d008      	beq.n	800afaa <USBD_StdEPReq+0xbe>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	88db      	ldrh	r3, [r3, #6]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d104      	bne.n	800afaa <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f001 f939 	bl	800c21c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fcf0 	bl	800b990 <USBD_CtlSendStatus>

        break;
 800afb0:	e004      	b.n	800afbc <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fc20 	bl	800b7fa <USBD_CtlError>
        break;
 800afba:	bf00      	nop
      }
      break;
 800afbc:	e0e8      	b.n	800b190 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d002      	beq.n	800afce <USBD_StdEPReq+0xe2>
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d016      	beq.n	800affa <USBD_StdEPReq+0x10e>
 800afcc:	e02e      	b.n	800b02c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afce:	7bbb      	ldrb	r3, [r7, #14]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00d      	beq.n	800aff0 <USBD_StdEPReq+0x104>
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	2b80      	cmp	r3, #128	; 0x80
 800afd8:	d00a      	beq.n	800aff0 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 f91c 	bl	800c21c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800afe4:	2180      	movs	r1, #128	; 0x80
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 f918 	bl	800c21c <USBD_LL_StallEP>
 800afec:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800afee:	e023      	b.n	800b038 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fc01 	bl	800b7fa <USBD_CtlError>
        break;
 800aff8:	e01e      	b.n	800b038 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	885b      	ldrh	r3, [r3, #2]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d119      	bne.n	800b036 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b002:	7bbb      	ldrb	r3, [r7, #14]
 800b004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d004      	beq.n	800b016 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 f922 	bl	800c25a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fcba 	bl	800b990 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	4798      	blx	r3
        }
        break;
 800b02a:	e004      	b.n	800b036 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800b02c:	6839      	ldr	r1, [r7, #0]
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 fbe3 	bl	800b7fa <USBD_CtlError>
        break;
 800b034:	e000      	b.n	800b038 <USBD_StdEPReq+0x14c>
        break;
 800b036:	bf00      	nop
      }
      break;
 800b038:	e0aa      	b.n	800b190 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b040:	2b02      	cmp	r3, #2
 800b042:	d002      	beq.n	800b04a <USBD_StdEPReq+0x15e>
 800b044:	2b03      	cmp	r3, #3
 800b046:	d032      	beq.n	800b0ae <USBD_StdEPReq+0x1c2>
 800b048:	e097      	b.n	800b17a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b04a:	7bbb      	ldrb	r3, [r7, #14]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d007      	beq.n	800b060 <USBD_StdEPReq+0x174>
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	2b80      	cmp	r3, #128	; 0x80
 800b054:	d004      	beq.n	800b060 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fbce 	bl	800b7fa <USBD_CtlError>
          break;
 800b05e:	e091      	b.n	800b184 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b064:	2b00      	cmp	r3, #0
 800b066:	da0b      	bge.n	800b080 <USBD_StdEPReq+0x194>
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b06e:	4613      	mov	r3, r2
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4413      	add	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	3310      	adds	r3, #16
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	4413      	add	r3, r2
 800b07c:	3304      	adds	r3, #4
 800b07e:	e00b      	b.n	800b098 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b080:	7bbb      	ldrb	r3, [r7, #14]
 800b082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b086:	4613      	mov	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	4413      	add	r3, r2
 800b096:	3304      	adds	r3, #4
 800b098:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2200      	movs	r2, #0
 800b09e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fc18 	bl	800b8dc <USBD_CtlSendData>
        break;
 800b0ac:	e06a      	b.n	800b184 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b0ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	da11      	bge.n	800b0da <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	f003 020f 	and.w	r2, r3, #15
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	440b      	add	r3, r1
 800b0c8:	3324      	adds	r3, #36	; 0x24
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d117      	bne.n	800b100 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fb91 	bl	800b7fa <USBD_CtlError>
            break;
 800b0d8:	e054      	b.n	800b184 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	f003 020f 	and.w	r2, r3, #15
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	440b      	add	r3, r1
 800b0ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d104      	bne.n	800b100 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fb7e 	bl	800b7fa <USBD_CtlError>
            break;
 800b0fe:	e041      	b.n	800b184 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b104:	2b00      	cmp	r3, #0
 800b106:	da0b      	bge.n	800b120 <USBD_StdEPReq+0x234>
 800b108:	7bbb      	ldrb	r3, [r7, #14]
 800b10a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b10e:	4613      	mov	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	3310      	adds	r3, #16
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	4413      	add	r3, r2
 800b11c:	3304      	adds	r3, #4
 800b11e:	e00b      	b.n	800b138 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b126:	4613      	mov	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	4413      	add	r3, r2
 800b136:	3304      	adds	r3, #4
 800b138:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <USBD_StdEPReq+0x25a>
 800b140:	7bbb      	ldrb	r3, [r7, #14]
 800b142:	2b80      	cmp	r3, #128	; 0x80
 800b144:	d103      	bne.n	800b14e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]
 800b14c:	e00e      	b.n	800b16c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f001 f8a0 	bl	800c298 <USBD_LL_IsStallEP>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2201      	movs	r2, #1
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	e002      	b.n	800b16c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2200      	movs	r2, #0
 800b16a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2202      	movs	r2, #2
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fbb2 	bl	800b8dc <USBD_CtlSendData>
          break;
 800b178:	e004      	b.n	800b184 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fb3c 	bl	800b7fa <USBD_CtlError>
        break;
 800b182:	bf00      	nop
      }
      break;
 800b184:	e004      	b.n	800b190 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fb36 	bl	800b7fa <USBD_CtlError>
      break;
 800b18e:	bf00      	nop
    }
    break;
 800b190:	e004      	b.n	800b19c <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fb30 	bl	800b7fa <USBD_CtlError>
    break;
 800b19a:	bf00      	nop
  }

  return ret;
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
	...

0800b1a8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	885b      	ldrh	r3, [r3, #2]
 800b1c2:	0a1b      	lsrs	r3, r3, #8
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	2b06      	cmp	r3, #6
 800b1ca:	f200 8128 	bhi.w	800b41e <USBD_GetDescriptor+0x276>
 800b1ce:	a201      	add	r2, pc, #4	; (adr r2, 800b1d4 <USBD_GetDescriptor+0x2c>)
 800b1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d4:	0800b1f1 	.word	0x0800b1f1
 800b1d8:	0800b209 	.word	0x0800b209
 800b1dc:	0800b249 	.word	0x0800b249
 800b1e0:	0800b41f 	.word	0x0800b41f
 800b1e4:	0800b41f 	.word	0x0800b41f
 800b1e8:	0800b3bf 	.word	0x0800b3bf
 800b1ec:	0800b3eb 	.word	0x0800b3eb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	7c12      	ldrb	r2, [r2, #16]
 800b1fc:	f107 0108 	add.w	r1, r7, #8
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	60f8      	str	r0, [r7, #12]
    break;
 800b206:	e112      	b.n	800b42e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	7c1b      	ldrb	r3, [r3, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10d      	bne.n	800b22c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b218:	f107 0208 	add.w	r2, r7, #8
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
 800b220:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3301      	adds	r3, #1
 800b226:	2202      	movs	r2, #2
 800b228:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b22a:	e100      	b.n	800b42e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b234:	f107 0208 	add.w	r2, r7, #8
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	2202      	movs	r2, #2
 800b244:	701a      	strb	r2, [r3, #0]
    break;
 800b246:	e0f2      	b.n	800b42e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	885b      	ldrh	r3, [r3, #2]
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b05      	cmp	r3, #5
 800b250:	f200 80ac 	bhi.w	800b3ac <USBD_GetDescriptor+0x204>
 800b254:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <USBD_GetDescriptor+0xb4>)
 800b256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25a:	bf00      	nop
 800b25c:	0800b275 	.word	0x0800b275
 800b260:	0800b2a9 	.word	0x0800b2a9
 800b264:	0800b2dd 	.word	0x0800b2dd
 800b268:	0800b311 	.word	0x0800b311
 800b26c:	0800b345 	.word	0x0800b345
 800b270:	0800b379 	.word	0x0800b379
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	7c12      	ldrb	r2, [r2, #16]
 800b28c:	f107 0108 	add.w	r1, r7, #8
 800b290:	4610      	mov	r0, r2
 800b292:	4798      	blx	r3
 800b294:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b296:	e091      	b.n	800b3bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 faad 	bl	800b7fa <USBD_CtlError>
        err++;
 800b2a0:	7afb      	ldrb	r3, [r7, #11]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	72fb      	strb	r3, [r7, #11]
      break;
 800b2a6:	e089      	b.n	800b3bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00b      	beq.n	800b2cc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	7c12      	ldrb	r2, [r2, #16]
 800b2c0:	f107 0108 	add.w	r1, r7, #8
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	4798      	blx	r3
 800b2c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2ca:	e077      	b.n	800b3bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fa93 	bl	800b7fa <USBD_CtlError>
        err++;
 800b2d4:	7afb      	ldrb	r3, [r7, #11]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	72fb      	strb	r3, [r7, #11]
      break;
 800b2da:	e06f      	b.n	800b3bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	7c12      	ldrb	r2, [r2, #16]
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
 800b2fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2fe:	e05d      	b.n	800b3bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fa79 	bl	800b7fa <USBD_CtlError>
        err++;
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	3301      	adds	r3, #1
 800b30c:	72fb      	strb	r3, [r7, #11]
      break;
 800b30e:	e055      	b.n	800b3bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00b      	beq.n	800b334 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	7c12      	ldrb	r2, [r2, #16]
 800b328:	f107 0108 	add.w	r1, r7, #8
 800b32c:	4610      	mov	r0, r2
 800b32e:	4798      	blx	r3
 800b330:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b332:	e043      	b.n	800b3bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa5f 	bl	800b7fa <USBD_CtlError>
        err++;
 800b33c:	7afb      	ldrb	r3, [r7, #11]
 800b33e:	3301      	adds	r3, #1
 800b340:	72fb      	strb	r3, [r7, #11]
      break;
 800b342:	e03b      	b.n	800b3bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00b      	beq.n	800b368 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	7c12      	ldrb	r2, [r2, #16]
 800b35c:	f107 0108 	add.w	r1, r7, #8
 800b360:	4610      	mov	r0, r2
 800b362:	4798      	blx	r3
 800b364:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b366:	e029      	b.n	800b3bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fa45 	bl	800b7fa <USBD_CtlError>
        err++;
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	3301      	adds	r3, #1
 800b374:	72fb      	strb	r3, [r7, #11]
      break;
 800b376:	e021      	b.n	800b3bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	7c12      	ldrb	r2, [r2, #16]
 800b390:	f107 0108 	add.w	r1, r7, #8
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b39a:	e00f      	b.n	800b3bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fa2b 	bl	800b7fa <USBD_CtlError>
        err++;
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	72fb      	strb	r3, [r7, #11]
      break;
 800b3aa:	e007      	b.n	800b3bc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa23 	bl	800b7fa <USBD_CtlError>
      err++;
 800b3b4:	7afb      	ldrb	r3, [r7, #11]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b3ba:	bf00      	nop
    }
    break;
 800b3bc:	e037      	b.n	800b42e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	7c1b      	ldrb	r3, [r3, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d109      	bne.n	800b3da <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ce:	f107 0208 	add.w	r2, r7, #8
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	4798      	blx	r3
 800b3d6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b3d8:	e029      	b.n	800b42e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fa0c 	bl	800b7fa <USBD_CtlError>
      err++;
 800b3e2:	7afb      	ldrb	r3, [r7, #11]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	72fb      	strb	r3, [r7, #11]
    break;
 800b3e8:	e021      	b.n	800b42e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	7c1b      	ldrb	r3, [r3, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10d      	bne.n	800b40e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3fa:	f107 0208 	add.w	r2, r7, #8
 800b3fe:	4610      	mov	r0, r2
 800b400:	4798      	blx	r3
 800b402:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3301      	adds	r3, #1
 800b408:	2207      	movs	r2, #7
 800b40a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b40c:	e00f      	b.n	800b42e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f9f2 	bl	800b7fa <USBD_CtlError>
      err++;
 800b416:	7afb      	ldrb	r3, [r7, #11]
 800b418:	3301      	adds	r3, #1
 800b41a:	72fb      	strb	r3, [r7, #11]
    break;
 800b41c:	e007      	b.n	800b42e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f9ea 	bl	800b7fa <USBD_CtlError>
    err++;
 800b426:	7afb      	ldrb	r3, [r7, #11]
 800b428:	3301      	adds	r3, #1
 800b42a:	72fb      	strb	r3, [r7, #11]
    break;
 800b42c:	bf00      	nop
  }

  if (err != 0U)
 800b42e:	7afb      	ldrb	r3, [r7, #11]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d11e      	bne.n	800b472 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	88db      	ldrh	r3, [r3, #6]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d016      	beq.n	800b46a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b43c:	893b      	ldrh	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00e      	beq.n	800b460 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	88da      	ldrh	r2, [r3, #6]
 800b446:	893b      	ldrh	r3, [r7, #8]
 800b448:	4293      	cmp	r3, r2
 800b44a:	bf28      	it	cs
 800b44c:	4613      	movcs	r3, r2
 800b44e:	b29b      	uxth	r3, r3
 800b450:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b452:	893b      	ldrh	r3, [r7, #8]
 800b454:	461a      	mov	r2, r3
 800b456:	68f9      	ldr	r1, [r7, #12]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fa3f 	bl	800b8dc <USBD_CtlSendData>
 800b45e:	e009      	b.n	800b474 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f9c9 	bl	800b7fa <USBD_CtlError>
 800b468:	e004      	b.n	800b474 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa90 	bl	800b990 <USBD_CtlSendStatus>
 800b470:	e000      	b.n	800b474 <USBD_GetDescriptor+0x2cc>
    return;
 800b472:	bf00      	nop
    }
  }
}
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop

0800b47c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	889b      	ldrh	r3, [r3, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d130      	bne.n	800b4f0 <USBD_SetAddress+0x74>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	88db      	ldrh	r3, [r3, #6]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d12c      	bne.n	800b4f0 <USBD_SetAddress+0x74>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	2b7f      	cmp	r3, #127	; 0x7f
 800b49c:	d828      	bhi.n	800b4f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	885b      	ldrh	r3, [r3, #2]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d104      	bne.n	800b4be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f99f 	bl	800b7fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4bc:	e01d      	b.n	800b4fa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	7bfa      	ldrb	r2, [r7, #15]
 800b4c2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 ff10 	bl	800c2f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fa5d 	bl	800b990 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d004      	beq.n	800b4e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e4:	e009      	b.n	800b4fa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ee:	e004      	b.n	800b4fa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4f0:	6839      	ldr	r1, [r7, #0]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f981 	bl	800b7fa <USBD_CtlError>
  }
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
	...

0800b504 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	885b      	ldrh	r3, [r3, #2]
 800b516:	b2da      	uxtb	r2, r3
 800b518:	4b4b      	ldr	r3, [pc, #300]	; (800b648 <USBD_SetConfig+0x144>)
 800b51a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b51c:	4b4a      	ldr	r3, [pc, #296]	; (800b648 <USBD_SetConfig+0x144>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d905      	bls.n	800b530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b524:	6839      	ldr	r1, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f967 	bl	800b7fa <USBD_CtlError>
    return USBD_FAIL;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e087      	b.n	800b640 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b536:	2b02      	cmp	r3, #2
 800b538:	d002      	beq.n	800b540 <USBD_SetConfig+0x3c>
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	d025      	beq.n	800b58a <USBD_SetConfig+0x86>
 800b53e:	e071      	b.n	800b624 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b540:	4b41      	ldr	r3, [pc, #260]	; (800b648 <USBD_SetConfig+0x144>)
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01c      	beq.n	800b582 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b548:	4b3f      	ldr	r3, [pc, #252]	; (800b648 <USBD_SetConfig+0x144>)
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	461a      	mov	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b552:	4b3d      	ldr	r3, [pc, #244]	; (800b648 <USBD_SetConfig+0x144>)
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7ff f999 	bl	800a890 <USBD_SetClassConfig>
 800b55e:	4603      	mov	r3, r0
 800b560:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d004      	beq.n	800b572 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f945 	bl	800b7fa <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b570:	e065      	b.n	800b63e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fa0c 	bl	800b990 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2203      	movs	r2, #3
 800b57c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b580:	e05d      	b.n	800b63e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fa04 	bl	800b990 <USBD_CtlSendStatus>
    break;
 800b588:	e059      	b.n	800b63e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b58a:	4b2f      	ldr	r3, [pc, #188]	; (800b648 <USBD_SetConfig+0x144>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d112      	bne.n	800b5b8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2202      	movs	r2, #2
 800b596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b59a:	4b2b      	ldr	r3, [pc, #172]	; (800b648 <USBD_SetConfig+0x144>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5a4:	4b28      	ldr	r3, [pc, #160]	; (800b648 <USBD_SetConfig+0x144>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff f98c 	bl	800a8c8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f9ed 	bl	800b990 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b5b6:	e042      	b.n	800b63e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b5b8:	4b23      	ldr	r3, [pc, #140]	; (800b648 <USBD_SetConfig+0x144>)
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d02a      	beq.n	800b61c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff f97a 	bl	800a8c8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b5d4:	4b1c      	ldr	r3, [pc, #112]	; (800b648 <USBD_SetConfig+0x144>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5de:	4b1a      	ldr	r3, [pc, #104]	; (800b648 <USBD_SetConfig+0x144>)
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff f953 	bl	800a890 <USBD_SetClassConfig>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00f      	beq.n	800b614 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f8ff 	bl	800b7fa <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	b2db      	uxtb	r3, r3
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7ff f95f 	bl	800a8c8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2202      	movs	r2, #2
 800b60e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b612:	e014      	b.n	800b63e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f9bb 	bl	800b990 <USBD_CtlSendStatus>
    break;
 800b61a:	e010      	b.n	800b63e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f9b7 	bl	800b990 <USBD_CtlSendStatus>
    break;
 800b622:	e00c      	b.n	800b63e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f8e7 	bl	800b7fa <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b62c:	4b06      	ldr	r3, [pc, #24]	; (800b648 <USBD_SetConfig+0x144>)
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7ff f948 	bl	800a8c8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b638:	2303      	movs	r3, #3
 800b63a:	73fb      	strb	r3, [r7, #15]
    break;
 800b63c:	bf00      	nop
  }

  return ret;
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	200001a4 	.word	0x200001a4

0800b64c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	88db      	ldrh	r3, [r3, #6]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d004      	beq.n	800b668 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f8ca 	bl	800b7fa <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b666:	e022      	b.n	800b6ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b66e:	2b02      	cmp	r3, #2
 800b670:	dc02      	bgt.n	800b678 <USBD_GetConfig+0x2c>
 800b672:	2b00      	cmp	r3, #0
 800b674:	dc03      	bgt.n	800b67e <USBD_GetConfig+0x32>
 800b676:	e015      	b.n	800b6a4 <USBD_GetConfig+0x58>
 800b678:	2b03      	cmp	r3, #3
 800b67a:	d00b      	beq.n	800b694 <USBD_GetConfig+0x48>
 800b67c:	e012      	b.n	800b6a4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3308      	adds	r3, #8
 800b688:	2201      	movs	r2, #1
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f925 	bl	800b8dc <USBD_CtlSendData>
      break;
 800b692:	e00c      	b.n	800b6ae <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3304      	adds	r3, #4
 800b698:	2201      	movs	r2, #1
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f91d 	bl	800b8dc <USBD_CtlSendData>
      break;
 800b6a2:	e004      	b.n	800b6ae <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f8a7 	bl	800b7fa <USBD_CtlError>
      break;
 800b6ac:	bf00      	nop
}
 800b6ae:	bf00      	nop
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b082      	sub	sp, #8
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d81e      	bhi.n	800b70a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	88db      	ldrh	r3, [r3, #6]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d004      	beq.n	800b6de <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f88f 	bl	800b7fa <USBD_CtlError>
      break;
 800b6dc:	e01a      	b.n	800b714 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d005      	beq.n	800b6fa <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	f043 0202 	orr.w	r2, r3, #2
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	330c      	adds	r3, #12
 800b6fe:	2202      	movs	r2, #2
 800b700:	4619      	mov	r1, r3
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f8ea 	bl	800b8dc <USBD_CtlSendData>
    break;
 800b708:	e004      	b.n	800b714 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f874 	bl	800b7fa <USBD_CtlError>
    break;
 800b712:	bf00      	nop
  }
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	885b      	ldrh	r3, [r3, #2]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d106      	bne.n	800b73c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f92a 	bl	800b990 <USBD_CtlSendStatus>
  }
}
 800b73c:	bf00      	nop
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b754:	3b01      	subs	r3, #1
 800b756:	2b02      	cmp	r3, #2
 800b758:	d80b      	bhi.n	800b772 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	885b      	ldrh	r3, [r3, #2]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d10c      	bne.n	800b77c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f910 	bl	800b990 <USBD_CtlSendStatus>
      }
      break;
 800b770:	e004      	b.n	800b77c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f840 	bl	800b7fa <USBD_CtlError>
      break;
 800b77a:	e000      	b.n	800b77e <USBD_ClrFeature+0x3a>
      break;
 800b77c:	bf00      	nop
  }
}
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	781a      	ldrb	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	781a      	ldrb	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f7ff fac6 	bl	800ad42 <SWAPBYTE>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7ff fab9 	bl	800ad42 <SWAPBYTE>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff faac 	bl	800ad42 <SWAPBYTE>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	80da      	strh	r2, [r3, #6]
}
 800b7f2:	bf00      	nop
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b804:	2180      	movs	r1, #128	; 0x80
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fd08 	bl	800c21c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b80c:	2100      	movs	r1, #0
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fd04 	bl	800c21c <USBD_LL_StallEP>
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b828:	2300      	movs	r3, #0
 800b82a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d036      	beq.n	800b8a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b836:	6938      	ldr	r0, [r7, #16]
 800b838:	f000 f836 	bl	800b8a8 <USBD_GetLen>
 800b83c:	4603      	mov	r3, r0
 800b83e:	3301      	adds	r3, #1
 800b840:	b29b      	uxth	r3, r3
 800b842:	005b      	lsls	r3, r3, #1
 800b844:	b29a      	uxth	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	4413      	add	r3, r2
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	7812      	ldrb	r2, [r2, #0]
 800b854:	701a      	strb	r2, [r3, #0]
  idx++;
 800b856:	7dfb      	ldrb	r3, [r7, #23]
 800b858:	3301      	adds	r3, #1
 800b85a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b85c:	7dfb      	ldrb	r3, [r7, #23]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	4413      	add	r3, r2
 800b862:	2203      	movs	r2, #3
 800b864:	701a      	strb	r2, [r3, #0]
  idx++;
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	3301      	adds	r3, #1
 800b86a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b86c:	e013      	b.n	800b896 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	4413      	add	r3, r2
 800b874:	693a      	ldr	r2, [r7, #16]
 800b876:	7812      	ldrb	r2, [r2, #0]
 800b878:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	3301      	adds	r3, #1
 800b87e:	613b      	str	r3, [r7, #16]
    idx++;
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	3301      	adds	r3, #1
 800b884:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	4413      	add	r3, r2
 800b88c:	2200      	movs	r2, #0
 800b88e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	3301      	adds	r3, #1
 800b894:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e7      	bne.n	800b86e <USBD_GetString+0x52>
 800b89e:	e000      	b.n	800b8a2 <USBD_GetString+0x86>
    return;
 800b8a0:	bf00      	nop
  }
}
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b8b8:	e005      	b.n	800b8c6 <USBD_GetLen+0x1e>
  {
    len++;
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1f5      	bne.n	800b8ba <USBD_GetLen+0x12>
  }

  return len;
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	2100      	movs	r1, #0
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f000 fd13 	bl	800c32e <USBD_LL_Transmit>

  return USBD_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	60f8      	str	r0, [r7, #12]
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	2100      	movs	r1, #0
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f000 fd02 	bl	800c32e <USBD_LL_Transmit>

  return USBD_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2203      	movs	r2, #3
 800b944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	2100      	movs	r1, #0
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f000 fd06 	bl	800c370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	60f8      	str	r0, [r7, #12]
 800b976:	60b9      	str	r1, [r7, #8]
 800b978:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	2100      	movs	r1, #0
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f000 fcf5 	bl	800c370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2204      	movs	r2, #4
 800b99c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fcc1 	bl	800c32e <USBD_LL_Transmit>

  return USBD_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2205      	movs	r2, #5
 800b9c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fccf 	bl	800c370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	4912      	ldr	r1, [pc, #72]	; (800ba2c <MX_USB_DEVICE_Init+0x50>)
 800b9e4:	4812      	ldr	r0, [pc, #72]	; (800ba30 <MX_USB_DEVICE_Init+0x54>)
 800b9e6:	f7fe fee5 	bl	800a7b4 <USBD_Init>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d001      	beq.n	800b9f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b9f0:	f7f6 fd8e 	bl	8002510 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800b9f4:	490f      	ldr	r1, [pc, #60]	; (800ba34 <MX_USB_DEVICE_Init+0x58>)
 800b9f6:	480e      	ldr	r0, [pc, #56]	; (800ba30 <MX_USB_DEVICE_Init+0x54>)
 800b9f8:	f7fe ff12 	bl	800a820 <USBD_RegisterClass>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba02:	f7f6 fd85 	bl	8002510 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800ba06:	490c      	ldr	r1, [pc, #48]	; (800ba38 <MX_USB_DEVICE_Init+0x5c>)
 800ba08:	4809      	ldr	r0, [pc, #36]	; (800ba30 <MX_USB_DEVICE_Init+0x54>)
 800ba0a:	f7fe fe37 	bl	800a67c <USBD_CDC_RegisterInterface>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba14:	f7f6 fd7c 	bl	8002510 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ba18:	4805      	ldr	r0, [pc, #20]	; (800ba30 <MX_USB_DEVICE_Init+0x54>)
 800ba1a:	f7fe ff22 	bl	800a862 <USBD_Start>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba24:	f7f6 fd74 	bl	8002510 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba28:	bf00      	nop
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	200000d0 	.word	0x200000d0
 800ba30:	200003f8 	.word	0x200003f8
 800ba34:	20000024 	.word	0x20000024
 800ba38:	200000bc 	.word	0x200000bc

0800ba3c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ba40:	2200      	movs	r2, #0
 800ba42:	4905      	ldr	r1, [pc, #20]	; (800ba58 <CDC_Init_HS+0x1c>)
 800ba44:	4805      	ldr	r0, [pc, #20]	; (800ba5c <CDC_Init_HS+0x20>)
 800ba46:	f7fe fe2e 	bl	800a6a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ba4a:	4905      	ldr	r1, [pc, #20]	; (800ba60 <CDC_Init_HS+0x24>)
 800ba4c:	4803      	ldr	r0, [pc, #12]	; (800ba5c <CDC_Init_HS+0x20>)
 800ba4e:	f7fe fe43 	bl	800a6d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba52:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	20000ec8 	.word	0x20000ec8
 800ba5c:	200003f8 	.word	0x200003f8
 800ba60:	200006c8 	.word	0x200006c8

0800ba64 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ba64:	b480      	push	{r7}
 800ba66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ba68:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	6039      	str	r1, [r7, #0]
 800ba7e:	71fb      	strb	r3, [r7, #7]
 800ba80:	4613      	mov	r3, r2
 800ba82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	2b23      	cmp	r3, #35	; 0x23
 800ba88:	d84a      	bhi.n	800bb20 <CDC_Control_HS+0xac>
 800ba8a:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <CDC_Control_HS+0x1c>)
 800ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba90:	0800bb21 	.word	0x0800bb21
 800ba94:	0800bb21 	.word	0x0800bb21
 800ba98:	0800bb21 	.word	0x0800bb21
 800ba9c:	0800bb21 	.word	0x0800bb21
 800baa0:	0800bb21 	.word	0x0800bb21
 800baa4:	0800bb21 	.word	0x0800bb21
 800baa8:	0800bb21 	.word	0x0800bb21
 800baac:	0800bb21 	.word	0x0800bb21
 800bab0:	0800bb21 	.word	0x0800bb21
 800bab4:	0800bb21 	.word	0x0800bb21
 800bab8:	0800bb21 	.word	0x0800bb21
 800babc:	0800bb21 	.word	0x0800bb21
 800bac0:	0800bb21 	.word	0x0800bb21
 800bac4:	0800bb21 	.word	0x0800bb21
 800bac8:	0800bb21 	.word	0x0800bb21
 800bacc:	0800bb21 	.word	0x0800bb21
 800bad0:	0800bb21 	.word	0x0800bb21
 800bad4:	0800bb21 	.word	0x0800bb21
 800bad8:	0800bb21 	.word	0x0800bb21
 800badc:	0800bb21 	.word	0x0800bb21
 800bae0:	0800bb21 	.word	0x0800bb21
 800bae4:	0800bb21 	.word	0x0800bb21
 800bae8:	0800bb21 	.word	0x0800bb21
 800baec:	0800bb21 	.word	0x0800bb21
 800baf0:	0800bb21 	.word	0x0800bb21
 800baf4:	0800bb21 	.word	0x0800bb21
 800baf8:	0800bb21 	.word	0x0800bb21
 800bafc:	0800bb21 	.word	0x0800bb21
 800bb00:	0800bb21 	.word	0x0800bb21
 800bb04:	0800bb21 	.word	0x0800bb21
 800bb08:	0800bb21 	.word	0x0800bb21
 800bb0c:	0800bb21 	.word	0x0800bb21
 800bb10:	0800bb21 	.word	0x0800bb21
 800bb14:	0800bb21 	.word	0x0800bb21
 800bb18:	0800bb21 	.word	0x0800bb21
 800bb1c:	0800bb21 	.word	0x0800bb21
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb20:	bf00      	nop
  }

  return (USBD_OK);
 800bb22:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800bb3a:	6879      	ldr	r1, [r7, #4]
 800bb3c:	4805      	ldr	r0, [pc, #20]	; (800bb54 <CDC_Receive_HS+0x24>)
 800bb3e:	f7fe fdcb 	bl	800a6d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800bb42:	4804      	ldr	r0, [pc, #16]	; (800bb54 <CDC_Receive_HS+0x24>)
 800bb44:	f7fe fe0c 	bl	800a760 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bb48:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	200003f8 	.word	0x200003f8

0800bb58 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800bb68:	4b0d      	ldr	r3, [pc, #52]	; (800bba0 <CDC_Transmit_HS+0x48>)
 800bb6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e00b      	b.n	800bb96 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800bb7e:	887b      	ldrh	r3, [r7, #2]
 800bb80:	461a      	mov	r2, r3
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	4806      	ldr	r0, [pc, #24]	; (800bba0 <CDC_Transmit_HS+0x48>)
 800bb86:	f7fe fd8e 	bl	800a6a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800bb8a:	4805      	ldr	r0, [pc, #20]	; (800bba0 <CDC_Transmit_HS+0x48>)
 800bb8c:	f7fe fdb8 	bl	800a700 <USBD_CDC_TransmitPacket>
 800bb90:	4603      	mov	r3, r0
 800bb92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	200003f8 	.word	0x200003f8

0800bba4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800bbb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	371c      	adds	r7, #28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
	...

0800bbc8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	6039      	str	r1, [r7, #0]
 800bbd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2212      	movs	r2, #18
 800bbd8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800bbda:	4b03      	ldr	r3, [pc, #12]	; (800bbe8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	200000ec 	.word	0x200000ec

0800bbec <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	6039      	str	r1, [r7, #0]
 800bbf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2204      	movs	r2, #4
 800bbfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bbfe:	4b03      	ldr	r3, [pc, #12]	; (800bc0c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	20000100 	.word	0x20000100

0800bc10 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	4603      	mov	r3, r0
 800bc18:	6039      	str	r1, [r7, #0]
 800bc1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc1c:	79fb      	ldrb	r3, [r7, #7]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d105      	bne.n	800bc2e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	4907      	ldr	r1, [pc, #28]	; (800bc44 <USBD_HS_ProductStrDescriptor+0x34>)
 800bc26:	4808      	ldr	r0, [pc, #32]	; (800bc48 <USBD_HS_ProductStrDescriptor+0x38>)
 800bc28:	f7ff fdf8 	bl	800b81c <USBD_GetString>
 800bc2c:	e004      	b.n	800bc38 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	4904      	ldr	r1, [pc, #16]	; (800bc44 <USBD_HS_ProductStrDescriptor+0x34>)
 800bc32:	4805      	ldr	r0, [pc, #20]	; (800bc48 <USBD_HS_ProductStrDescriptor+0x38>)
 800bc34:	f7ff fdf2 	bl	800b81c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc38:	4b02      	ldr	r3, [pc, #8]	; (800bc44 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	200016c8 	.word	0x200016c8
 800bc48:	0800c65c 	.word	0x0800c65c

0800bc4c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	4603      	mov	r3, r0
 800bc54:	6039      	str	r1, [r7, #0]
 800bc56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc58:	683a      	ldr	r2, [r7, #0]
 800bc5a:	4904      	ldr	r1, [pc, #16]	; (800bc6c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800bc5c:	4804      	ldr	r0, [pc, #16]	; (800bc70 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800bc5e:	f7ff fddd 	bl	800b81c <USBD_GetString>
  return USBD_StrDesc;
 800bc62:	4b02      	ldr	r3, [pc, #8]	; (800bc6c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	200016c8 	.word	0x200016c8
 800bc70:	0800c674 	.word	0x0800c674

0800bc74 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	6039      	str	r1, [r7, #0]
 800bc7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	221a      	movs	r2, #26
 800bc84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc86:	f000 f843 	bl	800bd10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bc8a:	4b02      	ldr	r3, [pc, #8]	; (800bc94 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	20000104 	.word	0x20000104

0800bc98 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	6039      	str	r1, [r7, #0]
 800bca2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bca4:	79fb      	ldrb	r3, [r7, #7]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d105      	bne.n	800bcb6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	4907      	ldr	r1, [pc, #28]	; (800bccc <USBD_HS_ConfigStrDescriptor+0x34>)
 800bcae:	4808      	ldr	r0, [pc, #32]	; (800bcd0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bcb0:	f7ff fdb4 	bl	800b81c <USBD_GetString>
 800bcb4:	e004      	b.n	800bcc0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	4904      	ldr	r1, [pc, #16]	; (800bccc <USBD_HS_ConfigStrDescriptor+0x34>)
 800bcba:	4805      	ldr	r0, [pc, #20]	; (800bcd0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bcbc:	f7ff fdae 	bl	800b81c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcc0:	4b02      	ldr	r3, [pc, #8]	; (800bccc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	200016c8 	.word	0x200016c8
 800bcd0:	0800c688 	.word	0x0800c688

0800bcd4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	6039      	str	r1, [r7, #0]
 800bcde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d105      	bne.n	800bcf2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	4907      	ldr	r1, [pc, #28]	; (800bd08 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bcea:	4808      	ldr	r0, [pc, #32]	; (800bd0c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bcec:	f7ff fd96 	bl	800b81c <USBD_GetString>
 800bcf0:	e004      	b.n	800bcfc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	4904      	ldr	r1, [pc, #16]	; (800bd08 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bcf6:	4805      	ldr	r0, [pc, #20]	; (800bd0c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bcf8:	f7ff fd90 	bl	800b81c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcfc:	4b02      	ldr	r3, [pc, #8]	; (800bd08 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	200016c8 	.word	0x200016c8
 800bd0c:	0800c694 	.word	0x0800c694

0800bd10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd16:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <Get_SerialNum+0x44>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd1c:	4b0e      	ldr	r3, [pc, #56]	; (800bd58 <Get_SerialNum+0x48>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd22:	4b0e      	ldr	r3, [pc, #56]	; (800bd5c <Get_SerialNum+0x4c>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d009      	beq.n	800bd4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd36:	2208      	movs	r2, #8
 800bd38:	4909      	ldr	r1, [pc, #36]	; (800bd60 <Get_SerialNum+0x50>)
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f000 f814 	bl	800bd68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd40:	2204      	movs	r2, #4
 800bd42:	4908      	ldr	r1, [pc, #32]	; (800bd64 <Get_SerialNum+0x54>)
 800bd44:	68b8      	ldr	r0, [r7, #8]
 800bd46:	f000 f80f 	bl	800bd68 <IntToUnicode>
  }
}
 800bd4a:	bf00      	nop
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	1ff07a10 	.word	0x1ff07a10
 800bd58:	1ff07a14 	.word	0x1ff07a14
 800bd5c:	1ff07a18 	.word	0x1ff07a18
 800bd60:	20000106 	.word	0x20000106
 800bd64:	20000116 	.word	0x20000116

0800bd68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	4613      	mov	r3, r2
 800bd74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	75fb      	strb	r3, [r7, #23]
 800bd7e:	e027      	b.n	800bdd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	0f1b      	lsrs	r3, r3, #28
 800bd84:	2b09      	cmp	r3, #9
 800bd86:	d80b      	bhi.n	800bda0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	0f1b      	lsrs	r3, r3, #28
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	4619      	mov	r1, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	440b      	add	r3, r1
 800bd98:	3230      	adds	r2, #48	; 0x30
 800bd9a:	b2d2      	uxtb	r2, r2
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	e00a      	b.n	800bdb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	0f1b      	lsrs	r3, r3, #28
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	4619      	mov	r1, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	440b      	add	r3, r1
 800bdb0:	3237      	adds	r2, #55	; 0x37
 800bdb2:	b2d2      	uxtb	r2, r2
 800bdb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bdbc:	7dfb      	ldrb	r3, [r7, #23]
 800bdbe:	005b      	lsls	r3, r3, #1
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdca:	7dfb      	ldrb	r3, [r7, #23]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	75fb      	strb	r3, [r7, #23]
 800bdd0:	7dfa      	ldrb	r2, [r7, #23]
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d3d3      	bcc.n	800bd80 <IntToUnicode+0x18>
  }
}
 800bdd8:	bf00      	nop
 800bdda:	bf00      	nop
 800bddc:	371c      	adds	r7, #28
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
	...

0800bde8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08c      	sub	sp, #48	; 0x30
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdf0:	f107 031c 	add.w	r3, r7, #28
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]
 800bdf8:	605a      	str	r2, [r3, #4]
 800bdfa:	609a      	str	r2, [r3, #8]
 800bdfc:	60da      	str	r2, [r3, #12]
 800bdfe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a2f      	ldr	r2, [pc, #188]	; (800bec4 <HAL_PCD_MspInit+0xdc>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d158      	bne.n	800bebc <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be0a:	4b2f      	ldr	r3, [pc, #188]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0e:	4a2e      	ldr	r2, [pc, #184]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be10:	f043 0302 	orr.w	r3, r3, #2
 800be14:	6313      	str	r3, [r2, #48]	; 0x30
 800be16:	4b2c      	ldr	r3, [pc, #176]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1a:	f003 0302 	and.w	r3, r3, #2
 800be1e:	61bb      	str	r3, [r7, #24]
 800be20:	69bb      	ldr	r3, [r7, #24]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800be22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800be26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be28:	2302      	movs	r3, #2
 800be2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be2c:	2300      	movs	r3, #0
 800be2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be30:	2303      	movs	r3, #3
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800be34:	230c      	movs	r3, #12
 800be36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be38:	f107 031c 	add.w	r3, r7, #28
 800be3c:	4619      	mov	r1, r3
 800be3e:	4823      	ldr	r0, [pc, #140]	; (800becc <HAL_PCD_MspInit+0xe4>)
 800be40:	f7f7 fcb4 	bl	80037ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_OTGPHYC_CLK_ENABLE();
 800be44:	4b20      	ldr	r3, [pc, #128]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be48:	4a1f      	ldr	r2, [pc, #124]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be4e:	6453      	str	r3, [r2, #68]	; 0x44
 800be50:	4b1d      	ldr	r3, [pc, #116]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800be5c:	4b1a      	ldr	r3, [pc, #104]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be60:	4a19      	ldr	r2, [pc, #100]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be66:	6313      	str	r3, [r2, #48]	; 0x30
 800be68:	4b17      	ldr	r3, [pc, #92]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be70:	613b      	str	r3, [r7, #16]
 800be72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800be74:	4b14      	ldr	r3, [pc, #80]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be78:	4a13      	ldr	r2, [pc, #76]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be7e:	6313      	str	r3, [r2, #48]	; 0x30
 800be80:	4b11      	ldr	r3, [pc, #68]	; (800bec8 <HAL_PCD_MspInit+0xe0>)
 800be82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be88:	60fb      	str	r3, [r7, #12]
 800be8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800be8c:	2200      	movs	r2, #0
 800be8e:	2100      	movs	r1, #0
 800be90:	204a      	movs	r0, #74	; 0x4a
 800be92:	f7f7 fc24 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800be96:	204a      	movs	r0, #74	; 0x4a
 800be98:	f7f7 fc3d 	bl	8003716 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800be9c:	2200      	movs	r2, #0
 800be9e:	2100      	movs	r1, #0
 800bea0:	204b      	movs	r0, #75	; 0x4b
 800bea2:	f7f7 fc1c 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800bea6:	204b      	movs	r0, #75	; 0x4b
 800bea8:	f7f7 fc35 	bl	8003716 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800beac:	2200      	movs	r2, #0
 800beae:	2100      	movs	r1, #0
 800beb0:	204d      	movs	r0, #77	; 0x4d
 800beb2:	f7f7 fc14 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800beb6:	204d      	movs	r0, #77	; 0x4d
 800beb8:	f7f7 fc2d 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bebc:	bf00      	nop
 800bebe:	3730      	adds	r7, #48	; 0x30
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	40040000 	.word	0x40040000
 800bec8:	40023800 	.word	0x40023800
 800becc:	40020400 	.word	0x40020400

0800bed0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7fe fd06 	bl	800a8f8 <USBD_LL_SetupStage>
}
 800beec:	bf00      	nop
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800bf06:	78fa      	ldrb	r2, [r7, #3]
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	1a9b      	subs	r3, r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	440b      	add	r3, r1
 800bf14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	78fb      	ldrb	r3, [r7, #3]
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	f7fe fd40 	bl	800a9a2 <USBD_LL_DataOutStage>
}
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	460b      	mov	r3, r1
 800bf34:	70fb      	strb	r3, [r7, #3]
  uint8_t ret;
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800bf3c:	78fa      	ldrb	r2, [r7, #3]
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	4613      	mov	r3, r2
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	1a9b      	subs	r3, r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	440b      	add	r3, r1
 800bf4a:	3348      	adds	r3, #72	; 0x48
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	78fb      	ldrb	r3, [r7, #3]
 800bf50:	4619      	mov	r1, r3
 800bf52:	f7fe fd89 	bl	800aa68 <USBD_LL_DataInStage>
  ret = pack_iq_samples();
 800bf56:	f7f5 fd57 	bl	8001a08 <pack_iq_samples>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	73fb      	strb	r3, [r7, #15]
}
 800bf5e:	bf00      	nop
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe fe89 	bl	800ac8c <USBD_LL_SOF>
}
 800bf7a:	bf00      	nop
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d102      	bne.n	800bf9c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bf96:	2300      	movs	r3, #0
 800bf98:	73fb      	strb	r3, [r7, #15]
 800bf9a:	e008      	b.n	800bfae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d102      	bne.n	800bfaa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	73fb      	strb	r3, [r7, #15]
 800bfa8:	e001      	b.n	800bfae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bfaa:	f7f6 fab1 	bl	8002510 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bfb4:	7bfa      	ldrb	r2, [r7, #15]
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fe fe2c 	bl	800ac16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe fde5 	bl	800ab94 <USBD_LL_Reset>
}
 800bfca:	bf00      	nop
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fe fe27 	bl	800ac36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	6812      	ldr	r2, [r2, #0]
 800bff6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bffa:	f043 0301 	orr.w	r3, r3, #1
 800bffe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a1b      	ldr	r3, [r3, #32]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d005      	beq.n	800c014 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <HAL_PCD_SuspendCallback+0x48>)
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	4a03      	ldr	r2, [pc, #12]	; (800c01c <HAL_PCD_SuspendCallback+0x48>)
 800c00e:	f043 0306 	orr.w	r3, r3, #6
 800c012:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c014:	bf00      	nop
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	e000ed00 	.word	0xe000ed00

0800c020 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe fe16 	bl	800ac60 <USBD_LL_Resume>
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c04e:	78fa      	ldrb	r2, [r7, #3]
 800c050:	4611      	mov	r1, r2
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe fe41 	bl	800acda <USBD_LL_IsoOUTIncomplete>
}
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c072:	78fa      	ldrb	r2, [r7, #3]
 800c074:	4611      	mov	r1, r2
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fe22 	bl	800acc0 <USBD_LL_IsoINIncomplete>
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fe2e 	bl	800acf4 <USBD_LL_DevConnected>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe fe2b 	bl	800ad0a <USBD_LL_DevDisconnected>
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d13d      	bne.n	800c148 <USBD_LL_Init+0x8c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800c0cc:	4a21      	ldr	r2, [pc, #132]	; (800c154 <USBD_LL_Init+0x98>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_HS;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a1f      	ldr	r2, [pc, #124]	; (800c154 <USBD_LL_Init+0x98>)
 800c0d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c0dc:	4b1d      	ldr	r3, [pc, #116]	; (800c154 <USBD_LL_Init+0x98>)
 800c0de:	4a1e      	ldr	r2, [pc, #120]	; (800c158 <USBD_LL_Init+0x9c>)
 800c0e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800c0e2:	4b1c      	ldr	r3, [pc, #112]	; (800c154 <USBD_LL_Init+0x98>)
 800c0e4:	2209      	movs	r2, #9
 800c0e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 800c0e8:	4b1a      	ldr	r3, [pc, #104]	; (800c154 <USBD_LL_Init+0x98>)
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800c0ee:	4b19      	ldr	r3, [pc, #100]	; (800c154 <USBD_LL_Init+0x98>)
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c0f4:	4b17      	ldr	r3, [pc, #92]	; (800c154 <USBD_LL_Init+0x98>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c0fa:	4b16      	ldr	r3, [pc, #88]	; (800c154 <USBD_LL_Init+0x98>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800c100:	4b14      	ldr	r3, [pc, #80]	; (800c154 <USBD_LL_Init+0x98>)
 800c102:	2200      	movs	r2, #0
 800c104:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c106:	4b13      	ldr	r3, [pc, #76]	; (800c154 <USBD_LL_Init+0x98>)
 800c108:	2200      	movs	r2, #0
 800c10a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800c10c:	4b11      	ldr	r3, [pc, #68]	; (800c154 <USBD_LL_Init+0x98>)
 800c10e:	2200      	movs	r2, #0
 800c110:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c112:	4b10      	ldr	r3, [pc, #64]	; (800c154 <USBD_LL_Init+0x98>)
 800c114:	2200      	movs	r2, #0
 800c116:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800c118:	480e      	ldr	r0, [pc, #56]	; (800c154 <USBD_LL_Init+0x98>)
 800c11a:	f7f9 fa60 	bl	80055de <HAL_PCD_Init>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <USBD_LL_Init+0x6c>
  {
    Error_Handler( );
 800c124:	f7f6 f9f4 	bl	8002510 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800c128:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c12c:	4809      	ldr	r0, [pc, #36]	; (800c154 <USBD_LL_Init+0x98>)
 800c12e:	f7fa fbe0 	bl	80068f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800c132:	2280      	movs	r2, #128	; 0x80
 800c134:	2100      	movs	r1, #0
 800c136:	4807      	ldr	r0, [pc, #28]	; (800c154 <USBD_LL_Init+0x98>)
 800c138:	f7fa fb94 	bl	8006864 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800c13c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800c140:	2101      	movs	r1, #1
 800c142:	4804      	ldr	r0, [pc, #16]	; (800c154 <USBD_LL_Init+0x98>)
 800c144:	f7fa fb8e 	bl	8006864 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	200018c8 	.word	0x200018c8
 800c158:	40040000 	.word	0x40040000

0800c15c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c164:	2300      	movs	r3, #0
 800c166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c168:	2300      	movs	r3, #0
 800c16a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c172:	4618      	mov	r0, r3
 800c174:	f7f9 fb57 	bl	8005826 <HAL_PCD_Start>
 800c178:	4603      	mov	r3, r0
 800c17a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 f92a 	bl	800c3d8 <USBD_Get_USB_Status>
 800c184:	4603      	mov	r3, r0
 800c186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c188:	7bbb      	ldrb	r3, [r7, #14]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	4608      	mov	r0, r1
 800c19c:	4611      	mov	r1, r2
 800c19e:	461a      	mov	r2, r3
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	70fb      	strb	r3, [r7, #3]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	70bb      	strb	r3, [r7, #2]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1ba:	78bb      	ldrb	r3, [r7, #2]
 800c1bc:	883a      	ldrh	r2, [r7, #0]
 800c1be:	78f9      	ldrb	r1, [r7, #3]
 800c1c0:	f7f9 ff57 	bl	8006072 <HAL_PCD_EP_Open>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 f904 	bl	800c3d8 <USBD_Get_USB_Status>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1f8:	78fa      	ldrb	r2, [r7, #3]
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7f9 ffa0 	bl	8006142 <HAL_PCD_EP_Close>
 800c202:	4603      	mov	r3, r0
 800c204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c206:	7bfb      	ldrb	r3, [r7, #15]
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 f8e5 	bl	800c3d8 <USBD_Get_USB_Status>
 800c20e:	4603      	mov	r3, r0
 800c210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c212:	7bbb      	ldrb	r3, [r7, #14]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c228:	2300      	movs	r3, #0
 800c22a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c236:	78fa      	ldrb	r2, [r7, #3]
 800c238:	4611      	mov	r1, r2
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fa f878 	bl	8006330 <HAL_PCD_EP_SetStall>
 800c240:	4603      	mov	r3, r0
 800c242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c244:	7bfb      	ldrb	r3, [r7, #15]
 800c246:	4618      	mov	r0, r3
 800c248:	f000 f8c6 	bl	800c3d8 <USBD_Get_USB_Status>
 800c24c:	4603      	mov	r3, r0
 800c24e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c250:	7bbb      	ldrb	r3, [r7, #14]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b084      	sub	sp, #16
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	460b      	mov	r3, r1
 800c264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c274:	78fa      	ldrb	r2, [r7, #3]
 800c276:	4611      	mov	r1, r2
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fa f8bd 	bl	80063f8 <HAL_PCD_EP_ClrStall>
 800c27e:	4603      	mov	r3, r0
 800c280:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c282:	7bfb      	ldrb	r3, [r7, #15]
 800c284:	4618      	mov	r0, r3
 800c286:	f000 f8a7 	bl	800c3d8 <USBD_Get_USB_Status>
 800c28a:	4603      	mov	r3, r0
 800c28c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c290:	4618      	mov	r0, r3
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da0b      	bge.n	800c2cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2b4:	78fb      	ldrb	r3, [r7, #3]
 800c2b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2ba:	68f9      	ldr	r1, [r7, #12]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	00db      	lsls	r3, r3, #3
 800c2c0:	1a9b      	subs	r3, r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	440b      	add	r3, r1
 800c2c6:	333e      	adds	r3, #62	; 0x3e
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	e00b      	b.n	800c2e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2cc:	78fb      	ldrb	r3, [r7, #3]
 800c2ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2d2:	68f9      	ldr	r1, [r7, #12]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	1a9b      	subs	r3, r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	440b      	add	r3, r1
 800c2de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3714      	adds	r7, #20
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c30a:	78fa      	ldrb	r2, [r7, #3]
 800c30c:	4611      	mov	r1, r2
 800c30e:	4618      	mov	r0, r3
 800c310:	f7f9 fe8a 	bl	8006028 <HAL_PCD_SetAddress>
 800c314:	4603      	mov	r3, r0
 800c316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c318:	7bfb      	ldrb	r3, [r7, #15]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 f85c 	bl	800c3d8 <USBD_Get_USB_Status>
 800c320:	4603      	mov	r3, r0
 800c322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c324:	7bbb      	ldrb	r3, [r7, #14]
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b086      	sub	sp, #24
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	607a      	str	r2, [r7, #4]
 800c338:	603b      	str	r3, [r7, #0]
 800c33a:	460b      	mov	r3, r1
 800c33c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c34c:	7af9      	ldrb	r1, [r7, #11]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	f7f9 ffa3 	bl	800629c <HAL_PCD_EP_Transmit>
 800c356:	4603      	mov	r3, r0
 800c358:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 f83b 	bl	800c3d8 <USBD_Get_USB_Status>
 800c362:	4603      	mov	r3, r0
 800c364:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c366:	7dbb      	ldrb	r3, [r7, #22]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	607a      	str	r2, [r7, #4]
 800c37a:	603b      	str	r3, [r7, #0]
 800c37c:	460b      	mov	r3, r1
 800c37e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c38e:	7af9      	ldrb	r1, [r7, #11]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	f7f9 ff1f 	bl	80061d6 <HAL_PCD_EP_Receive>
 800c398:	4603      	mov	r3, r0
 800c39a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c39c:	7dfb      	ldrb	r3, [r7, #23]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 f81a 	bl	800c3d8 <USBD_Get_USB_Status>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b082      	sub	sp, #8
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3c4:	78fa      	ldrb	r2, [r7, #3]
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7f9 ff4f 	bl	800626c <HAL_PCD_EP_GetRxCount>
 800c3ce:	4603      	mov	r3, r0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d817      	bhi.n	800c41c <USBD_Get_USB_Status+0x44>
 800c3ec:	a201      	add	r2, pc, #4	; (adr r2, 800c3f4 <USBD_Get_USB_Status+0x1c>)
 800c3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f2:	bf00      	nop
 800c3f4:	0800c405 	.word	0x0800c405
 800c3f8:	0800c40b 	.word	0x0800c40b
 800c3fc:	0800c411 	.word	0x0800c411
 800c400:	0800c417 	.word	0x0800c417
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	73fb      	strb	r3, [r7, #15]
    break;
 800c408:	e00b      	b.n	800c422 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c40a:	2303      	movs	r3, #3
 800c40c:	73fb      	strb	r3, [r7, #15]
    break;
 800c40e:	e008      	b.n	800c422 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c410:	2301      	movs	r3, #1
 800c412:	73fb      	strb	r3, [r7, #15]
    break;
 800c414:	e005      	b.n	800c422 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c416:	2303      	movs	r3, #3
 800c418:	73fb      	strb	r3, [r7, #15]
    break;
 800c41a:	e002      	b.n	800c422 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c41c:	2303      	movs	r3, #3
 800c41e:	73fb      	strb	r3, [r7, #15]
    break;
 800c420:	bf00      	nop
  }
  return usb_status;
 800c422:	7bfb      	ldrb	r3, [r7, #15]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <__errno>:
 800c430:	4b01      	ldr	r3, [pc, #4]	; (800c438 <__errno+0x8>)
 800c432:	6818      	ldr	r0, [r3, #0]
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	20000120 	.word	0x20000120

0800c43c <__libc_init_array>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	4d0d      	ldr	r5, [pc, #52]	; (800c474 <__libc_init_array+0x38>)
 800c440:	4c0d      	ldr	r4, [pc, #52]	; (800c478 <__libc_init_array+0x3c>)
 800c442:	1b64      	subs	r4, r4, r5
 800c444:	10a4      	asrs	r4, r4, #2
 800c446:	2600      	movs	r6, #0
 800c448:	42a6      	cmp	r6, r4
 800c44a:	d109      	bne.n	800c460 <__libc_init_array+0x24>
 800c44c:	4d0b      	ldr	r5, [pc, #44]	; (800c47c <__libc_init_array+0x40>)
 800c44e:	4c0c      	ldr	r4, [pc, #48]	; (800c480 <__libc_init_array+0x44>)
 800c450:	f000 f8f8 	bl	800c644 <_init>
 800c454:	1b64      	subs	r4, r4, r5
 800c456:	10a4      	asrs	r4, r4, #2
 800c458:	2600      	movs	r6, #0
 800c45a:	42a6      	cmp	r6, r4
 800c45c:	d105      	bne.n	800c46a <__libc_init_array+0x2e>
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	f855 3b04 	ldr.w	r3, [r5], #4
 800c464:	4798      	blx	r3
 800c466:	3601      	adds	r6, #1
 800c468:	e7ee      	b.n	800c448 <__libc_init_array+0xc>
 800c46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c46e:	4798      	blx	r3
 800c470:	3601      	adds	r6, #1
 800c472:	e7f2      	b.n	800c45a <__libc_init_array+0x1e>
 800c474:	0800c77c 	.word	0x0800c77c
 800c478:	0800c77c 	.word	0x0800c77c
 800c47c:	0800c77c 	.word	0x0800c77c
 800c480:	0800c780 	.word	0x0800c780

0800c484 <malloc>:
 800c484:	4b02      	ldr	r3, [pc, #8]	; (800c490 <malloc+0xc>)
 800c486:	4601      	mov	r1, r0
 800c488:	6818      	ldr	r0, [r3, #0]
 800c48a:	f000 b863 	b.w	800c554 <_malloc_r>
 800c48e:	bf00      	nop
 800c490:	20000120 	.word	0x20000120

0800c494 <free>:
 800c494:	4b02      	ldr	r3, [pc, #8]	; (800c4a0 <free+0xc>)
 800c496:	4601      	mov	r1, r0
 800c498:	6818      	ldr	r0, [r3, #0]
 800c49a:	f000 b80b 	b.w	800c4b4 <_free_r>
 800c49e:	bf00      	nop
 800c4a0:	20000120 	.word	0x20000120

0800c4a4 <memset>:
 800c4a4:	4402      	add	r2, r0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d100      	bne.n	800c4ae <memset+0xa>
 800c4ac:	4770      	bx	lr
 800c4ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c4b2:	e7f9      	b.n	800c4a8 <memset+0x4>

0800c4b4 <_free_r>:
 800c4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4b6:	2900      	cmp	r1, #0
 800c4b8:	d048      	beq.n	800c54c <_free_r+0x98>
 800c4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4be:	9001      	str	r0, [sp, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4c6:	bfb8      	it	lt
 800c4c8:	18e4      	addlt	r4, r4, r3
 800c4ca:	f000 f8ad 	bl	800c628 <__malloc_lock>
 800c4ce:	4a20      	ldr	r2, [pc, #128]	; (800c550 <_free_r+0x9c>)
 800c4d0:	9801      	ldr	r0, [sp, #4]
 800c4d2:	6813      	ldr	r3, [r2, #0]
 800c4d4:	4615      	mov	r5, r2
 800c4d6:	b933      	cbnz	r3, 800c4e6 <_free_r+0x32>
 800c4d8:	6063      	str	r3, [r4, #4]
 800c4da:	6014      	str	r4, [r2, #0]
 800c4dc:	b003      	add	sp, #12
 800c4de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4e2:	f000 b8a7 	b.w	800c634 <__malloc_unlock>
 800c4e6:	42a3      	cmp	r3, r4
 800c4e8:	d90b      	bls.n	800c502 <_free_r+0x4e>
 800c4ea:	6821      	ldr	r1, [r4, #0]
 800c4ec:	1862      	adds	r2, r4, r1
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	bf04      	itt	eq
 800c4f2:	681a      	ldreq	r2, [r3, #0]
 800c4f4:	685b      	ldreq	r3, [r3, #4]
 800c4f6:	6063      	str	r3, [r4, #4]
 800c4f8:	bf04      	itt	eq
 800c4fa:	1852      	addeq	r2, r2, r1
 800c4fc:	6022      	streq	r2, [r4, #0]
 800c4fe:	602c      	str	r4, [r5, #0]
 800c500:	e7ec      	b.n	800c4dc <_free_r+0x28>
 800c502:	461a      	mov	r2, r3
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	b10b      	cbz	r3, 800c50c <_free_r+0x58>
 800c508:	42a3      	cmp	r3, r4
 800c50a:	d9fa      	bls.n	800c502 <_free_r+0x4e>
 800c50c:	6811      	ldr	r1, [r2, #0]
 800c50e:	1855      	adds	r5, r2, r1
 800c510:	42a5      	cmp	r5, r4
 800c512:	d10b      	bne.n	800c52c <_free_r+0x78>
 800c514:	6824      	ldr	r4, [r4, #0]
 800c516:	4421      	add	r1, r4
 800c518:	1854      	adds	r4, r2, r1
 800c51a:	42a3      	cmp	r3, r4
 800c51c:	6011      	str	r1, [r2, #0]
 800c51e:	d1dd      	bne.n	800c4dc <_free_r+0x28>
 800c520:	681c      	ldr	r4, [r3, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	6053      	str	r3, [r2, #4]
 800c526:	4421      	add	r1, r4
 800c528:	6011      	str	r1, [r2, #0]
 800c52a:	e7d7      	b.n	800c4dc <_free_r+0x28>
 800c52c:	d902      	bls.n	800c534 <_free_r+0x80>
 800c52e:	230c      	movs	r3, #12
 800c530:	6003      	str	r3, [r0, #0]
 800c532:	e7d3      	b.n	800c4dc <_free_r+0x28>
 800c534:	6825      	ldr	r5, [r4, #0]
 800c536:	1961      	adds	r1, r4, r5
 800c538:	428b      	cmp	r3, r1
 800c53a:	bf04      	itt	eq
 800c53c:	6819      	ldreq	r1, [r3, #0]
 800c53e:	685b      	ldreq	r3, [r3, #4]
 800c540:	6063      	str	r3, [r4, #4]
 800c542:	bf04      	itt	eq
 800c544:	1949      	addeq	r1, r1, r5
 800c546:	6021      	streq	r1, [r4, #0]
 800c548:	6054      	str	r4, [r2, #4]
 800c54a:	e7c7      	b.n	800c4dc <_free_r+0x28>
 800c54c:	b003      	add	sp, #12
 800c54e:	bd30      	pop	{r4, r5, pc}
 800c550:	200001a8 	.word	0x200001a8

0800c554 <_malloc_r>:
 800c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c556:	1ccd      	adds	r5, r1, #3
 800c558:	f025 0503 	bic.w	r5, r5, #3
 800c55c:	3508      	adds	r5, #8
 800c55e:	2d0c      	cmp	r5, #12
 800c560:	bf38      	it	cc
 800c562:	250c      	movcc	r5, #12
 800c564:	2d00      	cmp	r5, #0
 800c566:	4606      	mov	r6, r0
 800c568:	db01      	blt.n	800c56e <_malloc_r+0x1a>
 800c56a:	42a9      	cmp	r1, r5
 800c56c:	d903      	bls.n	800c576 <_malloc_r+0x22>
 800c56e:	230c      	movs	r3, #12
 800c570:	6033      	str	r3, [r6, #0]
 800c572:	2000      	movs	r0, #0
 800c574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c576:	f000 f857 	bl	800c628 <__malloc_lock>
 800c57a:	4921      	ldr	r1, [pc, #132]	; (800c600 <_malloc_r+0xac>)
 800c57c:	680a      	ldr	r2, [r1, #0]
 800c57e:	4614      	mov	r4, r2
 800c580:	b99c      	cbnz	r4, 800c5aa <_malloc_r+0x56>
 800c582:	4f20      	ldr	r7, [pc, #128]	; (800c604 <_malloc_r+0xb0>)
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	b923      	cbnz	r3, 800c592 <_malloc_r+0x3e>
 800c588:	4621      	mov	r1, r4
 800c58a:	4630      	mov	r0, r6
 800c58c:	f000 f83c 	bl	800c608 <_sbrk_r>
 800c590:	6038      	str	r0, [r7, #0]
 800c592:	4629      	mov	r1, r5
 800c594:	4630      	mov	r0, r6
 800c596:	f000 f837 	bl	800c608 <_sbrk_r>
 800c59a:	1c43      	adds	r3, r0, #1
 800c59c:	d123      	bne.n	800c5e6 <_malloc_r+0x92>
 800c59e:	230c      	movs	r3, #12
 800c5a0:	6033      	str	r3, [r6, #0]
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f000 f846 	bl	800c634 <__malloc_unlock>
 800c5a8:	e7e3      	b.n	800c572 <_malloc_r+0x1e>
 800c5aa:	6823      	ldr	r3, [r4, #0]
 800c5ac:	1b5b      	subs	r3, r3, r5
 800c5ae:	d417      	bmi.n	800c5e0 <_malloc_r+0x8c>
 800c5b0:	2b0b      	cmp	r3, #11
 800c5b2:	d903      	bls.n	800c5bc <_malloc_r+0x68>
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	441c      	add	r4, r3
 800c5b8:	6025      	str	r5, [r4, #0]
 800c5ba:	e004      	b.n	800c5c6 <_malloc_r+0x72>
 800c5bc:	6863      	ldr	r3, [r4, #4]
 800c5be:	42a2      	cmp	r2, r4
 800c5c0:	bf0c      	ite	eq
 800c5c2:	600b      	streq	r3, [r1, #0]
 800c5c4:	6053      	strne	r3, [r2, #4]
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f000 f834 	bl	800c634 <__malloc_unlock>
 800c5cc:	f104 000b 	add.w	r0, r4, #11
 800c5d0:	1d23      	adds	r3, r4, #4
 800c5d2:	f020 0007 	bic.w	r0, r0, #7
 800c5d6:	1ac2      	subs	r2, r0, r3
 800c5d8:	d0cc      	beq.n	800c574 <_malloc_r+0x20>
 800c5da:	1a1b      	subs	r3, r3, r0
 800c5dc:	50a3      	str	r3, [r4, r2]
 800c5de:	e7c9      	b.n	800c574 <_malloc_r+0x20>
 800c5e0:	4622      	mov	r2, r4
 800c5e2:	6864      	ldr	r4, [r4, #4]
 800c5e4:	e7cc      	b.n	800c580 <_malloc_r+0x2c>
 800c5e6:	1cc4      	adds	r4, r0, #3
 800c5e8:	f024 0403 	bic.w	r4, r4, #3
 800c5ec:	42a0      	cmp	r0, r4
 800c5ee:	d0e3      	beq.n	800c5b8 <_malloc_r+0x64>
 800c5f0:	1a21      	subs	r1, r4, r0
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f000 f808 	bl	800c608 <_sbrk_r>
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	d1dd      	bne.n	800c5b8 <_malloc_r+0x64>
 800c5fc:	e7cf      	b.n	800c59e <_malloc_r+0x4a>
 800c5fe:	bf00      	nop
 800c600:	200001a8 	.word	0x200001a8
 800c604:	200001ac 	.word	0x200001ac

0800c608 <_sbrk_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4d06      	ldr	r5, [pc, #24]	; (800c624 <_sbrk_r+0x1c>)
 800c60c:	2300      	movs	r3, #0
 800c60e:	4604      	mov	r4, r0
 800c610:	4608      	mov	r0, r1
 800c612:	602b      	str	r3, [r5, #0]
 800c614:	f7f6 f93e 	bl	8002894 <_sbrk>
 800c618:	1c43      	adds	r3, r0, #1
 800c61a:	d102      	bne.n	800c622 <_sbrk_r+0x1a>
 800c61c:	682b      	ldr	r3, [r5, #0]
 800c61e:	b103      	cbz	r3, 800c622 <_sbrk_r+0x1a>
 800c620:	6023      	str	r3, [r4, #0]
 800c622:	bd38      	pop	{r3, r4, r5, pc}
 800c624:	20001ccc 	.word	0x20001ccc

0800c628 <__malloc_lock>:
 800c628:	4801      	ldr	r0, [pc, #4]	; (800c630 <__malloc_lock+0x8>)
 800c62a:	f000 b809 	b.w	800c640 <__retarget_lock_acquire_recursive>
 800c62e:	bf00      	nop
 800c630:	20001cd4 	.word	0x20001cd4

0800c634 <__malloc_unlock>:
 800c634:	4801      	ldr	r0, [pc, #4]	; (800c63c <__malloc_unlock+0x8>)
 800c636:	f000 b804 	b.w	800c642 <__retarget_lock_release_recursive>
 800c63a:	bf00      	nop
 800c63c:	20001cd4 	.word	0x20001cd4

0800c640 <__retarget_lock_acquire_recursive>:
 800c640:	4770      	bx	lr

0800c642 <__retarget_lock_release_recursive>:
 800c642:	4770      	bx	lr

0800c644 <_init>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	bf00      	nop
 800c648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64a:	bc08      	pop	{r3}
 800c64c:	469e      	mov	lr, r3
 800c64e:	4770      	bx	lr

0800c650 <_fini>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	bf00      	nop
 800c654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c656:	bc08      	pop	{r3}
 800c658:	469e      	mov	lr, r3
 800c65a:	4770      	bx	lr
